// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (0163c7ab).
//
// e:\327\vc\g2cpp\debug\G2COM.tli
//
// Wrapper implementations for Win32 type library G2COM.dll
// compiler-generated file created 01/13/09 at 19:36:30 - DO NOT EDIT!

#pragma once

//
// dispinterface _G2Events wrapper method implementations
//

inline HRESULT _G2Events::G2Paused ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _G2Events::G2Resumed ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _G2Events::G2Connected ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _G2Events::G2Disconnected ( ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _G2Events::RpcCalled ( _bstr_t ProcedureName, VARIANT * InputArguments, VARIANT * ReturnArguments ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x400c\x400c", (BSTR)ProcedureName, InputArguments, ReturnArguments);
}

inline HRESULT _G2Events::RpcStarted ( _bstr_t ProcedureName, VARIANT * InputArguments ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x400c", (BSTR)ProcedureName, InputArguments);
}

inline HRESULT _G2Events::RpcReturned ( _bstr_t ProcedureName, VARIANT * ReturnArguments, VARIANT * DeferredCallIdentifier ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x400c\x400c", (BSTR)ProcedureName, ReturnArguments, DeferredCallIdentifier);
}

inline HRESULT _G2Events::Error ( _bstr_t ErrorMessage, long ErrorCode, VARIANT * DeferredCallIdentifier ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0003\x400c", (BSTR)ErrorMessage, ErrorCode, DeferredCallIdentifier);
}

inline HRESULT _G2Events::GotMessage ( _bstr_t Message ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Message);
}

inline HRESULT _G2Events::G2Reset ( ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _G2Events::G2Started ( ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _G2Events::G2RunStateKnown ( ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _G2Events::ItemDeleted ( struct IG2Item4 * * localItem, long subscriptionHndl, const _variant_t & userData ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4009\x0003\x000c", localItem, subscriptionHndl, &userData);
}

inline HRESULT _G2Events::AttributeModified ( struct IG2Item4 * * localItem, _bstr_t attributeName, const _variant_t & newValue, long subscriptionHndl, const _variant_t & userData ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4009\x0008\x000c\x0003\x000c", localItem, (BSTR)attributeName, &newValue, subscriptionHndl, &userData);
}

inline HRESULT _G2Events::IconColorChanged ( struct IG2Item4 * * localItem, long subscriptionHndl, IDispatch * chgStruct, const _variant_t & userData ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4009\x0003\x0009\x000c", localItem, subscriptionHndl, chgStruct, &userData);
}

inline HRESULT _G2Events::CustomEvent ( struct IG2Item4 * * localItem, _bstr_t EventName, const _variant_t & newValue, long subscriptionHndl, const _variant_t & userData ) {
    return _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4009\x0008\x000c\x0003\x000c", localItem, (BSTR)EventName, &newValue, subscriptionHndl, &userData);
}

inline HRESULT _G2Events::ItemAdded ( struct IG2Workspace * * localItem, long subscriptionHndl, const _variant_t & userData ) {
    return _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4009\x0003\x000c", localItem, subscriptionHndl, &userData);
}

inline HRESULT _G2Events::ItemRemoved ( struct IG2Workspace * * localItem, long subscriptionHndl, const _variant_t & userData ) {
    return _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4009\x0003\x000c", localItem, subscriptionHndl, &userData);
}

inline HRESULT _G2Events::ValueChanged ( struct IG2Item4 * * localItem, const _variant_t & newValue, long subscriptionHndl, const _variant_t & userData ) {
    return _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4009\x000c\x0003\x000c", localItem, &newValue, subscriptionHndl, &userData);
}

inline HRESULT _G2Events::ItemSelected ( struct IG2Window * * localWindow, long subscriptionHandle, const _variant_t & userData ) {
    return _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4009\x0003\x000c", localWindow, subscriptionHandle, &userData);
}

//
// interface G2ComObject wrapper method implementations
//

inline _bstr_t G2ComObject::GetWhatAmI ( ) {
    BSTR _result;
    HRESULT _hr = get_WhatAmI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr G2ComObject::Duplicate ( ) {
    IUnknown * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IG2Item wrapper method implementations
//

inline _variant_t IG2Item::GetItem ( const _variant_t & Idx ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Idx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IG2Item::PutItem ( const _variant_t & Idx, const _variant_t & pItem ) {
    HRESULT _hr = put_Item(Idx, pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IG2Item::GetClassName ( ) {
    BSTR _result;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2Item::PutClassName ( _bstr_t pClassName ) {
    HRESULT _hr = put_ClassName(pClassName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IG2Item::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2Item::PutName ( _bstr_t pItemName ) {
    HRESULT _hr = put_Name(pItemName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline G2Type IG2Item::GetType ( ) {
    G2Type _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2Item::PutType ( G2Type pGsiType ) {
    HRESULT _hr = put_Type(pGsiType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IG2Item::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IG2Item::PutValue ( const _variant_t & pGsiType ) {
    HRESULT _hr = put_Value(pGsiType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IG2Item::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IG2Item::Add ( _bstr_t atName, const _variant_t & atVal ) {
    HRESULT _hr = raw_Add(atName, atVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item::Remove ( const _variant_t & varIdx ) {
    HRESULT _hr = raw_Remove(varIdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IG2Item::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline SAFEARRAY * IG2Item::GetAttrNames ( ) {
    SAFEARRAY * _result;
    HRESULT _hr = get_AttrNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IG2Item::GetAttrValues ( ) {
    SAFEARRAY * _result;
    HRESULT _hr = get_AttrValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IG2Item::GetAttrTypes ( ) {
    SAFEARRAY * _result;
    HRESULT _hr = get_AttrTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IG2Item::Symbolize ( const _variant_t & Idx, VARIANT_BOOL flgSym ) {
    HRESULT _hr = raw_Symbolize(Idx, flgSym);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item::Init ( long pItem ) {
    HRESULT _hr = raw_Init(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item::Git ( long * pGsiItem ) {
    HRESULT _hr = raw_Git(pGsiItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IG2Item2 wrapper method implementations
//

inline HRESULT IG2Item2::Inix ( long pItem, struct IG2ItemRef * pRef ) {
    HRESULT _hr = raw_Inix(pItem, pRef);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::Create ( IDispatch * pAxL ) {
    HRESULT _hr = raw_Create(pAxL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IG2Item2::GetLinked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Linked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IG2Item2::Link ( struct IG2ItemRef * pItemRef ) {
    HRESULT _hr = raw_Link(pItemRef);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::Unlink ( ) {
    HRESULT _hr = raw_Unlink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::Unhandle ( ) {
    HRESULT _hr = raw_Unhandle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline G2Type IG2Item2::GetAttrType ( const _variant_t & Idx ) {
    G2Type _result;
    HRESULT _hr = get_AttrType(Idx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IG2ItemRefPtr IG2Item2::GetReference ( ) {
    struct IG2ItemRef * _result;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IG2ItemRefPtr(_result, false);
}

inline _variant_t IG2Item2::SubscribeToAttributeModification ( const _variant_t & AttrName, const _variant_t & userData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeToAttributeModification(AttrName, userData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IG2Item2::SubscribeToDeletion ( const _variant_t & userData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeToDeletion(userData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IG2Item2::SubscribeToIconColorChange ( const _variant_t & userData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeToIconColorChange(userData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IG2Item2::SubscribeToCustomEvent ( _bstr_t EventName, const _variant_t & userData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeToCustomEvent(EventName, userData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IG2Item2::SubscribeToValueChange ( const _variant_t & userData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeToValueChange(userData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IG2Item2::UnsubscribeFromAttributeModification ( const _variant_t & FromWhat ) {
    HRESULT _hr = raw_UnsubscribeFromAttributeModification(FromWhat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::UnsubscribeFromDeletion ( ) {
    HRESULT _hr = raw_UnsubscribeFromDeletion();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::UnsubscribeFromIconColorChange ( ) {
    HRESULT _hr = raw_UnsubscribeFromIconColorChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::UnsubscribeFromCustomEvent ( const _variant_t & EventNames ) {
    HRESULT _hr = raw_UnsubscribeFromCustomEvent(EventNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::UnsubscribeFromAll ( ) {
    HRESULT _hr = raw_UnsubscribeFromAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item2::UnsubscribeFromValueChange ( ) {
    HRESULT _hr = raw_UnsubscribeFromValueChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IG2Item2::Subscriptions ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Subscriptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IG2Item3 wrapper method implementations
//

inline IDispatchPtr IG2Item3::GetIcon ( long BackgroundColor ) {
    IDispatch * _result;
    HRESULT _hr = get_Icon(BackgroundColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IG2Item4 wrapper method implementations
//

inline HRESULT IG2Item4::Init2 ( long pDatum ) {
    HRESULT _hr = raw_Init2(pDatum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item4::Init3 ( long pDatum, struct IG2ItemRef * pRef ) {
    HRESULT _hr = raw_Init3(pDatum, pRef);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Item4::Git2 ( long * ppDatum ) {
    HRESULT _hr = raw_Git2(ppDatum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IG2ItemRef wrapper method implementations
//

inline HRESULT IG2ItemRef::Init ( unsigned short * pUUIDin, long pCtx ) {
    HRESULT _hr = raw_Init(pUUIDin, pCtx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2ItemRef::Git ( unsigned short * pUUIDout, long * pCtx ) {
    HRESULT _hr = raw_Git(pUUIDout, pCtx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IG2ItemRef::GetUUID ( ) {
    BSTR _result;
    HRESULT _hr = get_UUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2ItemRef::PutUUID ( _bstr_t pVal ) {
    HRESULT _hr = put_UUID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IG2ItemRef::PutGateway ( struct IG2Gateway4 * _arg1 ) {
    HRESULT _hr = put_Gateway(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IG2Gateway wrapper method implementations
//

inline HRESULT IG2Gateway::Connect ( VARIANT_BOOL WaitFlag ) {
    HRESULT _hr = raw_Connect(WaitFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Gateway::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IG2Gateway::Call ( _bstr_t ProcedureName, SAFEARRAY * * InputArguments ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Call(ProcedureName, InputArguments, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IG2Gateway::CallDeferred ( _bstr_t ProcedureName, VARIANT * DeferredCallIdentifier, SAFEARRAY * * InputArguments ) {
    HRESULT _hr = raw_CallDeferred(ProcedureName, DeferredCallIdentifier, InputArguments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Gateway::Start ( _bstr_t ProcedureName, SAFEARRAY * * Arguments ) {
    HRESULT _hr = raw_Start(ProcedureName, Arguments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IG2Gateway::GetNamedObject ( _bstr_t ObjectName, _bstr_t ObjectClass ) {
    IDispatch * _result;
    HRESULT _hr = raw_GetNamedObject(ObjectName, ObjectClass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IG2Gateway::CreateObjectInstance ( _bstr_t ClassName ) {
    IDispatch * _result;
    HRESULT _hr = raw_CreateObjectInstance(ClassName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL IG2Gateway::GetIsG2Connected ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsG2Connected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IG2Gateway::GetIsG2Running ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsG2Running(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IG2Gateway::GetG2Location ( ) {
    BSTR _result;
    HRESULT _hr = get_G2Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2Gateway::PutG2Location ( _bstr_t Location ) {
    HRESULT _hr = put_G2Location(Location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IG2Gateway::GetInterfaceClass ( ) {
    BSTR _result;
    HRESULT _hr = get_InterfaceClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2Gateway::PutInterfaceClass ( _bstr_t InterfaceClassName ) {
    HRESULT _hr = put_InterfaceClass(InterfaceClassName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IG2Gateway::GetRemoteInitializationString ( ) {
    BSTR _result;
    HRESULT _hr = get_RemoteInitializationString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2Gateway::PutRemoteInitializationString ( _bstr_t InitializationString ) {
    HRESULT _hr = put_RemoteInitializationString(InitializationString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IG2Gateway::GetCallTimeout ( ) {
    long _result;
    HRESULT _hr = get_CallTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2Gateway::PutCallTimeout ( long MaxWait ) {
    HRESULT _hr = put_CallTimeout(MaxWait);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IG2Gateway::_FireEvents ( ) {
    HRESULT _hr = raw__FireEvents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Gateway::PostMessage ( VARIANT * Message ) {
    HRESULT _hr = raw_PostMessage(Message);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IG2Gateway2 wrapper method implementations
//

inline HRESULT IG2Gateway2::OnStartPage ( IUnknown * piUnk ) {
    HRESULT _hr = raw_OnStartPage(piUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Gateway2::OnEndPage ( ) {
    HRESULT _hr = raw_OnEndPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IG2Gateway3 wrapper method implementations
//

inline _variant_t IG2Gateway3::MakeG2ComVariable ( G2Type ComType, SAFEARRAY * * inArgs ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_MakeG2ComVariable(ComType, inArgs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IG2Gateway3::DbgMsg ( _bstr_t msg ) {
    HRESULT _hr = raw_DbgMsg(msg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline G2RunStateType IG2Gateway3::GetG2RunState ( ) {
    G2RunStateType _result;
    HRESULT _hr = get_G2RunState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IG2Gateway4 wrapper method implementations
//

inline long IG2Gateway4::GetTWHandle ( ) {
    long _result;
    HRESULT _hr = get_TWHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2Gateway4::PutTWHandle ( long plHWnd ) {
    HRESULT _hr = put_TWHandle(plHWnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IG2Gateway4::ObtainTWLockIfUnused ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_ObtainTWLockIfUnused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IG2Gateway4::ClearTWLock ( ) {
    HRESULT _hr = raw_ClearTWLock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IG2Gateway4::GetG2Symbols ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_G2Symbols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2Gateway4::PutG2Symbols ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_G2Symbols(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IG2Gateway4::GetDisconnectOnReset ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisconnectOnReset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2Gateway4::PutDisconnectOnReset ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DisconnectOnReset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IG2Workspace wrapper method implementations
//

inline _variant_t IG2Workspace::SubscribeToItemAddition ( const _variant_t & userData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeToItemAddition(userData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IG2Workspace::SubscribeToItemRemoval ( const _variant_t & userData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeToItemRemoval(userData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IG2Workspace::UnsubscribeFromItemAddition ( ) {
    HRESULT _hr = raw_UnsubscribeFromItemAddition();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Workspace::UnsubscribeFromItemRemoval ( ) {
    HRESULT _hr = raw_UnsubscribeFromItemRemoval();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IG2Window wrapper method implementations
//

inline _variant_t IG2Window::SubscribeToSelection ( const _variant_t & userData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeToSelection(userData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IG2Window::UnsubscribeFromSelection ( ) {
    HRESULT _hr = raw_UnsubscribeFromSelection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IG2Window::Getg2UserMode ( ) {
    BSTR _result;
    HRESULT _hr = get_g2UserMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2Window::Putg2UserMode ( _bstr_t pVal ) {
    HRESULT _hr = put_g2UserMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IG2StructureEntry wrapper method implementations
//

inline _bstr_t IG2StructureEntry::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2StructureEntry::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IG2StructureEntry::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IG2StructureEntry::PutValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IG2Structure wrapper method implementations
//

inline _variant_t IG2Structure::GetItem ( const _variant_t & index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IG2Structure::PutItem ( const _variant_t & index, const _variant_t & pItem ) {
    HRESULT _hr = put_Item(index, pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IG2Structure::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IG2Structure::Add ( SAFEARRAY * * InputArguments ) {
    HRESULT _hr = raw_Add(InputArguments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2Structure::Remove ( const _variant_t & index ) {
    HRESULT _hr = raw_Remove(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IG2Structure::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline SAFEARRAY * IG2Structure::Names ( ) {
    SAFEARRAY * _result;
    HRESULT _hr = raw_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IG2Structure::Values ( ) {
    SAFEARRAY * _result;
    HRESULT _hr = raw_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IG2Attribute wrapper method implementations
//

inline _bstr_t IG2Attribute::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2Attribute::PutValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IG2Attribute::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline G2Type IG2Attribute::GetType ( ) {
    G2Type _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2Attribute::PutType ( G2Type pType ) {
    HRESULT _hr = put_Type(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IG2Attribute::Init ( long pGsiAttr ) {
    HRESULT _hr = raw_Init(pGsiAttr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IG2ListOrArray wrapper method implementations
//

inline _variant_t IG2ListOrArray::GetItem ( long Idx ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Idx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IG2ListOrArray::PutItem ( long Idx, const _variant_t & pVal ) {
    HRESULT _hr = put_Item(Idx, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline G2Type IG2ListOrArray::GetType ( ) {
    G2Type _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2ListOrArray::PutType ( G2Type pVal ) {
    HRESULT _hr = put_Type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IG2ListOrArray::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IG2ListOrArray::Init ( long pGsiItem ) {
    HRESULT _hr = raw_Init(pGsiItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2ListOrArray::Insert ( long Idx, const _variant_t & varX ) {
    HRESULT _hr = raw_Insert(Idx, varX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2ListOrArray::Append ( long Idx, const _variant_t & varX ) {
    HRESULT _hr = raw_Append(Idx, varX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2ListOrArray::Add ( const _variant_t & varX ) {
    HRESULT _hr = raw_Add(varX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IG2ListOrArray::Remove ( long Idx ) {
    HRESULT _hr = raw_Remove(Idx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IG2ListOrArray::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IG2Symbol wrapper method implementations
//

inline _bstr_t IG2Symbol::GetItem ( ) {
    BSTR _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IG2Symbol::PutItem ( _bstr_t pVal ) {
    HRESULT _hr = put_Item(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IG2Symbol::GetUpperCase ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UpperCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2Symbol::PutUpperCase ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UpperCase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IG2LAElement wrapper method implementations
//

inline _variant_t IG2LAElement::GetItem ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IG2LAElement::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IG2LAElement::PutValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IG2LAElement::Init ( struct IG2ListOrArray * pLaw, long Idx ) {
    HRESULT _hr = raw_Init(pLaw, Idx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IG2ComConfigurator wrapper method implementations
//

inline VARIANT_BOOL IG2ComConfigurator::GetHighThroughput ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HighThroughput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IG2ComConfigurator::PutHighThroughput ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HighThroughput(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
