(defvar *current-test* "")

(defvar *current-dir*) 

(defvar *uc1-report-file*)
(defvar *uc3-report-file*)
(defvar *uc7-report-file*)

(defun run-test ()
  (sys:call-system-showing-output
   (concatenate 'string *current-dir* "..\\..\\scripts\\nt\\StartServer.bat " *current-test*)
   :shell-type "cmd.exe" :wait t :current-directory (concatenate 'string *current-dir* "..\\..\\scripts\\nt\\")))

(defvar +k+ 0.05)
(defvar +n+ 10)

(defun calc-mean (array)
  (/ (loop for value across array sum value) +n+))

(defun calc-std (array)
  (let ((mean (calc-mean array)))
    (sqrt (/ (loop for value across array sum 
		  (* (- mean value) (- mean value)))
	     +n+))))

(defun find-max-element-index (array)
  (let ((index 0)
        (mv 0))
  (dotimes (i +n+)
    (when (> (aref array i) mv)
      (setf mv (aref array i))
      (setf index i)))
  index))

(defun do-accurate-measurement (uc-func)
  (let ((results (make-array +n+))
        (std 0.0)
        (mean 0.0)
        (bad-index 0)
        (add-cycle 0))
    ;; Do the initial measurement.
    (dotimes (i +n+)
      (format t "Running cycle #~A~%" (+ 1 i))
      (setf (aref results i) (funcall uc-func)))
    (tagbody
     measure
     (setf mean (calc-mean results))
     (setf std (calc-std results))
     (when (> std (* +k+ mean))
       (setf bad-index (find-max-element-index results))
       (setf add-cycle (+ 1 add-cycle))
       (format t "Running additional cycle~%" add-cycle)
       (setf (aref results bad-index) (funcall uc-func))
       (go measure)))
    (coerce mean 'single-float)))

(defun uc1-func () 
  (let ((start-time (get-universal-time))
        (*current-test* (concatenate 'string "-kb " *current-dir* "ALL-G2-x64-abort-2.kb " "-start")))
    (run-test)
    (- (get-universal-time) start-time)))

(defun uc3-func ()
  (let ((*current-test* (concatenate 'string "-kb " *current-dir* "ALL-G2-x64-abort-2.kb " "-start"))
        (line)
        (res))
    (setf (environment-variable "G2_RECOMPILE_KB_NAME") (concatenate 'string *current-dir* "ALL-G2-x64-abort-2.kb"))
    (run-test)
    (with-open-file (stream *uc3-report-file* :direction :input)
      (setf line (read-line stream))
      (setf res (read-from-string line nil nil :start (+ 1 (position #\= line :test #'char=)))))
    (delete-file *uc3-report-file*)
    res))

(defun uc7-func ()
  (let ((*current-test* (concatenate 'string "-kb " *current-dir* "htwos\\htwos.kb " "-start"))
        (line)
        (res))
    (run-test)
    (with-open-file (stream *uc7-report-file* :direction :input)
      (setf line (read-line stream))
      (setf res (read-from-string line nil nil :start (+ 1 (position #\: line :test #'char=)))))
    (delete-file *uc7-report-file*)
    res))

(defun runner-main ()
  (setf *current-dir* (namestring (get-working-directory)))
  (setf (environment-variable "REPORT_DIR") (concatenate 'string *current-dir* "results"))
  (setf (environment-variable "G2_AUTO_TEST") (concatenate 'string *current-dir* "results"))
  (setf *uc1-report-file* (concatenate 'string *current-dir* "results/load-kb-time.txt"))
  (setf *uc3-report-file* (concatenate 'string *current-dir* "results/recompile-kb-time.txt"))
  (setf *uc7-report-file* (concatenate 'string *current-dir* "results/washington-river-report.txt"))
  (format t "Current dir: ~A~%" *current-dir*)
  
  (let ((args sys:*line-arguments-list*)
        (mean-time 0d0))
    (when (find "UC1" args :test #'string=)
      (when (probe-file *uc1-report-file*)
        (delete-file *uc1-report-file*))
      (format t "Running UC1...~%")
      (setf mean-time (do-accurate-measurement #'uc1-func))
      (format t "UC1 mean time: ~A~%" mean-time)
      (rewrite-result mean-time *uc1-report-file*))

    (when (find "UC3" args :test #'string=)
      (when (probe-file *uc3-report-file*)
        (delete-file *uc3-report-file*))
      (format t "Running UC3...~%")
      (setf mean-time (do-accurate-measurement #'uc3-func))
      (format t "UC3 mean time: ~A~%" mean-time)
      (rewrite-result mean-time *uc3-report-file*))

    (when (find "UC7" args :test #'string=)
      (when (probe-file *uc7-report-file*)
        (delete-file *uc7-report-file*))
      (format t "Running UC7...~%")
      (setf mean-time (do-accurate-measurement #'uc7-func))
      (format t "UC7 mean time: ~A~%" mean-time)
      (rewrite-result mean-time *uc7-report-file*)))
  (format t "FINISHED~%")
  (sleep 10))

(defun rewrite-result (result file) 
  (with-open-file (stream file
                          :direction :output :if-exists :supersede)
    (format stream "Mean value: ~A~%" result)))

