/* ntvnt.h -- Header File for ntvnt.c
 * Copyright (C) 1986-2017 Gensym Corporation.  All Rights Reserved.
 */


/* Symbol Definitions */
extern Object Kelement_type;
extern Object Qfixnum;
extern Object Qunsigned_byte;

extern Object Pclos;
extern Object Pclos_run;
extern Object Pclosx;
extern Object Pcl;
extern Object Pcl_user;
extern Object Pkeyword;
extern Object Ptrun;
extern Object Ptx;

/* function declarations */

#ifdef USE_PROTOTYPES

extern Object assq_function(Object,Object);
extern Object c_network_get_last_error_string(Object,Object);
extern Object call_or_schedule_handle_queued_icp_messages(Object,Object);
extern Object cancel_and_reclaim_scheduled_queue_element_1(Object);
extern Object clear_close_event(Object);
extern Object clear_read_event(Object);
extern Object clear_write_event(Object);
extern Object close_and_disconnect_icp_socket_handle(Object);
extern Object constant_queue_push_right(Object,Object);
extern Object continue_reading_from_icp_socket(Object);
extern Object copy_constant_wide_string_given_length(Object,Object);
extern Object copy_foreign_string_arg_if_appropriate(Object);
extern Object copy_icp_buffer(Object);
extern Object copy_partial_text_string(Object,Object);
extern Object delete_all_representations_for_icp_socket(Object);
extern Object delete_icp_element_1(Object,Object);
extern Object direct_structure_method(Object,Object);
extern Object enqueue_close_event(Object,Object);
extern Object enqueue_next_icp_buffer_if_any(Object);
extern Object enqueue_read_event(Object,Object);
extern Object enqueue_scheduler_events_if_necessary(Object);
extern Object enqueue_write_event(Object,Object);
extern Object execute_icp_accept_callbacks(Object,Object);
extern Object execute_icp_connect_callbacks(Object);
extern Object execute_icp_connection_loss_callbacks(Object,Object);
extern Object execute_icp_read_callbacks(Object,Object);
extern Object finalize_and_reclaim_icp_socket(Object);
extern Object flush_icp_output_ports(void);
extern Object g2_event_cycle_handling_windows_quit(void);
extern Object g2_event_ready_p(void);
extern Object get_accept_pathname(Object);
extern Object get_pending_network_events(void);
extern Object getfq_function_no_default(Object,Object);
extern Object gsi_event_cycle_handling_windows_quit(void);
extern Object handle_close_event(Object,Object);
extern Object handle_display_event(void);
extern Object handle_event_internal(Object,Object,Object);
extern Object handle_g2_reset_function(Object);
extern Object handle_icp_close(Object);
extern Object handle_icp_connect(Object);
extern Object handle_icp_write(Object);
extern Object handle_localnet_close(Object);
extern Object handle_localnet_read(Object);
extern Object handle_localnet_write(Object);
extern Object handle_network_accept_function(Object,Object);
extern Object handle_network_close_function(Object,Object);
extern Object handle_network_connect_function(Object,Object);
extern Object handle_network_read(Object,Object,Object);
extern Object handle_network_write(Object,Object);
extern Object handle_read_event_function(Object,Object,Object);
extern Object handle_write_event_function(Object,Object);
extern Object icp_cons_1(Object,Object);
extern Object icp_error_on_socket(int,...);
extern Object icp_socket_description(Object);
extern Object icp_socket_notifies_user_on_error_p(Object);
extern Object lookup_socket_from_handle(Object);
extern Object make_and_install_network_icp_socket(int,...);
extern Object make_error_code_1(Object,Object);
extern Object make_icp_buffer_internal_1(Object);
extern Object make_permanent_schedule_task_structure_internal(void);
extern Object make_variable_fill_icp_buffer(void);
extern Object maybe_schedule_service_workstation(Object,Object);
extern Object memq_function(Object,Object);
extern Object network_get_last_error_string(Object);
extern Object notify_sockets_of_g2_reset(void);
extern Object notify_user(int,...);
extern Object obtain_simple_gensym_string(Object);
extern Object poll_native_window_workstation(void);
extern Object reclaim_gensym_string(Object);
extern Object reclaim_icp_socket(Object);
extern Object reclaim_icp_sockets(void);
extern Object reclaim_schedule_task_args(Object);
extern Object reclaim_text_string(Object);
extern Object record_direct_structure_method(Object,Object,Object);
extern Object register_socket_to_handle(Object,Object);
extern Object run_one_scheduler_cycle(void);
extern Object run_scheduler_for_current_system(void);
extern Object scheduler_enabled_p(void);
extern Object send_initial_icp_version_info(Object,Object);
extern Object shutdown_icp_socket_connection(int,...);
extern Object shutdown_or_exit(int,...);
extern Object text_string_p(Object);
extern Object tformat_text_string(int,...);
extern Object transmit_icp_output_if_ready(Object,Object);
extern Object write_warning_message_string(Object,Object);

#else

extern Object assq_function();
extern Object c_network_get_last_error_string();
extern Object call_or_schedule_handle_queued_icp_messages();
extern Object cancel_and_reclaim_scheduled_queue_element_1();
extern Object clear_close_event();
extern Object clear_read_event();
extern Object clear_write_event();
extern Object close_and_disconnect_icp_socket_handle();
extern Object constant_queue_push_right();
extern Object continue_reading_from_icp_socket();
extern Object copy_constant_wide_string_given_length();
extern Object copy_foreign_string_arg_if_appropriate();
extern Object copy_icp_buffer();
extern Object copy_partial_text_string();
extern Object delete_all_representations_for_icp_socket();
extern Object delete_icp_element_1();
extern Object direct_structure_method();
extern Object enqueue_close_event();
extern Object enqueue_next_icp_buffer_if_any();
extern Object enqueue_read_event();
extern Object enqueue_scheduler_events_if_necessary();
extern Object enqueue_write_event();
extern Object execute_icp_accept_callbacks();
extern Object execute_icp_connect_callbacks();
extern Object execute_icp_connection_loss_callbacks();
extern Object execute_icp_read_callbacks();
extern Object finalize_and_reclaim_icp_socket();
extern Object flush_icp_output_ports();
extern Object g2_event_cycle_handling_windows_quit();
extern Object g2_event_ready_p();
extern Object get_accept_pathname();
extern Object get_pending_network_events();
extern Object getfq_function_no_default();
extern Object gsi_event_cycle_handling_windows_quit();
extern Object handle_close_event();
extern Object handle_display_event();
extern Object handle_event_internal();
extern Object handle_g2_reset_function();
extern Object handle_icp_close();
extern Object handle_icp_connect();
extern Object handle_icp_write();
extern Object handle_localnet_close();
extern Object handle_localnet_read();
extern Object handle_localnet_write();
extern Object handle_network_accept_function();
extern Object handle_network_close_function();
extern Object handle_network_connect_function();
extern Object handle_network_read();
extern Object handle_network_write();
extern Object handle_read_event_function();
extern Object handle_write_event_function();
extern Object icp_cons_1();
extern Object icp_error_on_socket();
extern Object icp_socket_description();
extern Object icp_socket_notifies_user_on_error_p();
extern Object lookup_socket_from_handle();
extern Object make_and_install_network_icp_socket();
extern Object make_error_code_1();
extern Object make_icp_buffer_internal_1();
extern Object make_permanent_schedule_task_structure_internal();
extern Object make_variable_fill_icp_buffer();
extern Object maybe_schedule_service_workstation();
extern Object memq_function();
extern Object network_get_last_error_string();
extern Object notify_sockets_of_g2_reset();
extern Object notify_user();
extern Object obtain_simple_gensym_string();
extern Object poll_native_window_workstation();
extern Object reclaim_gensym_string();
extern Object reclaim_icp_socket();
extern Object reclaim_icp_sockets();
extern Object reclaim_schedule_task_args();
extern Object reclaim_text_string();
extern Object record_direct_structure_method();
extern Object register_socket_to_handle();
extern Object run_one_scheduler_cycle();
extern Object run_scheduler_for_current_system();
extern Object scheduler_enabled_p();
extern Object send_initial_icp_version_info();
extern Object shutdown_icp_socket_connection();
extern Object shutdown_or_exit();
extern Object text_string_p();
extern Object tformat_text_string();
extern Object transmit_icp_output_if_ready();
extern Object write_warning_message_string();

#endif

/* variables/constants */
extern Object Accept_event;
DECLARE_VARIABLE_WITH_SYMBOL(Active_icp_sockets, Qactive_icp_sockets);
extern Object Available_icp_conses_tail_vector;
extern Object Available_icp_conses_vector;
extern Object Chain_of_available_schedule_tasks_vector;
extern Object Close_event;
extern Object Connect_event;
DECLARE_VARIABLE_WITH_SYMBOL(Current_g2_time, Qcurrent_g2_time);
DECLARE_VARIABLE_WITH_SYMBOL(Current_real_time, Qcurrent_real_time);
DECLARE_VARIABLE_WITH_SYMBOL(Current_schedule_task, Qcurrent_schedule_task);
extern Object Current_task_queue_vector;
DECLARE_VARIABLE_WITH_SYMBOL(Current_thread_index, Qcurrent_thread_index);
DECLARE_VARIABLE_WITH_SYMBOL(Default_accept_timeout, Qdefault_accept_timeout);
extern Object Deferred_task_queue_vector;
extern Object Display_event;
DECLARE_VARIABLE_WITH_SYMBOL(During_ffi_call_qm, Qduring_ffi_call_qm);
extern Object Error_event;
extern Object Error_severity_fatal;
extern Object Error_severity_success;
extern Object Error_severity_warning;
extern Object Fixnum_time_units_per_second;
DECLARE_VARIABLE_WITH_SYMBOL(Handle_to_socket_mapping, Qhandle_to_socket_mapping);
extern Object Icp_accept_event_error;
extern Object Icp_accept_failure;
extern Object Icp_accept_on_invalid_socket;
extern Object Icp_close_event_error;
extern Object Icp_connect_event_error;
extern Object Icp_connect_on_invalid_socket;
extern Object Icp_connection_awaiting_acknowledgement;
extern Object Icp_connection_closed;
extern Object Icp_connection_closed_error;
extern Object Icp_connection_connect_in_progress;
extern Object Icp_connection_reset;
extern Object Icp_connection_running;
extern Object Icp_error_obtaining_error_string;
extern Object Icp_error_table;
DECLARE_VARIABLE_WITH_SYMBOL(Icp_output_ports_to_flush, Qicp_output_ports_to_flush);
extern Object Icp_read_call_returned_error;
extern Object Icp_read_event_error;
extern Object Icp_received_data_on_invalid_socket;
extern Object Icp_shutdown_aborted;
DECLARE_VARIABLE_WITH_SYMBOL(Icp_socket_for_handle_icp_messages, Qicp_socket_for_handle_icp_messages);
extern Object Icp_socket_listening;
DECLARE_VARIABLE_WITH_SYMBOL(Icp_sockets_to_be_reclaimed, Qicp_sockets_to_be_reclaimed);
DECLARE_VARIABLE_WITH_SYMBOL(Icp_sockets_waiting_for_icp_message_processing, Qicp_sockets_waiting_for_icp_message_processing);
extern Object Icp_success;
extern Object Icp_write_call_returned_error;
extern Object Icp_write_event_error;
extern Object Icp_wrote_data_on_invalid_socket;
DECLARE_VARIABLE_WITH_SYMBOL(Inhibit_icp_socket_reclamation, Qinhibit_icp_socket_reclamation);
DECLARE_VARIABLE_WITH_SYMBOL(Inside_handle_event, Qinside_handle_event);
extern Object Internal_events_handling_trigger;
DECLARE_VARIABLE_WITH_SYMBOL(Last_event_socket_handle, Qlast_event_socket_handle);
DECLARE_VARIABLE_WITH_SYMBOL(Last_event_socket_handle_holder, Qlast_event_socket_handle_holder);
DECLARE_VARIABLE_WITH_SYMBOL(Last_event_status_code, Qlast_event_status_code);
DECLARE_VARIABLE_WITH_SYMBOL(Last_event_status_code_0, Qlast_event_status_code_0);
DECLARE_VARIABLE_WITH_SYMBOL(Last_event_status_code_1, Qlast_event_status_code_1);
DECLARE_VARIABLE_WITH_SYMBOL(Last_event_status_code_holder, Qlast_event_status_code_holder);
#define Ne_blocked_value FIX((SI_Long)0L)
#define Ne_eof_value FIX((SI_Long)-1L)
#define Ne_error_value FIX((SI_Long)-2L)
DECLARE_VARIABLE_WITH_SYMBOL(Network_octet_buffer_length, Qnetwork_octet_buffer_length);
extern Object Network_status_success;
extern Object No_event;
DECLARE_VARIABLE_WITH_SYMBOL(Priority_of_next_task, Qpriority_of_next_task);
DECLARE_VARIABLE_WITH_SYMBOL(Profiling_enabled_qm, Qprofiling_enabled_qm);
extern Object Quit_event;
extern Object Read_and_block_event;
extern Object Read_event;
DECLARE_VARIABLE_WITH_SYMBOL(Scheduler_enabled_qm, Qscheduler_enabled_qm);
extern Object Scheduler_event;
DECLARE_VARIABLE_WITH_SYMBOL(Structure_being_reclaimed, Qstructure_being_reclaimed);
DECLARE_VARIABLE_WITH_SYMBOL(System_is_running, Qsystem_is_running);
extern Object Watch_event;
DECLARE_VARIABLE_WITH_SYMBOL(With_icp_buffer_coelescing_scope_qm, Qwith_icp_buffer_coelescing_scope_qm);
extern Object Write_event;
