/*
 *   Copyright (C) 1986-2017 Gensym Corporation. All Rights Reserved.
 *
 * 	 G2BeanBuilder.java
 *    around 50% (1500 lines) of this code was generated by Symantecs Visual Cafe
 *    and deals with the creation of the GUI
 *
 *   Modifications:
 *
 */

/* To Do

   (1)
   need to check the characters being typed into the G2Host text
   field to allow only a-z A-Z - _ 0-9 .


*/

package com.gensym.beanbuilder;


/* Imports */
import java.io.File;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.awt.*;
import java.util.Vector;


import com.gensym.util.BeanImageBuffer;
import com.gensym.util.*;
import com.gensym.jgi.download.DownloadInterfaces;
import com.gensym.message.*;
import com.gensym.jgi.*;
import com.gensym.jgi.download.StubClassLoader;
import com.gensym.jartools.JarFile;
import java.util.Locale;
import com.gensym.message.Resource;

/*
 * @author J.D.Postoyko
 * Modifications by several others.
 */


/**
 *   JDP March 1998 - modified to allow fonts to be changed for solaris
 *   JDP April 1998 - added resource file support for text/labels
 *
 */

public class G2BeanBuilder extends Frame
{
  static volatile String         _productID              = " G2 Bean Builder ";
  static volatile String         version                 = "";
  static volatile String         _nbOfSteps              ="";
  static volatile String         _summaryText            ="";
  static volatile String         _doingDownload          ="";
  static volatile String         _hostName               ="";
  static volatile String         _hostPort               ="";
  static volatile String         _g2Class                ="";
  static volatile String         _jarDir                 ="";
  static volatile String         _iconText               ="";
  static volatile String         _noHostAddress          ="";
  static volatile String         _noHostPort             ="";
  static volatile String         _noClassName            ="";
  static volatile String         _cancelSession          ="";
  static volatile String         _exitSystem             ="";
  static volatile String         _connectionFailed       ="";
  static volatile String         _connectionMade         ="";
  static volatile String         _buildingBean           ="";
  static volatile String         _downLoadingData        ="";
  static volatile String         _generateStubs          ="";
  static volatile String         _makingJar              ="";
  static volatile String         _makingActiveX          ="";
  static volatile String         _connectingToG2         ="";
  static volatile String         _buildComplete          ="";
  static volatile String         _error                  ="";
  static volatile String         _failed                 ="";
  static volatile String         _save                   ="";
  static volatile String         _open                   ="";
  static volatile String         _yes                   ="";
  static volatile String         _no                   ="";
  static volatile String         _okay                   ="";
  static volatile String         _jarFileNamePrompt      ="";
  static volatile String         _jarFileName            =null;
  static volatile String         _jarDirName             =null;
  static String                  _dlisummaryPromptLabel  ="";
  static volatile String         dlimainLabel            ="";
  static volatile String         dliwelcomePromptLabel   ="";
  static volatile String         dlisummaryPromptLabel   ="";
  static volatile String         dlibuildTitleLabel      ="";
  static volatile String         lastSaveDir             =null;
  static volatile String         lastGifDir              =null;

  static G2BeanBuilder bb;
  static IconViewer iconViewer = null;

  static G2Connection            g2_connection           = null;
  static volatile TextArea       status                  = null;

  static boolean        activeXsupported        = RunActiveXBeanPackager.isActiveXBeanPackagerAvailable();
  static boolean        _isDownloader           = false;
  static boolean        autoAdvanceAfterBuild   = true;
  static boolean        doConnection            = true;
  static boolean        guiUsesColor            = true;
  static boolean        guiAutoFocus            = true;
  static boolean        traceOn                 = true;
  static boolean        guiForced               = false;
  static boolean        useG2Icon               = true;

  static String         CR                      = "\n";

  private static volatile String userRepository;
  private static volatile String imageDir;
  private static final String fileSeparator = System.getProperty ("file.separator");
  private static volatile String rootClass               ="";
  private static volatile String fullClassName           ="";
  private static Class  generatedClass;

  private static Resource i18nLabels =
     Resource.getBundle("com.gensym.beanbuilder.text.BeanBuilder", Locale.getDefault() );

  private static Resource i18nSettings =
      Resource.getBundle("com.gensym.beanbuilder.text.Settings", Locale.getDefault() );

//

  /**
   * @undocumented. For backward compatibility.
   */
  public G2BeanBuilder() {
    this(new String[] {});
  }
  /**
   *  Class G2BeanBuilder
   *
   *  This class provides the GUI and functionality for the G2BeanBuilder
   *
   * Sections of this code are automatically generated  by Visual Cafe
   *
   */

  public G2BeanBuilder(String[] args)
    {
      // This code is automatically generated by Visual Cafe when you add
      // components to the visual environment. It instantiates and initializes
      // the components. To modify the code, only use code syntax that matches
      // what Visual Cafe can generate, or Visual Cafe may be unable to back
      // parse your Java file into its visual environment.


      //THIS SECTION OF CODE TO BE IMPLEMENTED
      // Open Gensym Application properties
      com.gensym.core.GensymApplication.initialize(args);

      String userPackage= StubClassLoader.getUserPackage();
      userPackage       = G2ClassTranslator.dotPackageFromSlashPackage (userPackage);      
      String packageDir = System.getProperty ("com.gensym.beanbuilder.package");
      
      synchronized (G2BeanBuilder.class) {
        // development time properties must be set
        userRepository = StubClassLoader.getUserRepository();
        imageDir = System.getProperty("com.gensym.beanbuilder.images");
        
        if(packageDir == null){
          packageDir = unifyString( userRepository );
        }
      }

      com.gensym.core.Product bbprod = com.gensym.core.ProductManager.getProduct("beanbuilder");
      version = bbprod.getVersionObject().shortVersion();

//********************************************************************************
//******************* Start of automatically generated code **********************
//********************************************************************************

      //{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(insets().left + insets().right + 792,insets().top + insets().bottom + 570);
		setFont(new Font("Dialog", Font.BOLD, 14));
		setBackground(java.awt.Color.lightGray);
		setCursor(new Cursor(Cursor.WAIT_CURSOR));
		saveFileDialog1 = new java.awt.FileDialog(this);
		saveFileDialog1.setMode(FileDialog.SAVE);
		saveFileDialog1.setTitle("Save");
		//$$ saveFileDialog1.move(0,0);
		openFileDialog1 = new java.awt.FileDialog(this);
		openFileDialog1.setMode(FileDialog.LOAD);
		openFileDialog1.setTitle("Open");
		//$$ openFileDialog1.move(0,0);
		topLevelPanel = new java.awt.Panel();
		topLevelPanel.setLayout(null);
		topLevelPanel.setBounds(insets().left + 173,insets().top + 132,607,435);
		add(topLevelPanel);
		exitButton = new java.awt.Button();
		exitButton.setActionCommand("button");
		exitButton.setLabel("Exit");
		exitButton.setBounds(454,343,60,25);
		exitButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		topLevelPanel.add(exitButton);
		restartButton = new java.awt.Button();
		restartButton.setActionCommand("button");
		restartButton.setLabel("Restart");
		restartButton.setBounds(391,343,60,25);
		restartButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		topLevelPanel.add(restartButton);
/*
		helpButton = new java.awt.Button();
		helpButton.setActionCommand("button");
		helpButton.setLabel("Help");
		helpButton.setBounds(517,343,60,25);
		helpButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		helpButton.setForeground(java.awt.Color.black);
		helpButton.setEnabled(false);
		topLevelPanel.add(helpButton);
*/
		mainPanel = new java.awt.Panel();
		mainPanel.setLayout(new CardLayout(0,0));
		mainPanel.setBounds(5,5,598,330);
		topLevelPanel.add(mainPanel);
		welcomepanel = new java.awt.Panel();
		welcomepanel.setLayout(null);
		welcomepanel.setBounds(0,0,598,330);
		mainPanel.add("card1", welcomepanel);
		imageDisplay10 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay10.setFileName("javawelcome.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay10.setBounds(0,96,228,204);
		welcomepanel.add(imageDisplay10);
		mainLabel = new java.awt.Label("Welcome to G2 Bean Builder",Label.CENTER);
		mainLabel.setBounds(5,5,580,40);
		mainLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		welcomepanel.add(mainLabel);
		aboutButton = new java.awt.Button();
		aboutButton.setActionCommand("button");
		aboutButton.setLabel("About ...");
		aboutButton.setBounds(470,142,70,25);
		aboutButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		welcomepanel.add(aboutButton);
		welcomePromptLabel = new java.awt.Label("This tool allows you to build a Java Bean for a given G2 class",Label.CENTER);
		welcomePromptLabel.setBounds(5,49,580,30);
		welcomePromptLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		welcomepanel.add(welcomePromptLabel);
		settingsButton = new java.awt.Button();
		settingsButton.setActionCommand("button");
		settingsButton.setLabel("Settings...");
		settingsButton.setBounds(470,179,70,25);
		settingsButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		welcomepanel.add(settingsButton);
		ipPanel = new java.awt.Panel();
		ipPanel.setLayout(null);
		ipPanel.setVisible(false);
		ipPanel.setBounds(0,0,598,330);
		mainPanel.add("card3", ipPanel);
		imageDisplay1 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay1.setFileName("compys.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay1.setBounds(0,100,169,136);
		ipPanel.add(imageDisplay1);
		hostNameTextField = new java.awt.TextField();
		hostNameTextField.setText("localhost");
		hostNameTextField.setBounds(279,159,174,35);
		hostNameTextField.setFont(new Font("Dialog", Font.BOLD, 14));
		ipPanel.add(hostNameTextField);
		G2HostLabel = new java.awt.Label("Host :",Label.RIGHT);
		G2HostLabel.setBounds(184,159,82,35);
		G2HostLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		ipPanel.add(G2HostLabel);
		connectionStepLabel = new java.awt.Label("Step 1 of ",Label.CENTER);
		connectionStepLabel.setBounds(5,55,580,35);
		connectionStepLabel.setFont(new Font("Dialog", Font.PLAIN, 18));
		connectionStepLabel.setForeground(java.awt.Color.blue);
		ipPanel.add(connectionStepLabel);
		hostPortTextField = new java.awt.TextField();
		hostPortTextField.setText("1111");
		hostPortTextField.setBounds(279,259,60,35);
		hostPortTextField.setFont(new Font("Dialog", Font.BOLD, 14));
		ipPanel.add(hostPortTextField);
		G2PortLabel = new java.awt.Label("Port:",Label.RIGHT);
		G2PortLabel.setBounds(170,259,96,35);
		G2PortLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		ipPanel.add(G2PortLabel);
		connectionTitleLabel = new java.awt.Label("G2 Connection Details",Label.CENTER);
		connectionTitleLabel.setBounds(5,5,580,40);
		connectionTitleLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		ipPanel.add(connectionTitleLabel);
		connectionAddressLabel = new java.awt.Label("Address of the host machine");
		connectionAddressLabel.setBounds(179,113,373,35);
		connectionAddressLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		ipPanel.add(connectionAddressLabel);
		connectionPortLabel = new java.awt.Label("The port # G2 is running on.");
		connectionPortLabel.setBounds(179,213,320,35);
		connectionPortLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		ipPanel.add(connectionPortLabel);
		classPanel = new java.awt.Panel();
		classPanel.setLayout(null);
		classPanel.setVisible(false);
		classPanel.setBounds(0,0,598,330);
		mainPanel.add("card4", classPanel);
		g2ClassTitleLabel = new java.awt.Label("G2 Class Name",Label.CENTER);
		g2ClassTitleLabel.setBounds(5,5,580,27);
		g2ClassTitleLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		classPanel.add(g2ClassTitleLabel);
		classStepLabel = new java.awt.Label("Step 2 of ",Label.CENTER);
		classStepLabel.setBounds(5,55,580,35);
		classStepLabel.setFont(new Font("Dialog", Font.PLAIN, 18));
		classStepLabel.setForeground(java.awt.Color.blue);
		classPanel.add(classStepLabel);
		g2ClassPromptLabel = new java.awt.Label("Please give the name of the source G2 class");
		g2ClassPromptLabel.setBounds(168,125,399,35);
		classPanel.add(g2ClassPromptLabel);
		g2ClassTextField = new java.awt.TextField();
		g2ClassTextField.setBounds(248,178,321,35);
		classPanel.add(g2ClassTextField);
		classClassLabel = new java.awt.Label("Class :",Label.RIGHT);
		classClassLabel.setBounds(167,178,77,35);
		classPanel.add(classClassLabel);
		imageDisplay8 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay8.setFileName("g2class2.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay8.setBounds(0,100,163,122);
		classPanel.add(imageDisplay8);
		doDownload = new java.awt.Checkbox("force download");
		doDownload.setBounds(252,236,153,35);
		classPanel.add(doDownload);
		doDownload.setState(true);
		generateStubs = new java.awt.Checkbox("generate stubs");
		generateStubs.setBounds(252,268,153,35);
		classPanel.add(generateStubs);
		generateStubs.setState(true);
		iconPanel = new java.awt.Panel();
		iconPanel.setLayout(null);
		iconPanel.setVisible(false);
		iconPanel.setBounds(0,0,598,330);
		mainPanel.add("card6", iconPanel);
		imageDisplay2 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay2.setFileName("icons2.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay2.setBounds(0,100,162,122);
		iconPanel.add(imageDisplay2);
		iconsTitleLabel = new java.awt.Label("Iconic Representation",Label.CENTER);
		iconsTitleLabel.setBounds(5,5,580,40);
		iconsTitleLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		iconPanel.add(iconsTitleLabel);
		iconsStepLabel = new java.awt.Label("Step 3 of ",Label.CENTER);
		iconsStepLabel.setBounds(5,55,580,35);
		iconsStepLabel.setFont(new Font("Dialog", Font.PLAIN, 18));
		iconsStepLabel.setForeground(java.awt.Color.blue);
		iconPanel.add(iconsStepLabel);
		iconsPromptLabel = new java.awt.Label("Here you may specify the beans icon");
		iconsPromptLabel.setBounds(172,101,405,35);
		iconsPromptLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		iconPanel.add(iconsPromptLabel);
		icon32FileTextField = new java.awt.TextField();
		icon32FileTextField.setBounds(179,179,381,35);
		iconPanel.add(icon32FileTextField);
		set32IconFileButton = new java.awt.Button();
		set32IconFileButton.setActionCommand("button");
		set32IconFileButton.setLabel("...");
		set32IconFileButton.setBounds(562,199,20,15);
		set32IconFileButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		iconPanel.add(set32IconFileButton);
		iconsSizeLabel32 = new java.awt.Label("File name:");
		iconsSizeLabel32.setBounds(170,142,388,35);
		iconsSizeLabel32.setFont(new Font("Dialog", Font.BOLD, 14));
		iconPanel.add(iconsSizeLabel32);
		useG2IconCB = new java.awt.Checkbox("Use G2 Icon for bean");
		useG2IconCB.setBounds(179,228,357,30);
		iconPanel.add(useG2IconCB);
		jarPanel = new java.awt.Panel();
		jarPanel.setLayout(null);
		jarPanel.setVisible(false);
		jarPanel.setBounds(0,0,598,330);
		mainPanel.add("card5", jarPanel);
		fileLocationTitleLabel = new java.awt.Label("Bean Build Information",Label.CENTER);
		fileLocationTitleLabel.setBounds(5,5,580,40);
		fileLocationTitleLabel.setFont(new Font("Dialog", Font.BOLD, 22));
		jarPanel.add(fileLocationTitleLabel);
		jarStepLabel = new java.awt.Label("Step 4 of ",Label.CENTER);
		jarStepLabel.setBounds(5,55,580,35);
		jarStepLabel.setFont(new Font("Dialog", Font.PLAIN, 18));
		jarStepLabel.setForeground(java.awt.Color.blue);
		jarPanel.add(jarStepLabel);
		beanBuildDirTextField = new java.awt.TextField();
		beanBuildDirTextField.setBounds(194,164,377,35);
		beanBuildDirTextField.setFont(new Font("Dialog", Font.BOLD, 14));
		jarPanel.add(beanBuildDirTextField);
		beanBuildDirLabel = new java.awt.Label("Dir:",Label.RIGHT);
		beanBuildDirLabel.setBounds(162,166,31,35);
		beanBuildDirLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		jarPanel.add(beanBuildDirLabel);
		creationDirPromptLabel = new java.awt.Label("Here you can change the name of the Beans Jar file",Label.CENTER);
		creationDirPromptLabel.setBounds(166,117,425,35);
		jarPanel.add(creationDirPromptLabel);
		browseButton1 = new java.awt.Button();
		browseButton1.setActionCommand("button");
		browseButton1.setLabel("...");
		browseButton1.setBounds(574,184,20,15);
		browseButton1.setFont(new Font("Dialog", Font.PLAIN, 10));
		jarPanel.add(browseButton1);
		imageDisplay3 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay3.setFileName("ajar1.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay3.setBounds(0,100,161,122);
		jarPanel.add(imageDisplay3);
		activeXPanel = new java.awt.Panel();
		activeXPanel.setLayout(null);
		activeXPanel.setVisible(false);
		activeXPanel.setBounds(0,0,598,330);
		mainPanel.add("card7", activeXPanel);
		imageDisplay5 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay5.setFileName("actvex.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay5.setBounds(0,100,166,121);
		activeXPanel.add(imageDisplay5);
		activeXTitleLabel = new java.awt.Label("Active X Generation",Label.CENTER);
		activeXTitleLabel.setBounds(5,5,580,40);
		activeXTitleLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		activeXPanel.add(activeXTitleLabel);
		activeXStepLabel = new java.awt.Label("Step 5 (optional)",Label.CENTER);
		activeXStepLabel.setBounds(5,55,580,35);
		activeXStepLabel.setFont(new Font("Dialog", Font.PLAIN, 18));
		activeXStepLabel.setForeground(java.awt.Color.blue);
		activeXPanel.add(activeXStepLabel);
		unregBeforeCreation = new java.awt.Checkbox("Unreg existing class");
		unregBeforeCreation.setBounds(200,154,316,43);
		unregBeforeCreation.setFont(new Font("Dialog", Font.BOLD, 14));
		activeXPanel.add(unregBeforeCreation);
		unregBeforeCreation.setEnabled(false);
		doActiveXBuild = new java.awt.Checkbox("Create ActiveX component fom the bean ?");
		doActiveXBuild.setBounds(181,109,316,43);
		doActiveXBuild.setFont(new Font("Dialog", Font.BOLD, 14));
		activeXPanel.add(doActiveXBuild);
		summaryPanel = new java.awt.Panel();
		summaryPanel.setLayout(null);
		summaryPanel.setVisible(false);
		summaryPanel.setBounds(0,0,598,330);
		mainPanel.add("card9", summaryPanel);
		imageDisplay7 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay7.setFileName("bean.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay7.setBounds(0,100,162,122);
		summaryPanel.add(imageDisplay7);
		summaryTitleLabel = new java.awt.Label("Summary",Label.CENTER);
		summaryTitleLabel.setBounds(5,5,580,40);
		summaryTitleLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		summaryPanel.add(summaryTitleLabel);
		summaryTopLabel = new java.awt.Label("Current settings :",Label.CENTER);
		summaryTopLabel.setBounds(5,40,580,30);
		summaryTopLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		summaryPanel.add(summaryTopLabel);
		summaryTextArea = new java.awt.TextArea(20,0);
		summaryTextArea.setEditable(false);
		summaryTextArea.setBounds(169,77,416,196);
		summaryTextArea.setFont(new Font("Dialog", Font.PLAIN, 12));
		summaryPanel.add(summaryTextArea);
		summaryPromptLabel = new java.awt.Label("Press Back to ammend these details or Next to build the bean",Label.CENTER);
		summaryPromptLabel.setBounds(5,290,580,30);
		summaryPromptLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		summaryPanel.add(summaryPromptLabel);
		progressPanel = new java.awt.Panel();
		progressPanel.setLayout(null);
		progressPanel.setVisible(false);
		progressPanel.setBounds(0,0,598,330);
		mainPanel.add("card11", progressPanel);
		iconPreview = new com.gensym.beanbuilder.ImageDisplay();
		try {
			iconPreview.setFileName("i32.gif");
		}
		catch(java.beans.PropertyVetoException e) { }
		iconPreview.setBounds(475,148,33,33);
		iconPreview.setBackground(java.awt.Color.blue);
		progressPanel.add(iconPreview);
		buildingActiveXcontrolLabel = new java.awt.Label("Building Active X control",Label.RIGHT);
		buildingActiveXcontrolLabel.setBounds(244,218,185,25);
		buildingActiveXcontrolLabel.setForeground(java.awt.Color.blue);
		progressPanel.add(buildingActiveXcontrolLabel);
		buildingJarLabel = new java.awt.Label("Jar File Creation",Label.RIGHT);
		buildingJarLabel.setBounds(244,184,185,25);
		buildingJarLabel.setForeground(java.awt.Color.blue);
		progressPanel.add(buildingJarLabel);
		buildingBeanLabel = new java.awt.Label("Building bean",Label.RIGHT);
		buildingBeanLabel.setBounds(244,150,185,25);
		buildingBeanLabel.setForeground(java.awt.Color.blue);
		progressPanel.add(buildingBeanLabel);
		downloadingClassDataLabel = new java.awt.Label("Downloading Class data",Label.RIGHT);
		downloadingClassDataLabel.setBounds(244,116,185,25);
		downloadingClassDataLabel.setForeground(java.awt.Color.blue);
		progressPanel.add(downloadingClassDataLabel);
		connectingToG2Label = new java.awt.Label("Connecting to G2",Label.RIGHT);
		connectingToG2Label.setBounds(244,82,185,25);
		connectingToG2Label.setForeground(java.awt.Color.blue);
		progressPanel.add(connectingToG2Label);
		buildTitleLabel = new java.awt.Label("Progress of Bean Building",Label.CENTER);
		buildTitleLabel.setBounds(105,5,480,40);
		buildTitleLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		progressPanel.add(buildTitleLabel);
		downloadClassResult = new java.awt.Checkbox("");
		downloadClassResult.setBounds(447,124,20,17);
		downloadClassResult.setFont(new Font("Dialog", Font.BOLD|Font.ITALIC, 14));
		downloadClassResult.setForeground(java.awt.Color.black);
		progressPanel.add(downloadClassResult);
		downloadClassResult.setEnabled(false);
		connectionResult = new java.awt.Checkbox("");
		connectionResult.setBounds(447,90,20,17);
		connectionResult.setFont(new Font("Dialog", Font.BOLD|Font.ITALIC, 14));
		connectionResult.setForeground(java.awt.Color.black);
		progressPanel.add(connectionResult);
		connectionResult.setEnabled(false);
		beanBuildResult = new java.awt.Checkbox("");
		beanBuildResult.setBounds(447,158,20,17);
		beanBuildResult.setFont(new Font("Dialog", Font.BOLD|Font.ITALIC, 14));
		beanBuildResult.setForeground(java.awt.Color.black);
		progressPanel.add(beanBuildResult);
		beanBuildResult.setEnabled(false);
		jarFileResult = new java.awt.Checkbox("");
		jarFileResult.setBounds(447,192,20,17);
		jarFileResult.setFont(new Font("Dialog", Font.BOLD|Font.ITALIC, 14));
		jarFileResult.setForeground(java.awt.Color.black);
		progressPanel.add(jarFileResult);
		jarFileResult.setEnabled(false);
		activeXResult = new java.awt.Checkbox("");
		activeXResult.setBounds(447,226,20,17);
		activeXResult.setFont(new Font("Dialog", Font.BOLD|Font.ITALIC, 14));
		activeXResult.setForeground(java.awt.Color.black);
		progressPanel.add(activeXResult);
		activeXResult.setEnabled(false);
		imageDisplay4 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay4.setFileName("motor3.gif");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay4.setBounds(0,100,161,120);
		imageDisplay4.setBackground(java.awt.Color.blue);
		progressPanel.add(imageDisplay4);
		downloadingImageDisplay = new com.gensym.beanbuilder.ImageDisplay();
		try {
			downloadingImageDisplay.setFileName("arrow.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		downloadingImageDisplay.setVisible(false);
		downloadingImageDisplay.setBounds(224,121,17,20);
		progressPanel.add(downloadingImageDisplay);
		buildingImageDisplay = new com.gensym.beanbuilder.ImageDisplay();
		try {
			buildingImageDisplay.setFileName("arrow.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		buildingImageDisplay.setVisible(false);
		buildingImageDisplay.setBounds(224,155,17,20);
		progressPanel.add(buildingImageDisplay);
		jarfileImageDisplay = new com.gensym.beanbuilder.ImageDisplay();
		try {
			jarfileImageDisplay.setFileName("arrow.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		jarfileImageDisplay.setVisible(false);
		jarfileImageDisplay.setBounds(224,189,17,20);
		progressPanel.add(jarfileImageDisplay);
		activeXImageDisplay = new com.gensym.beanbuilder.ImageDisplay();
		try {
			activeXImageDisplay.setFileName("arrow.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		activeXImageDisplay.setVisible(false);
		activeXImageDisplay.setBounds(224,223,17,20);
		progressPanel.add(activeXImageDisplay);
		connectingImageDisplay = new com.gensym.beanbuilder.ImageDisplay();
		try {
			connectingImageDisplay.setFileName("arrow.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		connectingImageDisplay.setVisible(false);
		connectingImageDisplay.setBounds(224,87,17,20);
		progressPanel.add(connectingImageDisplay);
		resultPanel = new java.awt.Panel();
		resultPanel.setLayout(null);
		resultPanel.setVisible(false);
		resultPanel.setBounds(0,0,598,330);
		mainPanel.add("card2", resultPanel);
		finishedTitleLabel = new java.awt.Label("Finished",Label.CENTER);
		finishedTitleLabel.setBounds(5,5,580,40);
		finishedTitleLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		resultPanel.add(finishedTitleLabel);
		resultOfCompilation = new java.awt.TextArea(10,0);
		resultOfCompilation.setEditable(false);
		resultOfCompilation.setText("-");
		resultOfCompilation.setBounds(188,87,400,180);
		resultPanel.add(resultOfCompilation);
		finishedPromptLabel = new java.awt.Label("Result of the build :",Label.CENTER);
		finishedPromptLabel.setBounds(5,50,580,30);
		finishedPromptLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		resultPanel.add(finishedPromptLabel);
		imageDisplay6 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay6.setFileName("done2.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay6.setBounds(0,100,160,120);
		resultPanel.add(imageDisplay6);
		settingsPanel = new java.awt.Panel();
		settingsPanel.setLayout(null);
		settingsPanel.setVisible(false);
		settingsPanel.setBounds(0,0,598,330);
		mainPanel.add("card12", settingsPanel);
		guiUsesColorCB = new java.awt.Checkbox("GUI uses color change on input focus");
		guiUsesColorCB.setBounds(230,97,350,35);
		settingsPanel.add(guiUsesColorCB);
		guiAutoFocusCB = new java.awt.Checkbox("GUI implements point for input focus");
		guiAutoFocusCB.setBounds(230,136,350,35);
		settingsPanel.add(guiAutoFocusCB);
		traceOnCB = new java.awt.Checkbox("TraceOn");
		traceOnCB.setBounds(230,175,350,35);
		settingsPanel.add(traceOnCB);
		imageDisplay13 = new com.gensym.beanbuilder.ImageDisplay();
		try {
			imageDisplay13.setFileName("settings1.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		imageDisplay13.setBounds(0,100,210,156);
		settingsPanel.add(imageDisplay13);
		settingsLabel = new java.awt.Label("Settings",Label.CENTER);
		settingsLabel.setBounds(5,5,580,40);
		settingsLabel.setFont(new Font("Dialog", Font.BOLD, 20));
		settingsPanel.add(settingsLabel);
		((CardLayout) mainPanel.getLayout()).show(mainPanel,"card1");
		backButton = new java.awt.Button();
		backButton.setActionCommand("button");
		backButton.setLabel("<  Back");
		backButton.setBounds(265,343,60,25);
		backButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		topLevelPanel.add(backButton);
		backButton.setEnabled(false);
		nextButton = new java.awt.Button();
		nextButton.setActionCommand("button");
		nextButton.setLabel("Next  >");
		nextButton.setBounds(328,343,60,25);
		nextButton.setFont(new Font("Dialog", Font.PLAIN, 12));
		topLevelPanel.add(nextButton);
		statusLine = new java.awt.TextArea("",40,80,TextArea.SCROLLBARS_VERTICAL_ONLY);
		statusLine.setEditable(false);
		statusLine.setBounds(8,373,595,59);
		statusLine.setFont(new Font("Dialog", Font.BOLD, 10));
		statusLine.setForeground(java.awt.Color.yellow);
		statusLine.setBackground(new Color(-16744320));
		topLevelPanel.add(statusLine);
		backdropImageDisplay = new com.gensym.beanbuilder.ImageDisplay();
		try {
			backdropImageDisplay.setFileName("backdrop.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }
		backdropImageDisplay.setBounds(insets().left + 1,insets().top + 1,790,570);
		backdropImageDisplay.setForeground(java.awt.Color.green);
		backdropImageDisplay.setBackground(java.awt.Color.gray);
		add(backdropImageDisplay);
		tempImageSpace = new com.gensym.beanbuilder.ImageDisplay();
		tempImageSpace.setBounds(insets().left + 1,insets().top + 1,200,200);
		add(tempImageSpace);
		imageDownloadPanel = new java.awt.Panel();
		imageDownloadPanel.setLayout(null);
		imageDownloadPanel.setBounds(insets().left + 795,insets().top + 37,200,200);
		imageDownloadPanel.setBackground(java.awt.Color.white);
		add(imageDownloadPanel);
		setTitle("G2 Bean Builder");
		//}}     = 0;

      //{{INIT_MENUS
		//}}

      //{{REGISTER_LISTENERS
      SymWindow aSymWindow = new SymWindow();
      this.addWindowListener(aSymWindow);
      SymAction lSymAction = new SymAction();
      //nextButton.addActionListener(lSymAction);

      SymButtonAction bSymAction = new SymButtonAction();

      nextButton.addActionListener(bSymAction);
      backButton.addActionListener(bSymAction);
      exitButton.addActionListener(bSymAction);
      restartButton.addActionListener(bSymAction);
      aboutButton.addActionListener(bSymAction);
      // helpButton.addActionListener(bSymAction);
      set32IconFileButton.addActionListener(bSymAction);
      settingsButton.addActionListener(bSymAction);
      browseButton1.addActionListener(bSymAction);

      SymMouse aSymMouse = new SymMouse();
      //nextButton.addMouseListener(aSymMouse);
      //backButton.addMouseListener(aSymMouse);

      //browseButton1.addMouseListener(aSymMouse);
//      doActiveXButton.addMouseListener(aSymMouse);
  //    noActiveXButton.addMouseListener(aSymMouse);
      //exitButton.addMouseListener(aSymMouse);
      //restartButton.addMouseListener(aSymMouse);
     // aboutButton.addMouseListener(aSymMouse);
      //helpButton.addMouseListener(aSymMouse);
      //set32IconFileButton.addMouseListener(aSymMouse);
      hostNameTextField.addActionListener(lSymAction);


      SymKey aSymKey = new SymKey();
      g2ClassTextField.addKeyListener(aSymKey);
      hostNameTextField.addKeyListener(aSymKey);
      hostPortTextField.addKeyListener(aSymKey);

      beanBuildDirTextField.addKeyListener(aSymKey);
      icon32FileTextField.addKeyListener(aSymKey);
      topLevelPanel.addKeyListener(aSymKey);
      hostNameTextField.addMouseListener(aSymMouse);
      hostPortTextField.addMouseListener(aSymMouse);
      nextButton.addKeyListener(aSymKey);
      g2ClassTextField.addMouseListener(aSymMouse);

      icon32FileTextField.addMouseListener(aSymMouse);
      beanBuildDirTextField.addMouseListener(aSymMouse);

      unregBeforeCreation.addMouseListener(aSymMouse);
      //helpButton.addKeyListener(aSymKey);
      aboutButton.addKeyListener(aSymKey);
      backButton.addKeyListener(aSymKey);
      set32IconFileButton.addKeyListener(aSymKey);
      browseButton1.addKeyListener(aSymKey);
//      doActiveXButton.addKeyListener(aSymKey);
//      noActiveXButton.addKeyListener(aSymKey);

      SymComponent aSymComponent = new SymComponent();

      jarPanel.addMouseListener(aSymMouse);
      iconPanel.addMouseListener(aSymMouse);

      SymContainer aSymContainer = new SymContainer();
      this.addContainerListener(aSymContainer);
      summaryPanel.addComponentListener(aSymComponent);
      jarPanel.addComponentListener(aSymComponent);
      settingsPanel.addComponentListener(aSymComponent);
      settingsButton.addMouseListener(aSymMouse);
      guiUsesColorCB.addMouseListener(aSymMouse);
      guiAutoFocusCB.addMouseListener(aSymMouse);

      traceOnCB.addMouseListener(aSymMouse);
      useG2IconCB.addMouseListener(aSymMouse);
      welcomepanel.addComponentListener(aSymComponent);
      ipPanel.addComponentListener(aSymComponent);

      classPanel.addComponentListener(aSymComponent);

		resultPanel.addComponentListener(aSymComponent);
		activeXPanel.addComponentListener(aSymComponent);
		doActiveXBuild.addMouseListener(aSymMouse);
		iconPanel.addComponentListener(aSymComponent);
		this.addComponentListener(aSymComponent);
      //}}

    internationalize(); // reads labels from disk
    setSettings(); // read setting from disk

    }


    //***************************************************************************
    // More GUI automated code
    //***************************************************************************


	@Override
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top
			+ insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.FileDialog saveFileDialog1;
	java.awt.FileDialog openFileDialog1;
	java.awt.Panel topLevelPanel;
	java.awt.Button exitButton;
	java.awt.Button restartButton;
        //java.awt.Button helpButton;
	java.awt.Panel mainPanel;
	java.awt.Panel welcomepanel;
	com.gensym.beanbuilder.ImageDisplay imageDisplay10;
	java.awt.Label mainLabel;
	java.awt.Button aboutButton;
	java.awt.Label welcomePromptLabel;
	java.awt.Button settingsButton;
	java.awt.Panel ipPanel;
	com.gensym.beanbuilder.ImageDisplay imageDisplay1;
	java.awt.TextField hostNameTextField;
	java.awt.Label G2HostLabel;
	java.awt.Label connectionStepLabel;
	java.awt.TextField hostPortTextField;
	java.awt.Label G2PortLabel;
	java.awt.Label connectionTitleLabel;
	java.awt.Label connectionAddressLabel;
	java.awt.Label connectionPortLabel;
	java.awt.Panel classPanel;
	java.awt.Label g2ClassTitleLabel;
	java.awt.Label classStepLabel;
	java.awt.Label g2ClassPromptLabel;
	java.awt.TextField g2ClassTextField;
	java.awt.Label classClassLabel;
	com.gensym.beanbuilder.ImageDisplay imageDisplay8;
	java.awt.Checkbox doDownload;
	java.awt.Checkbox generateStubs;
	java.awt.Panel iconPanel;
	com.gensym.beanbuilder.ImageDisplay imageDisplay2;
	java.awt.Label iconsTitleLabel;
	java.awt.Label iconsStepLabel;
	java.awt.Label iconsPromptLabel;
	java.awt.TextField icon32FileTextField;
	java.awt.Button set32IconFileButton;
	java.awt.Label iconsSizeLabel32;
	java.awt.Checkbox useG2IconCB;
	java.awt.Panel jarPanel;
	java.awt.Label fileLocationTitleLabel;
	java.awt.Label jarStepLabel;
	java.awt.TextField beanBuildDirTextField;
	java.awt.Label beanBuildDirLabel;
	java.awt.Label creationDirPromptLabel;
	java.awt.Button browseButton1;
	com.gensym.beanbuilder.ImageDisplay imageDisplay3;
	java.awt.Panel activeXPanel;
	com.gensym.beanbuilder.ImageDisplay imageDisplay5;
	java.awt.Label activeXTitleLabel;
	java.awt.Label activeXStepLabel;
	java.awt.Checkbox unregBeforeCreation;
	java.awt.Checkbox doActiveXBuild;
	java.awt.Panel summaryPanel;
	com.gensym.beanbuilder.ImageDisplay imageDisplay7;
	java.awt.Label summaryTitleLabel;
	java.awt.Label summaryTopLabel;
	java.awt.TextArea summaryTextArea;
	java.awt.Label summaryPromptLabel;
	java.awt.Panel progressPanel;
	com.gensym.beanbuilder.ImageDisplay iconPreview;
	java.awt.Label buildingActiveXcontrolLabel;
	java.awt.Label buildingJarLabel;
	java.awt.Label buildingBeanLabel;
	java.awt.Label downloadingClassDataLabel;
	java.awt.Label connectingToG2Label;
	java.awt.Label buildTitleLabel;
	java.awt.Checkbox downloadClassResult;
	java.awt.Checkbox connectionResult;
	java.awt.Checkbox beanBuildResult;
	java.awt.Checkbox jarFileResult;
	java.awt.Checkbox activeXResult;
	com.gensym.beanbuilder.ImageDisplay imageDisplay4;
	com.gensym.beanbuilder.ImageDisplay downloadingImageDisplay;
	com.gensym.beanbuilder.ImageDisplay buildingImageDisplay;
	com.gensym.beanbuilder.ImageDisplay jarfileImageDisplay;
	com.gensym.beanbuilder.ImageDisplay activeXImageDisplay;
	com.gensym.beanbuilder.ImageDisplay connectingImageDisplay;
	java.awt.Panel resultPanel;
	java.awt.Label finishedTitleLabel;
	java.awt.TextArea resultOfCompilation;
	java.awt.Label finishedPromptLabel;
	com.gensym.beanbuilder.ImageDisplay imageDisplay6;
	java.awt.Panel settingsPanel;
	java.awt.Checkbox guiUsesColorCB;
	java.awt.Checkbox guiAutoFocusCB;
	java.awt.Checkbox traceOnCB;
	com.gensym.beanbuilder.ImageDisplay imageDisplay13;
	java.awt.Label settingsLabel;
	java.awt.Button backButton;
	java.awt.Button nextButton;
	java.awt.TextArea statusLine;
	com.gensym.beanbuilder.ImageDisplay backdropImageDisplay;
	com.gensym.beanbuilder.ImageDisplay tempImageSpace;
	java.awt.Panel imageDownloadPanel;
	//}}

	//{{DECLARE_MENUS
	//}}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		@Override
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object.equals(G2BeanBuilder.this))
				Frame1_WindowClosing(event);
		}
	}

	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
//		hide();		 // hide the Frame
//		dispose();	  // free the system resources
		System.exit(0); // close the application
	}

	class SymAction implements java.awt.event.ActionListener
	{
		@Override
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			/*Object object = event.getSource();
			else if (object == nextButton)
				nextButton_Action(event);
			else if (object == hostNameTextField)
				hostNameTextField_EnterHit(event);
			else if (object == g2ClassTextField)
				g2ClassTextField_EnterHit(event);

				*/
		}
	}


    /**
     * Defines the behaviour of the mouse as it moves onto a GUI object
     * currently defined to change the foreground color of the object
     * and to shif input focus to that object
     * This behaviour is controled by guiUsesColor and guiAutoFocus
     * which can be switched of by command line arguments
     *
     *@param object the gui object the mouse has moved on to
     *@event the mouse event that was generated
     *
     *@seeguiBehaviourOnMouseExit
     */
    void guiBehaviourOnMouseEntry(Object object, java.awt.event.MouseEvent event){

	    // buttons simple change their color
	    if (object instanceof Button){
			    Button b =  (Button)event.getSource();
        	       if(guiUsesColor){
	    	            java.awt.Color c = (new java.awt.Color(0,0,50));
    	    	        b.setForeground(c);
    		       }

    		    // if configured the put imput focus here
        		   if( guiAutoFocus ){
	    		        b.requestFocus();
	    		   }
	    	}
	    	// if text field set imput foucus - saves having to click mouse
	    	//before typing -- something Ive always hated having to do !
	    	// same with the choice box
	    	else if  (object instanceof TextField || object instanceof Choice){
    	       Component c =  (Component)event.getSource();
    		   if( guiAutoFocus ){
			        c.requestFocus();
			   }
			}
	}

	/**
	 *see@guiBehaviourOnMouseEntry
	 */
    void guiBehaviourOnMouseExit(Object object, java.awt.event.MouseEvent event)
    {
        if (object instanceof Button)
        {
            Button b =  (Button)event.getSource();
            if(guiUsesColor)
            {
                java.awt.Color c = (new java.awt.Color(0,0,0));
                b.setForeground(c);
            }
        }
	}



	void nextButton_Action(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		((CardLayout)mainPanel.getLayout()).next(mainPanel);
	}




	class SymMouse extends java.awt.event.MouseAdapter
	{

		@Override
		public void mouseClicked(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();

		    if (object.equals(doActiveXBuild)){

    			unregBeforeCreation.setEnabled(!unregBeforeCreation.isEnabled());
    		}
    		else if (object.equals(useG2IconCB))
    		{

				useG2IconCB_MouseClick(event);
			}
				//doActiveXBuild_MouseClick(event);
/*		    else if (object == nextButton)
				nextButton_MouseClick(event);
			else if (object == backButton)
				backButton_MouseClick(event);
			else if (object == exitButton)
				exitButton_MouseClick(event);
			else if (object == restartButton)
				restartButton_MouseClick(event);
			else if (object == aboutButton)
				aboutButton_MouseClick(event);
			else if (object == helpButton)
				helpButton_MouseClick(event);
			else if (object == set32IconFileButton)
				set32IconFileButton_MouseClick(event);
			else if (object == browseButton1)
				browseButton1_MouseClick(event);
			else if (object == settingsButton)
				settingsButton_MouseClick(event);
			else if (object == useG2IconCB)
				useG2IconCB_MouseClick(event);
			else if (object == iconPanel)
				iconPanel_MouseClick(event);
*/
		}
	}




  void set32IconFileButton_actionPerformed(java.awt.event.ActionEvent event )
    {
      // set directory
      if (lastGifDir != null){
    	  openFileDialog1.setDirectory(lastGifDir);
      }

      synchronized (G2BeanBuilder.class) {
        openFileDialog1.setFile(imageDir + icon32FileTextField.getText());
      }
      openFileDialog1.setTitle(_iconText);
      openFileDialog1.show();

      lastGifDir  =openFileDialog1.getDirectory();

      String directory = lastGifDir;
      String filename = openFileDialog1.getFile();

      if ( !(directory == null)  && !(filename == null)){

        	icon32FileTextField.setText( directory + filename );

      }else
	    {
        informTheOperator(_error + _iconText+"\n");
	    }

        informTheOperator("Image Dir ="+extractFileDir(icon32FileTextField.getText())+
			CR+"Image File="+extractFileName(icon32FileTextField.getText())+CR);
    }




  class SymKey extends java.awt.event.KeyAdapter
  {
    @Override
    public void keyReleased(java.awt.event.KeyEvent event)
      {
	Object object = event.getSource();
	if (object.equals(g2ClassTextField))
	  g2ClassTextField_KeyRelease(event);
      }

    @Override
    public void keyPressed(java.awt.event.KeyEvent event)
      {
	Object object = event.getSource();
	if (object.equals(g2ClassTextField))
	  g2ClassTextField_KeyPress(event);
	else if (object.equals(hostNameTextField))
	  hostNameTextField_KeyPress(event);
	else if (object.equals(hostPortTextField))
	  hostPortTextField_KeyPress(event);
	else if (object.equals(beanBuildDirTextField))
	  jarDirTextField_KeyPress(event);
	else if (object.equals(icon32FileTextField))
	  iconFileTextField_KeyPress(event);
	else if (object.equals(nextButton))
	  nextButton_KeyPress(event);
	else if (object.equals(aboutButton))
	  aboutButton_KeyPress(event);
	else if (object.equals(backButton))
	  backButton_KeyPress(event);

	//	else if (object == helpButton)
	//  helpButton_KeyPress(event);
	else if (object.equals(set32IconFileButton))
	  set32IconFileButton_KeyPress(event);


      }
  }




  void g2ClassTextField_KeyPress(java.awt.event.KeyEvent event)
    {
      if ((g2ClassTextField.getText()).length() == 0)
	{
	  nextButton.setEnabled(false);
	}
      else
	{
	  nextButton.setEnabled(true);
	}


      if ( event.getKeyCode() == 32 ){
    	  event.consume();
      }
      if (event.getKeyCode() == 10 )
        {
	  g2ClassTextField.transferFocus();
        }
    }

  void hostNameTextField_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){
    	  hostNameTextField.transferFocus();
      }
    }

  void hostPortTextField_KeyPress(java.awt.event.KeyEvent event)
    { int keyCode = event.getKeyCode();
    //8  tab
    //9  backspace
    //37 cursor
    //39 cursor
    //10 CR
    //48 = 0
    //57 = 9


    if ( keyCode == 10 ){
    	hostPortTextField.transferFocus();
    }

    if ( keyCode < 48 ){

      if((keyCode !=8) && (keyCode != 9) &&(keyCode != 37)  &&
	 (keyCode != 39)) {
	event.consume();
      }


    }else if  (keyCode > 57 ){
      event.consume();
    }



    }

  void activeXRegID_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){
    	  hostPortTextField.transferFocus();
      }
    }

  void jarDirTextField_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){
    	  hostPortTextField.transferFocus();
      }
    }

  void iconFileTextField_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){
    	  hostPortTextField.transferFocus();
      }
    }



  void nextButton_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){
    	  nextButton_actionPerformed(null);
      }

    }


  void aboutButton_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){
    	  aboutButton_actionPerformed(null);
      }
    }

  void backButton_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){
    	  backButton_actionPerformed(null);
      }
    }

/*
  void cancelButton_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){cancelButton_actionPerformed(null);}
    }

  void helpButton_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){helpButton_actionPerformed(null);}
    }
  */


  void set32IconFileButton_KeyPress(java.awt.event.KeyEvent event)
    {
      if (event.getKeyCode() == 10 ){
    	  set32IconFileButton_actionPerformed(null);
      }
    }


  void browseButton1_actionPerformed(java.awt.event.ActionEvent event )
    {

      String packagename = userRepository+fileSeparator;
      String jarHome = beanBuildDirTextField.getText();

      jarHome = (jarHome == null ? "." : jarHome);

      saveFileDialog1.setTitle(_jarFileNamePrompt);

      if (lastSaveDir == null)
	    saveFileDialog1.setDirectory( packagename);
      else
    	saveFileDialog1.setDirectory( lastSaveDir);

      //saveFileDialog1.setFile("*.jar");
      saveFileDialog1.setFile(beanBuildDirTextField.getText());
      saveFileDialog1.show();

      if(( saveFileDialog1.getDirectory() != null)&&
	 (saveFileDialog1.getFile() != null))
	{
	  beanBuildDirTextField.setText(saveFileDialog1.getDirectory()+
					saveFileDialog1.getFile());

	  // remember jarFileName
	  _jarFileName = beanBuildDirTextField.getText();
	  lastSaveDir = saveFileDialog1.getDirectory();
	}

      _jarDirName = extractFileDir(beanBuildDirTextField.getText());


    }




  void g2ClassTextField_KeyRelease(java.awt.event.KeyEvent event)
    {
      if ((g2ClassTextField.getText()).length() == 0)
	{
	  nextButton.setEnabled(false);
	}
      else
	{
	  nextButton.setEnabled(true);
	}
    }

  class SymComponent extends java.awt.event.ComponentAdapter
  {
		@Override
		public void componentResized(java.awt.event.ComponentEvent event)
		{
			Object object = event.getSource();
			if (object.equals(G2BeanBuilder.this))
				G2BeanBuilder_ComponentResized(event);
		}

    @Override
    public void componentShown(java.awt.event.ComponentEvent event)
      {
		Object object = event.getSource();
		if (object.equals(summaryPanel))
		  summaryPanel_ComponentShown(event);
		else if (object.equals(jarPanel))
		  jarPanel_ComponentShown(event);
		else if (object.equals(settingsPanel))
		  settingsPanel_ComponentShown(event);
		else if (object.equals(welcomepanel))
		  welcomepanel_ComponentShown(event);
		else if (object.equals(resultPanel))
			resultPanel_ComponentShown(event);
		else if (object.equals(activeXPanel))
			activeXPanel_ComponentShown(event);
		else if (object.equals(classPanel))
			classPanel_ComponentShown(event);

      }

    @Override
    public void componentHidden(java.awt.event.ComponentEvent event)
      {
		Object object = event.getSource();
		if  (object.equals(jarPanel))
		  jarPanel_ComponentHidden(event);
		else if (object.equals(classPanel))
		  classPanel_ComponentHidden(event);
		else if (object.equals(iconPanel))
			iconPanel_ComponentHidden(event);
      }
  }






  class SymContainer extends java.awt.event.ContainerAdapter
  {
    @Override
    public void componentAdded(java.awt.event.ContainerEvent event)
      {
	Object object = event.getSource();

      }
  }


  void summaryPanel_ComponentShown(java.awt.event.ComponentEvent event)
    {

      setSummaryText();

    }

  void jarPanel_ComponentShown(java.awt.event.ComponentEvent event)
    {

      if(_jarFileName == null){

	String jarfilename="";

	String repository = userRepository+fileSeparator;



    if(_jarDirName == null ){
        jarfilename = userRepository+fileSeparator+"jars" +
    	  fileSeparator+ rootClass + "Bean.jar";
    }
    else
    {
        jarfilename = _jarDirName +
    	  fileSeparator+ rootClass + "Bean.jar";
    }
        beanBuildDirTextField.setText(jarfilename);

      }



      // to do: code goes here.
    }

  void jarPanel_ComponentHidden(java.awt.event.ComponentEvent event)
    {
      _jarFileName = beanBuildDirTextField.getText();
      _jarDirName = extractFileDir(beanBuildDirTextField.getText());

    }

  void settingsPanel_ComponentShown(java.awt.event.ComponentEvent event)
    {   syncSettings();
    backButton.setEnabled(true);
    nextButton.setEnabled(false);

    }

  void settingsButton_MouseClick(java.awt.event.MouseEvent event)
    {
      ((CardLayout)mainPanel.getLayout()).last(mainPanel);
    }


  void welcomepanel_ComponentShown(java.awt.event.ComponentEvent event)
    {
      backButton.setEnabled(false);
      nextButton.setEnabled(true);

    }



  void useG2IconCB_MouseClick(java.awt.event.MouseEvent event)
    {
      // to do: code goes here.

      //{{CONNECTION
      // Toggle enabled
      useG2Icon = useG2IconCB.getState();
      icon32FileTextField.setEnabled(!icon32FileTextField.isEnabled());
      //}}
    }

  void classPanel_ComponentHidden(java.awt.event.ComponentEvent event)
    {
      rootClass =  G2ClassTranslator.createJavaClassNameFromG2ClassName(
									Symbol.intern(g2ClassTextField.getText().toUpperCase())) ;
    }

  void registerActiveXControl_MouseClick(java.awt.event.MouseEvent event)
    {


      //{{CONNECTION
      // Toggle enabled
      unregBeforeCreation.setEnabled(!unregBeforeCreation.isEnabled());
      //}}
    }

	void resultPanel_ComponentShown(java.awt.event.ComponentEvent event)
	{
	    nextButton.setEnabled(false);
	    backButton.setEnabled(false);
	}

	void activeXPanel_ComponentShown(java.awt.event.ComponentEvent event)
	{
		nextButton.setEnabled(true);
		backButton.setEnabled(true);



	}

	void doActiveXBuild_MouseClick(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.

		//{{CONNECTION
		// Toggle enabled
		//unregBeforeCreation.setEnabled(!unregBeforeCreation.isEnabled());
//		userRequestedActiveX = false;
		//}}
	}

	void iconPanel_ComponentHidden(java.awt.event.ComponentEvent event)
	{
	   useG2Icon = useG2IconCB.getState();
	}

	void G2BeanBuilder_ComponentResized(java.awt.event.ComponentEvent event)
	{

	}




 void backButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    if (settingsPanel.isVisible())
	    {
        	guiAutoFocus = guiAutoFocusCB.getState();

        	traceOn = traceOnCB.getState();
        	useG2Icon = useG2IconCB.getState();
        	guiUsesColor = guiUsesColorCB.getState();
        	((CardLayout)mainPanel.getLayout()).first(mainPanel);
        	return;
        }

    if (summaryPanel.isVisible()){
        if(_isDownloader){
            ((CardLayout)mainPanel.getLayout()).show(mainPanel,"card6");
        }
        else
        {
    	    if (!activeXsupported)
    	    {
    	        ((CardLayout)mainPanel.getLayout()).previous(mainPanel);
    	    }
	    }

      }

      ((CardLayout)mainPanel.getLayout()).previous(mainPanel);


      if ( welcomepanel.isVisible() ) {
	backButton.setEnabled(false);
      } else  backButton.setEnabled(true);

      if ( resultPanel.isVisible() ) {
	nextButton.setEnabled(false);
      } else  nextButton.setEnabled(true);

      if (activeXPanel.isVisible()){
	if(activeXsupported)
	  {
	    nextButton.setEnabled(false);
	    backButton.setEnabled(true);
	  }else
            {   // miss it out
	      ((CardLayout)mainPanel.getLayout()).previous(mainPanel);
            }
      }
	}

	void nextButton_actionPerformed(java.awt.event.ActionEvent event)
	{

	    if ( classPanel.isVisible()){
	        int l = g2ClassTextField.getText().length();
            if (!(l > 0)  ){
                nextButton.setEnabled(false);
                g2ClassTextField.requestFocus();
            }

	        if(_isDownloader){

                ((CardLayout)mainPanel.getLayout()).show(mainPanel,"card9");
	        }
	        else
	        {
    	   	  advanceIfNotEmptyString(g2ClassTextField.getText(), _noClassName);
	        }
        }
	    else if (ipPanel.isVisible()){
	        advanceIfNotEmptyString(hostNameTextField.getText(), _noHostAddress,
	                    hostPortTextField.getText(), _noHostPort);
	    }
		else  {
		    ((CardLayout)mainPanel.getLayout()).next(mainPanel);
		}


		if ( welcomepanel.isVisible() ) {
		    backButton.setEnabled(false);
		} else  backButton.setEnabled(true);



        if ( resultPanel.isVisible() ) {
		    nextButton.setEnabled(false);
		    backButton.setEnabled(false);
		}

// here ->

        if(activeXsupported)
        {
    	  	if (activeXPanel.isVisible()){
    		  nextButton.setEnabled(false);
    		  backButton.setEnabled(true);
            }
        }
        else
        {
         if(!activeXsupported)
            {if (activeXPanel.isVisible()){
                ((CardLayout)mainPanel.getLayout()).next(mainPanel);
    //            ((CardLayout)mainPanel.getLayout()).next(mainPanel);
            }
            }
        }

        if ( progressPanel.isVisible()){
            nextButton.setEnabled(false);
            buildJarFileInThread();
        }



        if ( classPanel.isVisible()){
        	        int l = g2ClassTextField.getText().length();
                    if (!(l > 0)  ){
                        nextButton.setEnabled(false);
                        g2ClassTextField.requestFocus();
                    }
        }

	}

	void restartButton_actionPerformed(java.awt.event.ActionEvent event)
	{
    	  resetCheckBoxes();
          _jarFileName = null;

          try {
        	String icon32imageFile = icon32FileTextField.getText();//.replace('\\','/');
        	iconPreview.setURL(com.gensym.beanbuilder.RelativeURL.getURL("images/I32.gif"));
        	iconPreview.paint(iconPreview.getGraphics());
          }
          catch (Exception error) { informTheOperator(error.toString());}

          // go to the first screen
          ((CardLayout)mainPanel.getLayout()).first(mainPanel);
	}


	void exitButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    ConfirmDialog f = new ConfirmDialog(this, _exitSystem,  true);
        f.show();
	}

  /*
	void helpButton_actionPerformed(java.awt.event.ActionEvent event)
	{
      AttentionDialog ad = new AttentionDialog(this, _noHelp, true);
      ad.show();
	}
  */
	void aboutButton_actionPerformed(java.awt.event.ActionEvent event)
	{  AboutDialog ab = new AboutDialog(this, true);
	        ab.versionNumberLabel.setText(version);
		ab.productLabel.setText(_productID.trim());
		ab.show();
//				(new AboutDialog(this, true)).show();
	}

    void settingsButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		((CardLayout)mainPanel.getLayout()).last(mainPanel);
	}




class SymButtonAction implements java.awt.event.ActionListener
	{
		@Override
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object.equals(nextButton))
				nextButton_actionPerformed(event);
			else if (object.equals(backButton))
				backButton_actionPerformed(event);
			else if (object.equals(exitButton))
				exitButton_actionPerformed(event);
			else if (object.equals(restartButton))
				restartButton_actionPerformed(event);
			else if (object.equals(aboutButton))
				aboutButton_actionPerformed(event);
			//else if (object.equals(helpButton))
			//        helpButton_actionPerformed(event);
			else if (object.equals(set32IconFileButton))
				set32IconFileButton_actionPerformed(event);
			else if (object.equals(browseButton1))
				browseButton1_actionPerformed(event);
			else if (object.equals(settingsButton))
				settingsButton_actionPerformed(event);
//			else if (object == useG2IconCB)
//				useG2IconCB_actionPerformed(event);

		}
	}



	void classPanel_ComponentShown(java.awt.event.ComponentEvent event)
	{

        	        int l = g2ClassTextField.getText().length();
                    if (!(l > 0)  ){
                        nextButton.setEnabled(false);
                        g2ClassTextField.requestFocus();
                    }

	}


//*************************************************************************
//************** end of automatically generated code **********************
//*************************************************************************



  /**
   * Default constructor
   *
   *@param title - the string used to set the title of the displayed GUI
   */
  public G2BeanBuilder(String title)
    {
      this(new String[] {});
      setTitle(title);
    }


   /**
    *show
    *override method sets the title of the window to
    *reflect the product, then shows the window
    */
  @Override
  public synchronized void show()
    {  settingsButton.setVisible(false);
        setResizable(false);
//      setTitle( _productID + version);
      setTitle( _productID );
      super.show();
    }

  /**
   * Returns a string representing the current version of the GUI
   *
   *@return version
   */
  public static String getVersion(){
    return version;
  }



  /**
   * Outputs a message to the user
   * If the GUI is running, the message is dispayed in the GUI's
   * status line as well as out put to the console.
   * If no gui is running - the message is output to the console.
   * Only outputs if traceOn is true to allow production code to
   * go silent
   *@param s the string to be displayed
   */
  static void informTheOperator(String s){

    if( status != null){
      status.setText(s + status.getText());
      status.setSelectionStart(1);
    }

    if(traceOn){
    	System.out.println(s);
    }

  }




    /**
     *growTextHeight
     * grows the height of a text field by the given ammout (may be -ve)
     *@param text the java.awt.TextField to be changed
     *@param height the amount by which to modify the height of text
     */
    private void growTextHeight(java.awt.TextField text, int height)
    {   java.awt.Rectangle rect = text.getBounds();
        rect.grow(0,height);
        text.setBounds(rect);
    }


    /**
    * rescaleTextHeights
    *
    *   hard coded with a series of text widgets which need to
    *   be re-scalled
    *
    *@param height - the aout by which to alter the text fields
    */
    private void rescaleTextHeights(int height)
    {
        growTextHeight(hostNameTextField    , height);
        growTextHeight(hostPortTextField    , height);
        growTextHeight(g2ClassTextField     , height);
        growTextHeight(icon32FileTextField  , height);
        growTextHeight(beanBuildDirTextField, height);

    }

   /*
    *rescaleTextHeightNT
    * This is a temporary measure until Swing is used
    */
  private void rescaleTextHeightNT()
  {
    rescaleTextHeights(-5);
  }

  /**
   * Checks if the given string is empty
   *
   *@param s the string to check
   *@return boolean - the result of the string comparison
   */
  private boolean isEmptyString( String s){
    if (s.length()==0){
    	return true;
    }
    // remove trailing spaces & check
    return   ( (s.trim()).compareTo(new String("")) == 0);

  }



    /**
    *unifyString
    *
    *@param   s the string to be unified
    *@returns a string where by all . are converted
    * to / and any \ is converted to a /
    */
    private String unifyString(String s){
     return (s.replace('.','/').replace('\\','/'));
    }



  /*
  * getFileName
  * File access function
  *
  *@param   fullFileSpec string holding a full file spec eg c:\aoc\myfile.exe
  *@return the filename contained in the full file spec  eg myfile
  */
  private String getFileName(String fullFileSpec){
    return  fullFileSpec.substring(fullFileSpec.lastIndexOf(fileSeparator)+ 1 );
  }



  /**
   * extractFileName
   * File access function
   *@param sourceString
   *@returns the filename component of the sourceString
   */
  private String extractFileName(String sourceString){
    int fsep=-1;
        try{
        fsep = sourceString.lastIndexOf(fileSeparator);
    }catch(Exception e){
    	fsep = -1;
    }

    if (fsep < 0){
        return sourceString;
    }else
    {
          return(sourceString.substring(fsep));
    }
  }

  /**
   * extractFileDir
   * File access function
   *@param sourceString
   *@returns the directory component of the sourceString
   */
  private String extractFileDir(String sourceString){
    int fsep= 0;

    try{
        fsep = sourceString.lastIndexOf(fileSeparator);
    }catch(Exception e){
    	fsep = -1;
    }

    if (fsep < 0){
        return sourceString;
    }else
    {
        return(sourceString.substring(0,fsep));
    }
  }


   /**
    *setNbOfSteps
    * modifies the Step X on N labels to reflect
    * the number of current steps in the program
    */
    private void setNbOfSteps()
    {
        connectionStepLabel.setText(connectionStepLabel.getText()+_nbOfSteps);
        classStepLabel.setText(classStepLabel.getText()+_nbOfSteps);
        jarStepLabel.setText(jarStepLabel.getText()+_nbOfSteps);
        iconsStepLabel.setText(iconsStepLabel.getText()+_nbOfSteps);
    }


  /**
   *setTrace
   *  setter for the traceOn flag which controls output
   *@param boolean value to attribute to traceOn
   */
  private void setTraceOn(boolean v){
    Trace.setExceptionTraceOn(v);
    traceOn = v;
  }


  /**
   *getTrace
   *  getter for the traceOn flag which controls
   *  output
   *@return boolean value to attribute to traceOn
   */
  private boolean getTraceOn(){
    return traceOn;
  }


  /**
   *
   * sets the settings panel check boxes to the same
   * as the corresponding variables
   */
  static synchronized void syncSettings(){

    bb.guiUsesColorCB.setState(guiUsesColor);
    bb.guiAutoFocusCB.setState(guiAutoFocus);
    bb.useG2IconCB.setState(useG2Icon);
    bb.icon32FileTextField.setEnabled(!useG2Icon);
    bb.traceOnCB.setState(traceOn);

  }



/**
*toggleVirtualProduct
*
*@param downloadMode - a boolean flag indicating if
*the "product" is downloadinterfaces
*/
private void toggleVirtualProduct( boolean downloadMode)
{
    _isDownloader = downloadMode;

    if(downloadMode)
    {
        _nbOfSteps = "2";
        bb.setNbOfSteps();

        try {
            backdropImageDisplay.setFileName("dli.jpg");
			imageDisplay7.setFileName("info.jpg");
		}
		catch(java.beans.PropertyVetoException e) { }

        _productID = "G2 DownloadInterfaces";

       buildTitleLabel.setText(_doingDownload);

       summaryPromptLabel.setText( _dlisummaryPromptLabel);
       mainLabel.setText(dlimainLabel);
       welcomePromptLabel.setText(dliwelcomePromptLabel);


    }else
    {
        _nbOfSteps = "4";
        bb.setNbOfSteps();

        _productID    = " G2 Bean Builder ";


        try {
	  backdropImageDisplay.setFileName("backdrop.jpg");
	}
	catch(java.beans.PropertyVetoException e) { }

	generateStubs.setVisible(false);

    }
}



void setSettings()
{String s;

   s=i18nSettings.getString("colorchange");
   if(s.equals("true"))
    {guiUsesColor=true;}
   else
    {guiUsesColor=false;}

   s=i18nSettings.getString("autoinputfocus");
   if(s.equals("true"))
    {guiAutoFocus=true;}
   else
    {guiAutoFocus=false;}

   s=i18nSettings.getString("trace");
   if(s.equals("true"))
    {traceOn=true;}
   else
    {traceOn=false;}


}

  /**
   *
   *Reads the system resourses in order to set up the string
   *values for the GUI prompts and labels to allow for
   *internationalisation of the interface
   */
  void internationalize(){

    //helpButton.setLabel(i18nLabels.getString("helpButton"));
    backButton.setLabel(i18nLabels.getString("backButton"));
    nextButton.setLabel(i18nLabels.getString("nextButton"));
    settingsButton.setLabel(i18nLabels.getString("settingsButton"));
    aboutButton.setLabel(i18nLabels.getString("aboutButton"));
    restartButton.setLabel(i18nLabels.getString("restartButton"));
    exitButton.setLabel(i18nLabels.getString("exitButton"));
    dlimainLabel=i18nLabels.getString("dlimainLabel");
    dliwelcomePromptLabel=i18nLabels.getString("dliwelcomePromptLabel");
    mainLabel.setText(i18nLabels.getString("mainLabel"));
    welcomePromptLabel.setText(i18nLabels.getString("welcomePromptLabel"));
    settingsLabel.setText(i18nLabels.getString("settingsLabel"));
    G2HostLabel.setText(i18nLabels.getString("G2HostLabel"));
    connectionStepLabel.setText(i18nLabels.getString("connectionStepLabel"));
    G2PortLabel.setText(i18nLabels.getString("G2PortLabel"));
    connectionTitleLabel.setText(i18nLabels.getString("connectionTitleLabel"));
    connectionAddressLabel.setText(i18nLabels.getString("connectionAddressLabel"));
    connectionPortLabel.setText(i18nLabels.getString("connectionPortLabel"));
    g2ClassTitleLabel.setText(i18nLabels.getString("g2ClassTitleLabel"));
    classStepLabel.setText(i18nLabels.getString("classStepLabel"));
    g2ClassPromptLabel.setText(i18nLabels.getString("g2ClassPromptLabel"));
    classClassLabel.setText(i18nLabels.getString("classClassLabel"));
    iconsTitleLabel.setText(i18nLabels.getString("iconsTitleLabel"));
    iconsStepLabel.setText(i18nLabels.getString("iconsStepLabel"));
    iconsPromptLabel.setText(i18nLabels.getString("iconsPromptLabel"));
    fileLocationTitleLabel.setText(i18nLabels.getString("fileLocationTitleLabel"));
    jarStepLabel.setText(i18nLabels.getString("jarStepLabel"));
    beanBuildDirLabel.setText(i18nLabels.getString("beanBuildDirLabel"));
    creationDirPromptLabel.setText(i18nLabels.getString("creationDirPromptLabel"));
    activeXTitleLabel.setText(i18nLabels.getString("activeXTitleLabel"));
    activeXStepLabel.setText(i18nLabels.getString("activeXStepLabel"));
    summaryTitleLabel.setText(i18nLabels.getString("summaryTitleLabel"));
    summaryTopLabel.setText(i18nLabels.getString("summaryTopLabel"));
    summaryPromptLabel.setText(i18nLabels.getString("summaryPromptLabel"));
    dlisummaryPromptLabel=i18nLabels.getString("dlisummaryPromptLabel");
    buildingActiveXcontrolLabel.setText(i18nLabels.getString("buildingActiveXcontrolLabel"));
    buildingJarLabel.setText(i18nLabels.getString("buildingJarLabel"));
    buildingBeanLabel.setText(i18nLabels.getString("buildingBeanLabel"));
    downloadingClassDataLabel.setText(i18nLabels.getString("downloadingClassDataLabel"));
    connectingToG2Label.setText(i18nLabels.getString("connectingToG2Label"));
    dlibuildTitleLabel=i18nLabels.getString("dlibuildTitleLabel");
    buildTitleLabel.setText(i18nLabels.getString("buildTitleLabel"));
    finishedTitleLabel.setText(i18nLabels.getString("finishedTitleLabel"));
    finishedPromptLabel.setText(i18nLabels.getString("finishedPromptLabel"));
    doDownload.setLabel(i18nLabels.getString("doDownload"));
    generateStubs.setLabel(i18nLabels.getString("generateStubs"));
    doActiveXBuild.setLabel(i18nLabels.getString("doActiveXBuild"));
    iconsSizeLabel32.setText(i18nLabels.getString("iconsSizeLabel32"));
    guiUsesColorCB.setLabel(i18nLabels.getString("guiUsesColorCB"));
    guiAutoFocusCB.setLabel(i18nLabels.getString("guiAutoFocusCB"));
    traceOnCB.setLabel(i18nLabels.getString("traceOnCB"));
    useG2IconCB.setLabel(i18nLabels.getString("useG2IconCB"));
    unregBeforeCreation.setLabel(i18nLabels.getString("unregBeforeCreation"));
    _summaryText=i18nLabels.getString("_summaryText");
    _hostName=i18nLabels.getString("_hostName");
    _hostPort=i18nLabels.getString("_hostPort");
    _doingDownload=i18nLabels.getString("_doingDownload");
    _g2Class=i18nLabels.getString("_g2Class");
    _jarDir=i18nLabels.getString("_jarDir");
    _iconText=i18nLabels.getString("_iconText");
    _noHostAddress=i18nLabels.getString("_noHostAddress");
    _noHostPort=i18nLabels.getString("_noHostPort");
    _noClassName=i18nLabels.getString("_noClassName");
    _cancelSession=i18nLabels.getString("_cancelSession");
    _exitSystem=i18nLabels.getString("_exitSystem");
    _connectionMade=i18nLabels.getString("_connectionMade");
    _connectionFailed=i18nLabels.getString("_connectionFailed");
    _buildingBean=i18nLabels.getString("_buildingBean");
    _downLoadingData=i18nLabels.getString("_downLoadingData");
    _generateStubs=i18nLabels.getString("_generateStubs");
    _makingJar=i18nLabels.getString("_makingJar");
    _connectingToG2=i18nLabels.getString("_connectingToG2");
    _makingActiveX=i18nLabels.getString("_makingActiveX");
    _buildComplete=i18nLabels.getString("_buildComplete");
    _jarFileNamePrompt=i18nLabels.getString("_jarFileNamePrompt");
    //_noHelp=i18nLabels.getString("_noHelp");
    _error=i18nLabels.getString("_error");
    _failed=i18nLabels.getString("_failed");
    _okay=i18nLabels.getString("_okay");
    _save=i18nLabels.getString("_save");
    _open=i18nLabels.getString("_open");
    _yes=i18nLabels.getString("_yes");
    _no=i18nLabels.getString("_no");

/*    attentionDialogOkayButton.setLabel(_okay);
    quitDialogYesButton.setLabel(_yes);
    quitDialogNoButton.setLabel(_no);
    aboutDialogOkButton.setLabel(_okay);
  */

/*
    if(_productID.equals("G2 DownloadInterfaces")){
        mainLabel.setText(System.getProperty (""));
        welcomePromptLabel.setText(System.getProperty (""));
    }
    else
    {
        mainLabel.setText(System.getProperty (""));
        welcomePromptLabel.setText(System.getProperty (""));
    }

    if(_productID.equals("G2 DownloadInterfaces")){
        buildTitleLabel.setText(System.getProperty (""));
    }
    else
    {
        buildTitleLabel.setText(System.getProperty (""));
    }
*/

  }




  /**
   * Collates the relavent information from the gui (or command line)
   * and creates a avtiveX for the jarred bean file in the specified directory
   *
   *@returns true if the bean file is created without error else false
   *
   */
  private boolean buildActiveXControl() {

    String packagename = fullClassName.substring(0, fullClassName.lastIndexOf("."));

    String activeXDir = extractFileDir(beanBuildDirTextField.getText())+fileSeparator+"activex";
    File activeXDirFile = new File(activeXDir);
    if (!activeXDirFile.exists())
      activeXDirFile.mkdirs();

    RunActiveXBeanPackager activeXPackager = new RunActiveXBeanPackager(packagename+"."+rootClass+"Bean",
						 beanBuildDirTextField.getText(),  // jar file location
						 activeXDir);

    return activeXPackager.runPackager("",unregBeforeCreation.getState());

  }


  /**
   * Collates the relavent information from the gui (or command line)
   * and creates a jar file in the specified directory
   *
   *@returns true if the jar file is created without error else false
   *
   */
  private boolean buildJarFile(){

    String repository = userRepository+fileSeparator;
    String  packagename = unifyString(fullClassName.substring(0,
        fullClassName.lastIndexOf(".")))+ fileSeparator;

    JarFile jf = new JarFile();

    // we need to package up the class for this bean
    try{
      jf.putFile(repository + packagename +rootClass + "Bean.class" ,
		 packagename + rootClass +"Bean.class" , true);

      jf.putFile(repository + packagename + rootClass + "BeanBeanInfo.class" ,
		 packagename + rootClass + "BeanBeanInfo.class" , false);

      // save as given name or default to Unamed<CLAZZ>.jar
      informTheOperator(_makingJar + _jarFileName+ CR);

      File jarDirFile = new File(extractFileDir(beanBuildDirTextField.getText()));
      if (!jarDirFile.exists())
	jarDirFile.mkdirs();

      // make a call to save the contents of the jar file
      jf.saveAs( (_jarFileName == null ? ("Unnamed"+rootClass+".jar") : _jarFileName));
    }
    catch (Exception e) {
    	informTheOperator(_error + _makingJar + _jarFileName + _failed + e.toString());
    	return false;
    }

    return true;
  }

  /******************* Future use *** FILENAME FILTER *****************
   final String[] userClassList = repository.list (new FilenameFilter ()
   {
   public boolean accept (File dir, String name)
   {
   return name.endsWith (".ser");
   }
   }
   );
  */

  /**
   *Create a bean for the class
   *
   *@returns true if the bean is created else false
   */
  private boolean buildBean(){
    boolean result =  false;
    String args[] = new String[1];
    // currently 32x32
    int width  = 32;
    int height = 32;

    int[] serializedIconData = new int [width * height];
    serializedIconData = createBeanIconImage();//was g2ClassTextField.getText());

    if (serializedIconData==null){
    	informTheOperator("serializedIconData failed"+CR);
    }

    String  packagename = unifyString(fullClassName.substring(0,
	 fullClassName.lastIndexOf(".")));

    String repository = userRepository+fileSeparator;
    JarFile jf = new JarFile();
    // store information regarding the icons used by the bean

    //currently using serialized image :0) but may well jave to do
    //something with user data
    Vector iconData = new Vector(2);

    informTheOperator( CR + g2ClassTextField.getText() + " -> " + rootClass);

    //get icon data else default icon (we may add more than two later versions)

    String icon32imageFile =  icon32FileTextField.getText();//.replace('\\','/');

    // attempt to create the bean
    try{
      ItemBeanCreator ibc;
      synchronized (G2BeanBuilder.class) {
        informTheOperator(generatedClass + CR);
        ibc = new ItemBeanCreator(generatedClass, repository + packagename,
            serializedIconData);
      }
      ibc.generateBean();
      ibc.generateBeanInfo();

    }catch (Exception E){
      E.printStackTrace();
      informTheOperator( _error + _buildingBean + E.toString() + CR);
      return false;
    }
    return true;

  }

 /**
 *createBeanIconImage
 *
 *@return returns an int[] containing the image for the bean
 * this image is either the default "bean" image,
 * an image specified by the user
 * or the G2 Icon  image for the class
 */
  private int[] createBeanIconImage()//was String rootClass
    {   // currently we store a single 32x32 image
      int finalImageWidth = 32;
      int finalImageHeight = 32;
      int width=32;
      int height=32;

      Image iconImage;

      BeanImageBuffer bbi=new BeanImageBuffer();

      try {
    	String icon32imageFile =  icon32FileTextField.getText();
	    if(lastGifDir == null){
    	    iconPreview.setFileName(icon32imageFile);
	    }
	    else
	    {
	        iconPreview.setAbsoluteFileName(extractFileDir(icon32imageFile),
					    extractFileName(icon32imageFile));
	    }

    	iconPreview.paint(iconPreview.getGraphics());
      }catch (Exception error) { informTheOperator(error.toString());}

      int[] classIconData  = new int [finalImageWidth * finalImageHeight];

      if(useG2Icon ){   // we are to use the G2 ICON
        synchronized (G2BeanBuilder.class) {
          classIconData = bbi.serializeImage(iconViewer.getImg(), this);
        }
        iconPreview.paint(iconPreview.getGraphics());
        iconPreview.setImage(bbi.deserializeImage(classIconData) );
        iconPreview.paint(iconPreview.getGraphics());
        iconPreview.paint(iconPreview.getGraphics());
      }
      else
      {
           classIconData = bbi.serializeImage( iconPreview.getImage(),this);
      }
      return classIconData ;

    }

   /**
   *gets class specific data from G2
   *
   *@returns true or false depending on the result of calling
   *downLoadClasses
   *
   */


  private boolean doDownloadInterfaces(){
    boolean result =  false;
    String clazz = g2ClassTextField.getText().toUpperCase();

    informTheOperator(CR + _downLoadingData + clazz + CR);

    synchronized (G2BeanBuilder.class) {
		try {

			generatedClass = DownloadInterfaces.downloadClass(g2_connection,
					clazz, doDownload.getState(), false); //only interfaces
			if (generateStubs.getState()) {
				// We reconnect to ensure that dependant classes get loaded correctly
				g2_connection.closeConnection();
				String host = hostNameTextField.getText();
				String port = hostPortTextField.getText();
				g2_connection = G2Gateway.getOrMakeConnection(
						(host == null ? "localhost" : host),
						(port == null ? "1111" : port));
				generatedClass = DownloadInterfaces.downloadClass(
						g2_connection, clazz, doDownload.getState(), true); // stubs
			}

			if (!_isDownloader) { // Dont do this for downloader
				if (iconViewer == null)
					iconViewer = new IconViewer();
				if (iconViewer.getIconDescriptionForClass(g2_connection,
						Symbol.intern(clazz))) {
					imageDownloadPanel.add(iconViewer);
					imageDownloadPanel.repaint();
				} else {
					useG2Icon = false;
				}
			}

			if (generatedClass == null) {
				informTheOperator("Null returned for generatedClass" + CR);
				return false;
			}
		} catch (Exception E) {
			E.printStackTrace();
			informTheOperator(_error + _downLoadingData + clazz + E.toString()
					+ CR);
			return false;
		}
		fullClassName = generatedClass.getName();
	}
    return true;

  }



  /**
   * Creates a connection to the specified G2
   *
   *@returns result - true if the connection was established else false
   *
   */
  private boolean establishConnection(){
    boolean result = false;
    String host;
    String port;

    // get the connection details
    host = hostNameTextField.getText();
    port = hostPortTextField.getText();

    synchronized (G2BeanBuilder.class) {
		if (port != null || host != null) {
			//try to connect to a g2 if we are asked
			try {
				informTheOperator(CR + _connectingToG2 + CR);

				g2_connection = null;

				//Initialize the G2 Gateway Class so GSI does not listen at a known port
				//currently -nolistener does not seem to work
				G2Gateway.initialize(new String[] { "-listenerport",
							"22455" });
				g2_connection = G2Gateway.getOrMakeConnection(
						(host == null ? "localhost" : host),
						(port == null ? "1111" : port));
			} catch (Exception E) {
				informTheOperator(_error + _connectingToG2 + E.toString());
			}

			if (g2_connection == null) {

				informTheOperator(_error + _connectionFailed + CR);
				result = false;
			} else {

				informTheOperator(_connectionMade);
				result = true;
			}
		}
	}
	return result;
  }


  /**
   * To get to here, the self test must have build a GUI
   * If not, or any exception occurs, this code is not called
   * and the caller prints failed else enters here
   * and prints passed
   */
  public static void  selfTest(){
    System.out.println( "Self Test Passed"+CR);
    System.exit(0); // close the application
  }

  /**
   *Displays help information describing the command line options
   * THIS HAS NOT BEEN INTERNATIONALISED LIKE THE REST OF THE CODE
   */
  private static void showCommandLineHelp(){
    System.out.println(_productID+
		       " " + getVersion() + CR + CR +
		       "Usage : java G2BeanBuilder {options}" + CR +
		       "  option         default       Sets"+CR+
		       "   -h {host}  (localhost)  :   Machine which the target G2 is running "+CR+
		       "                               ie  (hostname or XXX.XXX.XXX.XXX)" + CR +
		       "   -p {port}  (1111)       :   Port on which the target G2 is running " + CR +
		       "   -c {class}              :   G2 class from which to build bean" + CR +
		       "   -d {dir}   (./)         :   jar file home directory" + CR +
		       "   -f {file}               :   jar file name (optional)" + CR +
		       "   -i                      :   32x32 color image to represent the bean" + CR +
		       "   -D                      :   do not force download of G2 class information" + CR +
		       "   +g                      :   Force gui display if given command line arguments" + CR +
		       "   +t                      :   sets trace output true (no trace by default)" + CR+
		       "   +v                      :   verification test.)"+ CR);
  }



  /**checks if a given string is empty (representing a textfield input box)
   *if the field has an entry - show the next panel
   *otherwise give a message prompting the user to correct the entry
   *
   *@param s the string to check
   *@param msg the message to display to the user should the s be empty
   *
   */
  private void advanceIfNotEmptyString( String s , String msg){
    if ( isEmptyString(s)){
      AttentionDialog d = new AttentionDialog(this, msg ,true);
      d.show();
    }
    else  {
      ((CardLayout)mainPanel.getLayout()).next(mainPanel);
    }
  }

  /**
   * checks if either of two strings are empty and if so displays an
   * associated message
   * if both strings are valid, display the next panel
   * @see advanceIfNotEmptyString( String s , String msg)
   */
  private void advanceIfNotEmptyString( String s1 , String msg1,
					String s2, String msg2){
    boolean string1Empty = isEmptyString(s1);
    boolean string2Empty = isEmptyString(s2);

    if ( string1Empty ){
      AttentionDialog d = new AttentionDialog(this, msg1 ,true);
      d.show();
    }
    else if (string2Empty){
      AttentionDialog d = new AttentionDialog(this, msg2, true);
      d.show();
    }
    else  {
           ((CardLayout)mainPanel.getLayout()).next(mainPanel);
    }
  }


  /**
   *Collates the setting of the GUI
   */
     void setSummaryText(){
        // clear previous run
        String s="";
        summaryTextArea.setText("***");

        if(_isDownloader){
            s = _summaryText +
            _hostName + hostNameTextField.getText() + CR +
            _hostPort + hostPortTextField.getText() + CR +
            _g2Class + g2ClassTextField.getText() + CR +
            _downLoadingData + doDownload.getState()+ CR +
            _generateStubs  + generateStubs.getState();

        }else
        {

        s = _summaryText +
            _hostName + hostNameTextField.getText() + CR +
            _hostPort + hostPortTextField.getText() + CR +
            _g2Class + g2ClassTextField.getText() + CR +
            _downLoadingData + doDownload.getState()+CR +
            _generateStubs  + generateStubs.getState()+CR +
            _jarDir + beanBuildDirTextField.getText() + CR ;


            if(useG2IconCB.getState()){
               s = s + useG2IconCB.getLabel()+ " " +
               useG2IconCB.getState() + CR;
            }else{
               s = s + _iconText + icon32FileTextField.getText()+CR;
            }

            // see if active X is supported and indicate if chosen
            if (activeXsupported){
                s = s +
                    _makingActiveX + doActiveXBuild.getState() + CR;

                if(doActiveXBuild.getState()){
                    s = s + unregBeforeCreation.getLabel() + " " +
		      unregBeforeCreation.getState() + CR;
                }
            }
        }
         summaryTextArea.setText(s);

     }


	/**
	 *  Creates the text for the results window from predeclared strings
	 *  based on the check box values from the progress panel
	 *
	 */
	void setResultsText()
	{
	    String result = "";

	    // clear previous run
	    resultOfCompilation.setText( result );
	    // see if the build went without a hitch in which case say it was okay

	    boolean isActiveXBuild = !activeXsupported || (doActiveXBuild.getState() && activeXResult.getState());
	    boolean resultCheck = connectionResult.getState()&& downloadClassResult.getState()
	    					&& beanBuildResult.getState()&& jarFileResult.getState();
	    if (resultCheck && isActiveXBuild){
	      result = _buildComplete + CR + CR ;
	    }

	    result =  result + _connectingToG2 +
	      (connectionResult.getState() == false ? _failed : _okay)+ CR;

	    result =  result + _downLoadingData +
	      (downloadClassResult.getState() == false ? _failed : _okay)+CR;

        if(!_isDownloader)
        {
    	    result =  result + _buildingBean +
    	      (beanBuildResult.getState() == false ? _failed : _okay)+ CR;

    	    result =  result + _makingJar +
    	      (jarFileResult.getState() == false ? _failed : _okay)+ CR;


    	    if (activeXsupported && doActiveXBuild.getState())
    	      result =  result + _makingActiveX +
    	        (activeXResult.getState() == false ? _failed : _okay)+ CR;
        }

	    resultOfCompilation.setText( result );

  	    informTheOperator(result);

        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	}



    /**
     *Resets the stage result check boxes to their default settings
     * ready for another run
     */
    void resetCheckBoxes(){
        java.awt.Color activeColor = (new java.awt.Color(255));


        connectingToG2Label.setForeground(activeColor );
        downloadingClassDataLabel.setForeground(activeColor );
        buildingBeanLabel.setForeground(activeColor );
        buildingJarLabel.setForeground(activeColor );
        buildingActiveXcontrolLabel.setForeground(activeColor );


        if(_isDownloader)
        {
            beanBuildResult.setVisible( false) ;
            buildingBeanLabel.setVisible( false) ;
            jarFileResult.setVisible( false) ;
            buildingJarLabel.setVisible( false) ;
            iconPreview.setVisible( false) ;
            buildingActiveXcontrolLabel.setVisible( false) ;
            activeXResult.setVisible( false) ;
        }
        else
        {
            beanBuildResult.setVisible( true) ;
            buildingBeanLabel.setVisible( true) ;
            jarFileResult.setVisible( true) ;
            buildingJarLabel.setVisible( true) ;
            iconPreview.setVisible( true) ;

            if (activeXsupported && doActiveXBuild.getState() )
            {
                activeXResult.setState( false) ;
                // make the lable and check box visible
                buildingActiveXcontrolLabel.setVisible( true) ;
                activeXResult.setVisible( true) ;
            }else
            {
                // make the lable and check box invisible
                buildingActiveXcontrolLabel.setVisible( false) ;
                activeXResult.setVisible( false) ;
            }
        }

        connectionResult.setState( false) ;
        downloadClassResult.setState( false) ;
        beanBuildResult.setState( false) ;
        jarFileResult.setState( false) ;

    }


    /** internal class to allow the building of the bean to run in a
     * seperate thread - thus permitting the GUI to still function
     */
     class buildThread extends Thread implements Runnable{

            //default constructor
            buildThread()
            {
                }

         // Performs the steps necessary to create the final jar file
         synchronized void buildJarFileForG2Class()
         {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            try{
                // define colors for indicating process stage activity
                java.awt.Color c = (new java.awt.Color(1,1,1));
                java.awt.Color activeColor = (new java.awt.Color(255,255,255));

                // change each of the stage labels to indicate that process
                // is currently active
                // then set the relavent check box to the result of the
                // particular stage result
                connectingToG2Label.setForeground(activeColor);
                connectingImageDisplay.setVisible(true);
                connectionResult.setState( establishConnection()) ;
                connectingToG2Label.setForeground(c);
                connectingImageDisplay.setVisible(false);
                if(connectionResult.getState())
                {
                    downloadingClassDataLabel.setForeground(activeColor);
                    downloadingImageDisplay.setVisible(true);
                    downloadClassResult.setState( doDownloadInterfaces()) ;
                    downloadingImageDisplay.setVisible(false);
                    downloadingClassDataLabel.setForeground(c);
                }else return;

                if(_isDownloader) {
                	return; // dont progress past this point if we are a downloader
                }

                if(downloadClassResult.getState())
                {
                    buildingImageDisplay.setVisible(true);
                    buildingBeanLabel.setForeground(activeColor);
                    beanBuildResult.setState( buildBean()) ;
                    buildingImageDisplay.setVisible(false);
                    buildingBeanLabel.setForeground(c);
                } else return;

                if(beanBuildResult.getState())
                {
                    buildingJarLabel.setForeground(activeColor);
                    jarfileImageDisplay.setVisible(true);
                    jarFileResult.setState( buildJarFile()) ;
                    jarfileImageDisplay.setVisible(false);
                    buildingJarLabel.setForeground(c);
                }else return;

        		if (!activeXsupported) {
        			return;
        		}
                if ((activeXsupported) && (!doActiveXBuild.getState())) {
                	return;
                }

                if(jarFileResult.getState())
                {   activeXImageDisplay.setVisible(true);
                    buildingActiveXcontrolLabel.setForeground(activeColor);
                    activeXResult.setState( buildActiveXControl());
                    activeXImageDisplay.setVisible(false);
                    buildingActiveXcontrolLabel.setForeground(c);

                }else return;
                }
                catch (Exception e)
                    {
                       setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                       informTheOperator("Exception "+ e);

                       e.printStackTrace();
                       }
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

          }


         // program execution entry point
         @Override
         public  void run(){
            // disable some buttons
            nextButton.setEnabled(false);
    	    backButton.setEnabled(false);

            // do the building of the bean
            buildJarFileForG2Class();

            // reanable the buttons
            nextButton.setEnabled(true);
            backButton.setEnabled(true);

            //create the text for the results window
            setResultsText();

            //show the next panel
           if(autoAdvanceAfterBuild){ 
        	   nextButton_actionPerformed(null);
            }
            stop();
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
         }

     }






    /**
     *starts the build process in a seperate thread
     *
     */
    private  void buildJarFileInThread(){
    	// reset the state of the checkboxes that indicate each stage sucess
           resetCheckBoxes();
           //create a new build thread
           buildThread p = new buildThread();
           new Thread(p);
           p.start();
    }


  /**
   * Main function
   *
   */
    public static void main(String args[])
    {
      com.gensym.core.CmdLineArgHandler cmdLine 
	= new com.gensym.core.CmdLineArgHandler (args);

      // see what command lines args were passed in to the program
      String host             = cmdLine.getOptionValue ("-host");
      String port             = cmdLine.getOptionValue ("-port");
      String clazz            = cmdLine.getOptionValue ("-class");
      String dir              = cmdLine.getOptionValue ("-dir");
      String jarfile          = cmdLine.getOptionValue ("-jarfile");
      String icon32           = cmdLine.getOptionValue ("-iconfile");
      boolean g2icon          = cmdLine.getSwitchValue ("-g2icon");
      boolean force           = cmdLine.getSwitchValue ("-force");
      boolean stubs           = cmdLine.getSwitchValue ("-stubs");
      boolean activeX         = cmdLine.getSwitchValue ("-activex");
      boolean unreg           = cmdLine.getSwitchValue ("-unreg");
      boolean help            = cmdLine.getSwitchValue ("-?");
      boolean gui             = cmdLine.getSwitchValue ("+g");
      boolean nogui           = cmdLine.getSwitchValue ("-g");
      boolean tracing         = cmdLine.getSwitchValue ("+t");
      boolean runselftest     = cmdLine.getSwitchValue ("+v");
      boolean downloader      = cmdLine.getSwitchValue ("-download");
      boolean logtofile       = cmdLine.getSwitchValue ("-logtofile");

      boolean guiAutoFocus    = cmdLine.getSwitchValue ("-f");
      boolean guiAnimate      = cmdLine.getSwitchValue ("-a");
      boolean notg2icon         = cmdLine.getSwitchValue ("-notg2icon");

      useG2Icon = !notg2icon;

      gui=true;
      if(nogui){
    	  gui=false;
      }

      

      //need to support activeX params as well


      synchronized (G2BeanBuilder.class) {
		if (runselftest) {
			System.out.println(_productID + " " + getVersion() + CR);
			try {
				bb = new G2BeanBuilder(args);
				bb.toggleVirtualProduct(downloader);
				bb.selfTest();
			} catch (Exception e) {
				System.out.println("Self Test Failed" + CR);
			}
		}
		bb = new G2BeanBuilder(args);
		// until G2BeanBuilder uses swing, we need to change the
		// height of text fields.
		String osType = System.getProperty("os.name");
		if (osType.equals("Windows NT"))
			bb.rescaleTextHeightNT();
		if (osType.equals("Windows 95"))
			bb.rescaleTextHeightNT();
		bb.toggleVirtualProduct(downloader);
		// makes sure there is always a set of text values for the GUI
		bb.setTraceOn(tracing);
		// configure internat constants as per command line inputs
		if (guiAutoFocus == true) {
			guiAutoFocus = false;
		}
		if (guiAnimate == true) {
			guiUsesColor = false;
		}
		// check and set host
		bb.hostNameTextField.setText((host == null ? "localhost" : host));
		// check and set port
		bb.hostPortTextField.setText((port == null ? "1111" : port));
		// check and set class
		bb.g2ClassTextField.setText((clazz == null ? "" : clazz));
		informTheOperator(CR + "class" + clazz + CR);
		bb._jarFileName = null;
		String repository = bb.userRepository + bb.fileSeparator;
		bb.icon32FileTextField.setText(new String((icon32 == null ? ("I32.gif")
				: icon32)));
		if (help) {
			showCommandLineHelp();
		}
		bb.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		// if no parameters are passed in, use the gui (unless gui flag passed in)
		boolean nullCheck = host == null && port == null && clazz == null;
		if (nullCheck && dir == null && icon32 == null) {
			gui = true;
		}
		// open the log file, if necessary
		if (logtofile) {
			try {
				String ldir = System.getProperty("user.home");
				File outFile = new File(ldir, "g2beanbuilder.log");
				File errFile = new File(ldir, "g2beanbuilder.err");
				String charsetName = Charset.defaultCharset().name();
				System.setOut(new PrintStream(outFile, charsetName));
				System.setErr(new PrintStream(errFile, charsetName));
			} catch (java.io.IOException e) {
				Trace.exception(e);
			}
		}
		// display the gui iff no args or if passed -gui flag
		if (gui) {

			// set the settings panel
			syncSettings();
			bb.show();

			if (status == null) {
				status = bb.statusLine;
			}
		} else { // do commandline build
			boolean result = false;
			if (bb.doConnection) {
				informTheOperator(_connectingToG2 + CR);
				result = bb.establishConnection();
			} else
				result = true;
			if (result) {
				informTheOperator(_downLoadingData + CR);
				result = bb.doDownloadInterfaces();
				informTheOperator("DONE " + _downLoadingData + CR);
				// remember this check	      if(_isDownloader) return;
				if (result) {
					informTheOperator(_buildingBean + CR);
					result = bb.buildBean();
					informTheOperator("DONE " + _buildingBean + CR);
					if (result) {
						informTheOperator(_makingJar + CR);
						result = bb.buildJarFile();
						if (result) {
							informTheOperator(_buildComplete + CR);
							System.exit(0); // close the application
						}
					}
				}
			}
		}
	}
    }


}// end of class
