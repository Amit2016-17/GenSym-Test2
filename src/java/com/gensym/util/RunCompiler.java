
package com.gensym.util;

import java.io.*;
import java.nio.charset.Charset;


/**
 * RunCompiler will take care of running the outboard java compiler
 */
class RunCompiler 
{
  static long process_timeout = 30000; // 10 Seconds
  private static String platformOS = System.getProperty ("os.arch");

  /**
   * Run the the process_name with the parameters and wait for the task to
   * complete, returning the text generated by the outboard process
   *
   */
  public static String compile (String process_name, String parameters)
  {
    Process compilerProcess = null;

    //System.out.println("Running " + process_name + " " + parameters);
    try {
      System.out.println ("COMPILING:\n>>>");
      System.out.println (process_name + " " + parameters);
      System.out.println (">>>");
      StringBuffer compilerOutput = new StringBuffer("");
      long start_time = System.currentTimeMillis();

      if (false) { //(!platformOS.equals ("sparc")) {
	compilerProcess = Runtime.getRuntime().exec (process_name + " " + parameters);	
		
	try {
		Thread.sleep(1000); 
	} catch (Exception E) {}
		
	InputStream istream = compilerProcess.getInputStream();
	
	// Process.waitFor() does not work on NT ! with JDK1.1
	
	int buffer_size = 1;
	byte[] opt = new byte[buffer_size];
	int read_size = istream.read(opt);
	
	
	while (read_size == buffer_size) {
	  compilerOutput.append((char)opt[0]);
	  read_size = istream.read(opt);
	  // Check we have not been operating too long
	  if (System.currentTimeMillis() - start_time > process_timeout )
	    {
	      compilerProcess.destroy();  // ensure that the compiler process is dead
	      break;
	    }
	}
      } else {
	ByteArrayOutputStream byteStream = new ByteArrayOutputStream (5); 
	sun.tools.javac.Main compiler = new sun.tools.javac.Main (byteStream, "javac");
	String classpath = System.getProperty("java.class.path");

	boolean success = compiler.compile ((classpath == null ? 
					     new String[] {parameters} :
					     new String[] {"-classpath", classpath, parameters}));

	byte[] compilerOutputBytes = byteStream.toByteArray ();
	compilerOutput = new StringBuffer (new String (compilerOutputBytes, Charset.defaultCharset()));
      }

      return compilerOutput.toString();
    }
    catch (Exception E)

      { return (E.toString()); }		

   }

  public static void main(String args[])
  {
    try {
      System.out.println(compile(args[0], args[1]));
    } catch (Exception E) {
      System.out.println(E.toString());
    }
  }

}
