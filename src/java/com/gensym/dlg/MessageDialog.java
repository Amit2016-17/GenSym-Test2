
package com.gensym.dlg;

import java.awt.*;
import java.awt.event.*;

/**
 * Class for displaying a simple message dialog to the user.
 * It provides an appropriate icon and buttons for this kind of usage.
 * Users should simply need to create a MessageDialog and
 * display it: 
 * <p><blockquote><pre>
 *     MessageDialog md = new MessageDialog (currentFrame, "Completed", true, "Task Completed", null);
 *     md.setVisible (true);
 * </pre></blockquote>
 *
 * @author vkp
 * @version 1.1 4/28/98 added Javadoc
 * 
 */ 
public class MessageDialog extends IconDialog {

  private static Image img;
  private static final Class thisClass = MessageDialog.class;

  static {
    img =  Toolkit.getDefaultToolkit ().getImage (thisClass.getResource ("info.gif"));
  }

  private MessageDialog (String title,
			 boolean isModal,
			 String  message,
			 StandardDialogClient client) {
    this (null, title, isModal, message, client);
  }


  /**
   * Creates a new MessageDialog with the specified attributes
   * @param frame the parent Frame
   * @param title the String to display in a title bar
   * @param isModal whether the dialog is modal
   * @param message a String containing the text of information that
   *    needs to be displayed to the user
   * @param client a StandardDialogClient that is notified of all
   *    commands generated by buttons on the dialog
   */
  public MessageDialog (Frame frame,
		       String title,
		       boolean isModal,
		       String message,
		       StandardDialogClient client) {
    this (frame, title, isModal, message, img, client);
  }


  /**
   * Creates a custom MessageDialog.
   * Subclasses can use this to override the default properties
   * like the number and type of buttons, and the Image that
   * is displayed
   * @param frame the parent Frame
   * @param title the String to display in a title bar
   * @param isModal whether the dialog is modal
   * @param buttonLabels an array of String labels for the buttons
   *    at the bottom of the dialog
   * @param buttonCodes an array of codes for the buttons on the
   *    dialog
   * @param message a String containing the text of information that
   *    needs to be displayed to the user
   * @param img the Image to be displayed along with the message
   *    text
   * @param client a StandardDialogClient that is notified of all
   *    commands generated by buttons on the dialog
   */
  protected MessageDialog (Frame frame, String title, boolean isModal,
			  String[] buttonLabels, int[] buttonCodes,
			  String message, Image img, 
			  StandardDialogClient client) {
    super (frame, title, isModal, buttonLabels, buttonCodes, 
	   message, (img != null ? img : MessageDialog.img),
	   message.indexOf ("\n") >= 0, client);
  }

  private MessageDialog (Frame frame, String title, boolean isModal,
			  String message, Image img,
			  StandardDialogClient client) {
    super(frame, title, isModal,
	  new String[] {OK_LABEL},
	  new int[] {OK},
	  message, img,
	  (message != null ? message.indexOf ("\n") >= 0 : false),
	  client);
  }

  /**
   * Determines the alignment of the command buttons at the
   * bottom of the StandardDialog
   * @return a code indicating the preferred position of the buttons
   * @see com.gensym.dlg.StandardDialog#getButtonAlignment
   */
  @Override
  protected int getButtonAlignment () {
    return CENTER;
  }

  /*
  public void setVisible (boolean showQ) {
    if (showQ)
      okButton.requestFocus();
    super.setVisible (showQ);
  }
  */


  /**
   * Overrides setVisible in StandardDialog to beep at the user
   * if the dialog is being managed modally.
   * @param showQ true if the Dialog is being shown, false if
   *    hidden
   */
  @Override
  public void setVisible (boolean showQ) {
    if (isModal ())		// Does not work on solaris -vkp, 4/28/98
      Toolkit.getDefaultToolkit().beep ();
    super.setVisible (showQ);
  }


  /**
   * @undocumented
   */
  public static void main (String[] args) {
    MenuItem mi;
    Frame f = new Frame ("Inform Dialog Test");
    registerFrame (f);
    MenuBar mb = new MenuBar ();
    Menu fileMenu = new Menu ("File");
    fileMenu.add (mi = new MenuItem ("Open"));
    final StandardDialogClient sd = new StandardDialogClient () {
      @Override
      public void dialogDismissed (StandardDialog dlg, int code) {
      }
    };
    mi.addActionListener (new ActionListener () {
      @Override
      public void actionPerformed (ActionEvent e) {
	new MessageDialog ("From Menu", true, "Message From Menu", sd).show ();
      }
    });
    mb.add (fileMenu);
    f.setMenuBar (mb);
    f.setSize (300, 300);
    f.setVisible (true);
    new Thread (new MessageDialogLauncher ()).start ();
    System.out.println ("Showing second dialog");
    MessageDialog d =new MessageDialog ("Helloooooo...",
				    true,
				    "No message!",
				    sd);
    d.show ();
  }

}

class MessageDialogLauncher implements Runnable {
  @Override
  public void run () {
    StandardDialogClient sd = new StandardDialogClient () {
      @Override
      public void dialogDismissed (StandardDialog dlg, int code) {
      }
    };
    MessageDialog d = new MessageDialog (null,
					 "Blah...",
					 true,
					 "No Real message!\nBut MultiLine!",
					 sd);
    d.show ();
  }
}
