The sandbox used for GW is very unusual when compared to the ones used for G2.
This is due to the product's structure.  First, it uses elements from an older
repository, and parts from the current repository; i.e., the GSI is taken from
41r0 and the rest is taken from AB's /bt/<sandbox>/gw/lisp.

The /bt/<sandbox>/lisp directory is NOT a cvs directory, it is a staging area
where we bring together the files from the GSI release we are using, and then
copy over those lisp files from /bt/<sandbox>/gw/lisp.

Bootstrap and systems are tricked into thinking they are building GSI.
Therefore, /bt/<sandbox>/gsi is NOT a cvs directory either.  It is where the
translator places its output.  This output is then moved into /bt/<sandbox>/gw/c
which is a CVS directory.

Since the product stands on the foundation provided by a commercial release of
GSI, the ext directory must also be based on a commercial release.  Thus
/bt/<sandbox>/ext is a 41r0 CVS directory; and the makefiles to build ext are
also from 4.1r0.

To summarize:
        ext        A

	gm         B
	gw         B
	util       B
	gen        B & F

	gsi        C & D
	lisp       C & E
where
  A: 41r0, i.e. ab-9oct95 (using the tag for this release).
  B: latest spinoff, i.e. ab
  C: Not a CVS directory.
  D: this is where the translate places its output, from
     here it is copied to gw/c, and then to gm/c
  E: This is made by checking it out from the ab-9oct95 repository,
     and then coping the gw/lisp contents on top of it.
  F: The sun4-ext-* or sparcsol-ext-* makefiles are hand copied here
     to be in synch with A.  Carefully! ONLY the gw files are 
     checked out so you don't check the ext makefiles in by mistake.

Note that the *features* list must have :gsi-web pushed into
it very early, i.e. before bootstrap is loaded.

gw/c is a pain.  The directory contains files in these categories:
  1) Sources generated by translating the lisp of GSI and web link.
     These are copied after the translate from gsi/c.
  2) Include files from the RTL library (see note b) (see note a)
  3) Include files and sources from the EXT library. (see note a)  The sources 
     are those used by GSI programs like those used in testing that appear in
     the ext/c directory.  (see note c)
  4) Sources written by hand unique to these products including: low level
     networking footprint, and the top level main, and the mechanism for
     making WebMiner different from WebLink.
  5) A copy of the authorization code, aka nsleep. (note e)

Note a:
     These are in synch with the GSI lisp sources.  These
     are here since AB's include files maybe different.

Note b: from rtl/c
	bigext.h bignmint.h bignum.h c-ifuns.h c-sdefs.h clos.h 
	closinit.h concatnt.h config.h core.h cprim.h defset.h 
	del-eq.h dummy.h equal.h errors.h evalrun.h externs.h ffi.h 
	filesys.h format.h funcall.h gc.h gcobjmap.h gensym.h hash.h 
	ifuns.h initclos.h initvars.h inline.h instance.h kernel.h 
	keywords.h lisplib.h lists.h longname.h ltime.h methargs.h 
	methcomb.h no-pkg.h numbers.h object.h runint.h runtime.h 
	sdefs.h seq_type.h seqmodi.h slotv.h smcompat.h some.h 
	specific.h stat_arr.h strminit.h subtypep.h svarargs.h 
	svargs.h trivialp.h uconfig.h utime.h values.h varkey.h 
	wrapper.h 

  The script gw/misc/checkout-misc-rtl-h provides a good starting point for
  checking out the necessary rtl/c files, which you then copy into the gw/c
  directory.

Note c: from ext/c
       cprim.h gsiannex.c

Note d: hand written
       gsi_main.h gm_main.c gm_main.h 
       gw_main.c gw_main.h gw_tcp.c gw_tcp.h gwver.c
       lgsi_support.c lgsi_support.h

Note e: auth. code.
       gsi_brg.h gsi_brg.c nsleep.c nsleep.h
