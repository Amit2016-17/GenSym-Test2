// -*- Mode: C++ -*-

#pragma once

/* Begin Autogenerated Code */
#define PG_CREATE                 10    /* Property Grid Actions */
#define PG_DESTROY                11
#define PG_POPULATE               12
#define PG_ADD_ITEM               13
#define PG_MODIFY                 14
#define PG_CLEAR                  15
#define PG_REFRESH                16
#define PG_RESET_COLORS           17

#define PG_FOREGROUND             18	/* Property Grid Attributes */
#define PG_BACKGROUND             19
#define PG_LINE_COLOR             20
#define PG_HELP_FOREGROUND        21
#define PG_HELP_BACKGROUND        22
#define PG_CATEGORY_FOREGROUND    23
#define PG_READONLY_FOREGROUND    24
#define PG_SORT                   25
#define PG_SHOW_TOOLBAR           26
#define PG_SHOW_HELP              27
#define PG_HELP_HEIGHT            28
#define PG_VIEW_DIVIDER           29
#define PG_FONT                   30
#define PG_VERBS                  31
#define PG_VERBS_HEIGHT           32

#define PG_NODE_MODIFY_NODE       100	/* Property Grid Node Actions */
#define PG_NODE_SELECT_NODE       101
#define PG_NODE_DELETE_NODE       102
#define PG_NODE_EXPAND_NODE       103
#define PG_NODE_COLLAPSE_NODE     104

#define PG_NODE_PROPERTY          105	/* Property Grid Node Attributes */
#define PG_NODE_CATEGORY          106
#define PG_NODE_TYPE              107
#define PG_NODE_LABEL             108
#define PG_NODE_DESCRIPTION       109
#define PG_NODE_CURRENT_VALUE     110
#define PG_NODE_POSSIBLE_VALUES   111
#define PG_NODE_VALUE_FORMAT      112
#define PG_NODE_ICON              113
#define PG_NODE_MASK              114
#define PG_NODE_READONLY          115
#define PG_NODE_ELLIPSIS          116
#define PG_NODE_EDIT_IN_PLACE     117
#define PG_NODE_EXPAND            118
#define PG_NODE_SELECT            119
#define PG_EXPAND_ALL             120
#define PG_COLLAPSE_ALL           121

#define PG_EVENT_SELECT           0	/* Property Grid Events */
#define PG_EVENT_RIGHT_CLICK      1
#define PG_EVENT_KEY_PRESSED      2
#define PG_EVENT_CLOSED           3
#define PG_EVENT_NODE_EXPANDED    4
#define PG_EVENT_NODE_COLLAPSED   5
#define PG_EVENT_EDITED           6
#define PG_EVENT_EDIT             7
#define PG_EVENT_DOUBLE_CLICK     8
#define PG_EVENT_SORTED           9
#define PG_EVENT_VERB            10

#define PG_SORT_NONE              0	/* Property Grid Enums */
#define PG_SORT_ALPHABETICAL      1
#define PG_SORT_CATEGORIZED       2

#define PG_NODE_TYPE_CATEGORY     0	/* Property Grid Node Enums */
#define PG_NODE_TYPE_TEXT         1
#define PG_NODE_TYPE_INTEGER      2
#define PG_NODE_TYPE_BOOLEAN      3
#define PG_NODE_TYPE_COLOR        4
#define PG_NODE_TYPE_DATE         5
#define PG_NODE_TYPE_FLOAT        6
/* End Autogenerated Code */

#define NO_INT_VALUE -536870912 // Most-negative-fixnum

class G2PropGrid : public CXTPPropertyGrid
{
public:
  G2pointer m_g2pointer;

private:
  int m_handle;			// Control handle (G2-assigned)
  UINT m_suppressEvents;	// Don't send a G2 event
  UINT m_lastSelectedID;	// Used to eliminate redundant selection notifications.

public:
  DECLARE_DYNCREATE(G2PropGrid)
  G2PropGrid(int handle = 0);
  virtual ~G2PropGrid();
  virtual int GetHandle() {return m_handle;}

  CXTPPropertyGridItem *AddItem(int id, int type, LPCTSTR caption, CXTPPropertyGridItem *pParent,
				LPCTSTR strValue, int intValue, double floatValue);
  int GetIntegerValue(CXTPPropertyGridItem* pItem);
  void SetSort(int code);
  int GetSort();
  void SetItemFlag(CXTPPropertyGridItem *pItem, UINT flag, BOOL value);
  void DoCollapseExpand(BOOL expand, CXTPPropertyGridItem* pItem = NULL);

public:
  afx_msg void OnSetFocus(CWnd* pOldWnd);
  afx_msg void OnSize(UINT nType, int cx, int cy);
  afx_msg void OnDestroy();

public:
  BOOL OnPropertyGridNotify(int eventCode, CXTPPropertyGridItem* pItem);
  void SendEvent(int eventCode, CXTPPropertyGridItem *pItem, 
		 LPCWSTR string = NULL, 
		 int intValue = NO_INT_VALUE);
  void RefreshItem(CXTPPropertyGridItem *pItem, BOOL captionToo = FALSE);
  LRESULT OnIconChanged(WPARAM changed_icon, LPARAM iconID);
  void SetNodeValue(CXTPPropertyGridItem* pItem, LPCTSTR strValue, int intValue, double floatValue);
  void SetNodeIcon(CXTPPropertyGridItem* pItem, int icon);
  void SetNodeFormat(CXTPPropertyGridItem* pItem, LPCTSTR fmt);
  virtual void OnVerbClick(int nIndex, CPoint pt);

public:
  COLORREF GetLineColor();
  COLORREF GetBackColor();
  COLORREF GetForeColor();
  COLORREF GetCategoryForeColor();
  COLORREF GetReadOnlyForeColor();

  void SetHelpBackColor(COLORREF color);
  void SetHelpForeColor(COLORREF color);
  void SetLineColor(COLORREF color);
  void SetBackColor(COLORREF color);
  void SetForeColor(COLORREF color);
  void SetCategoryForeColor(COLORREF color);
  void SetReadOnlyForeColor(COLORREF color);

protected:
  virtual void PostNcDestroy();
  DECLARE_MESSAGE_MAP()
};

// Color Type, with prettier popup
class CCustomItemColor: public CXTPPropertyGridItemColor
{
public:
  CCustomItemColor(CString strCaption,  COLORREF clr = 0);

protected:
  virtual void OnInplaceButtonDown();

public:
  COLORREF StringToRGB(CString str)
  {	
    TCHAR *stopstring;
    int nValue = _tcstoul((LPCTSTR)str, &stopstring, 16);
    return RGB(GetBValue(nValue), GetGValue(nValue), GetRValue(nValue));
  }

  CString RGBToString(COLORREF clr)
  {
    CString str;
    str.Format(_T("%2X%2X%2X"), GetRValue(clr), GetGValue(clr), GetBValue(clr));
    str.Replace(_T(" "), _T("0"));
    return str;
  }

  void SetValue(CString strValue)
  {	
    SetColor(StringToRGB(strValue));
  }

  void SetColor(COLORREF clr)
  {
    m_clrValue = clr;
    CXTPPropertyGridItem::SetValue(RGBToString(clr));
  }
};

// Text type with optional icon
class CCustomItemTextWithIcon : public CXTPPropertyGridItem
{
public:
  CCustomItemTextWithIcon(CString strCaption, LPCTSTR strValue);
  void SetIcon(int new_icon) {m_icon = new_icon;}

protected:
  virtual BOOL OnDrawItemValue(CDC& dc, CRect rcValue);

public:
  int m_icon;			// G2 native icon handle
  BOOL m_stretch;		// Whether to stretch or clip when drawing
  BOOL m_frame;			// Whether to draw frame around image.
};
