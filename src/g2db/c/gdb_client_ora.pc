/* -*- Mode: C -*- */
/*================================================================
 *  GDB_CLIENT_ORA.PC    - GDB Layer-3  (Oracle-7/8/9)    [source]
 *================================================================
 *
 * Author: Robert J. Franceschini
 *
 *    - LAYER-3 = gdb_client_inter_ora.c + gdb_client_ora.pc
 *    - performs all calls to database
 *    - extracts data from SQLDA and inserts into GENDA
 *    - upper layers should check status
 *    - only layer requiring pre-compilation (ESQL)
 *
 *================================================================*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#if defined(HYBRID)
#include <sqlcpr.h>
#endif
#include "gdb_client_ora.h"
#include "gdb_globals.h"
#include "gdb_messages.h"
#include <gsi_main.h>
#include "gdb_context.h"
#include "gdb_utils.h"
#include "gdb_common.h"
#include "gdb_g2_client.h"

#ifdef WIN32
    #if iDBVER == 7
        #include <sqlproto.h>
    #else
        #include <sqlcpr.h>
    #endif
#endif

#include <limits.h>


#define LAYER LAYER3

#define F_SQL_SETUP                   _T("SQL_SETUP")
#define F_SQL_CONNECT                 _T("SQL_CONNECT")
#define F_SQL_ALLOC_DESCRIPTORS       _T("SQL_ALLOC_DESCRIPTORS")
#define F_SQL_PREPARE                 _T("SQL_PREPARE")
#define F_SQL_DESCRIBE_INPUT          _T("SQL_DESCRIBE_INPUT")
#define F_SQL_DESCRIBE_OUTPUT         _T("SQL_DESCRIBE_OUTPUT")
#define F_SQL_DEALLOC_DESCRIPTORS     _T("SQL_DEALLOC_DESCRIPTORS")
#define F_SQL_RELEASE_BIND            _T("SQL_RELEASE_BIND")
#define F_SQL_DISCONNECT              _T("SQL_DISCONNECT")
#define F_SQL_EXEC_SQL                _T("SQL_EXEC_SQL")
#define F_SQL_EXEC_DYNAMIC_SQL        _T("SQL_EXEC_DYNAMIC_SQL")
#define F_SQL_COMMIT                  _T("SQL_COMMIT")
#define F_SQL_ROLLBACK                _T("SQL_ROLLBACK")
#define F_SQL_EXEC_STORED_PROC        _T("SQL_EXEC_STORED_PROC")
#define F_SQL_EXEC_STORED_PROC_RETURN _T("SQL_EXEC_STORED_PROC_RETURN")
#define F_SQL_PING_DB                 _T("SQL_PING_DB")
#define F_SQL_EXEC_SQL_OBJ            _T("SQL_EXEC_SQL_OBJ")

/*** precompiler options ***

+ Precompiler defs cannot be specified outside of functions in Oracle 7.3.3+.
  on Unix platforms. Therefore, must specify precompiler defs in makefile.
  This is enforced by providing a check in sql_setup.

+ NOTE::MaxOpenCursors must not exceed the Oracle Db initialization parameter
  OPEN_CURSORS (should be OPEN_CURSORS - 6) or an exceeded max open cursors
  error will result.

 ***************************/

/*
Initial size of cursor cache. Note: By default, Oracle MAX_OPEN_CURSORS is set to
10. Therefore, may get errors if try to exceed 10 without redefinition in server

MAXOPENCURSORS=44
*/

/*** cursor names must be unique across all connections in order to avoid conflict ***/
/*** when using these options ***/

/*
By default, all cursors persist in the cursor cache unless explicitly marked for
removal. This is done by calling sql_close_cursor_release which contains the
precompiler switches hold_cursor=no, release_cursor=yes
*/

/*
Initially maintain cursors in cache and do not remove them following a close cursor.

HOLD_CURSOR=YES ;
RELEASE_CURSOR=NO ;
*/

EXEC SQL INCLUDE SQLCA ;
EXEC SQL INCLUDE SQLDA ;

/*** data type coersion ***/
extern SQLDA *sqlald();   /* for alloc bind memory */
extern void   sqlnul();   /* to clear null bit     */
extern void   sqlpr2();   /* precision & scale     */

EXEC SQL BEGIN DECLARE SECTION ;
    varchar     *ora_sql_stmt;
    varchar      connect_name[5];  /* DBxxx = MUST BE GLOBAL */
    int          array_size;       /* for array fetching */
EXEC SQL END DECLARE SECTION ;

/* prototypes */
extern void dump_descriptor() ;

/* extern globals */
extern CONTEXT_INFO context[MAX_GDB_CONTEXTS] ;
extern SQLDA_PTRS *sqlda_ptrs[MAX_GDB_CONTEXTS] ;

extern long  debug ;
extern long  max_col_array_size ;

/* globals */
long    SQLCODE;  /* required for ANSI mode */
gsi_int context_num ;


/*======================================================================
  WARNING::connect_name must be defined to the current context prior to
  executing ANY EXEC SQL statement, whether the statement explicitly
  uses the connect_name or not. Connect_name is used internally and is
  referenced within the precompiler generated C code.
 ======================================================================*/

/*======================================================================
  sql_setup
    - establish mapping and initial setup to esql variables and
      structures used by all layers.
 ======================================================================*/
long sql_setup(void)
{
    context_num = gsi_current_context() ;

#if (!defined(MAXOPENCURSORS) || !defined(HOLD_CURSOR) || !defined(RELEASE_CURSOR))
    printf("\n*****************************************************\n") ;
    printf(" MUST DEFINE PREPROCESSOR DEFINITIONS: MAXOPENCURSORS, \n") ;
    printf(" HOLD_CURSOR, AND RELEASE_CURSOR\n") ;
    printf("*****************************************************\n\n") ;
    exit(0) ;
#endif

    if (debug & DBG1)
        iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_SETUP);

    /*** NOTHING REQUIRED FOR ORACLE ***/

    EXEC ORACLE OPTION(HOLD_CURSOR=YES) ;
    EXEC ORACLE OPTION(RELEASE_CURSOR=NO) ;

    return GDB_SUCCESS ;
}


/*======================================================================
  sql_poll_check
    - called each time through gsi run-loop.
    - called outside of a context
 ======================================================================*/
long sql_poll_check(void)
{
    /*** NOTHING REQUIRED FOR ORACLE ***/

    return GDB_SUCCESS ;
}


/*======================================================================
  sql_connect
    - establish connection to database

    Arguments:
    - db_user: database username
    - db_pass: database password
    - db_conn_str: database connect string
 ======================================================================*/
long sql_connect(GDB_CHAR *db_user, GDB_CHAR *db_pass, GDB_CHAR *db_conn_str)
{
#ifndef iDBVER
    #error Major Database Integer Version (iDBVER) not defined.
#endif
    unsigned short  len ;

    EXEC SQL BEGIN DECLARE SECTION ;
        varchar      *user_pass ;
        varchar      *conn_str ;
        varchar       tmp_str[128] ;
    EXEC SQL END DECLARE SECTION ;

    context_num = gsi_current_context() ;

    if (debug & DBG1)
        iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_CONNECT);
    /** username & password **/
    if (db_user == NULL)
    {
        iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d", ENOUSER);
        return GDB_ERROR ;
    }
    if (db_pass == NULL)
    {
        iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d", ENOPASS);
        return GDB_ERROR ;
    }
    len = wcslen(db_user) + wcslen(db_pass) + 1;
    if ((user_pass = XCALLOC(1, sizeof(short)+1+sizeof(GDB_CHAR)*len)) == NULL) 
    {
        iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM);
        return GDB_ERROR ;
    }
    sprintf(user_pass->arr, "%s/%s", db_user, db_pass);

    /* Need extra char for user/pass delimiter '/' e.g. scott/tiger
     If db_user is '/' then user is attempting ops$login. By setting the
     len to 1 only the 1st char is used by Oracle, all other chars are
     ignored. */
    user_pass->len = len ;
    if (*db_user == '/')
        user_pass->len = 1 ;

    /** set context connection name **/
    sprintf(connect_name.arr, "DB%d", context_num);
    connect_name.len = strlen(connect_name.arr);

    /** connect str **/
    if (db_conn_str == NULL)
    {
        iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d", ENOCONS) ;
        XFREE(user_pass) ;
        return GDB_ERROR ;
    }

    /* This check will allow TWO_TASK connect support */
    if (!_wcsicmp(db_conn_str, _T("NONE")))
        *db_conn_str = '\0';

    len = wcslen(db_conn_str) ;
    if ((conn_str = XCALLOC(1, sizeof(short)+1+sizeof(GDB_CHAR)*len)) == NULL) 
    {
        iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
        XFREE(user_pass) ;
        return GDB_ERROR ;
    }
    wcscpy(conn_str->arr, db_conn_str) ;
    conn_str->len = len ;

    /* to test for connection */
    /* GENSYMCID-1717: "select username from users_users where rownum < 0" issue with Oracle Bridge */
    wcscpy(tmp_str.arr, _T("SELECT SYSDATE FROM DUAL"));

    tmp_str.len = wcslen(tmp_str.arr) ;

    EXEC ORACLE OPTION(HOLD_CURSOR=NO) ;
    EXEC ORACLE OPTION(RELEASE_CURSOR=YES) ;

    EXEC SQL AT :connect_name DECLARE ps1 STATEMENT ;
    EXEC SQL AT :connect_name PREPARE ps1 FROM :tmp_str ;

    EXEC ORACLE OPTION(HOLD_CURSOR=YES) ;
    EXEC ORACLE OPTION(RELEASE_CURSOR=NO) ;

    if (sqlca.sqlcode < 0)
    {
        EXEC SQL CONNECT :user_pass AT :connect_name USING :conn_str ;

        /* if already connected, issuing a second connect will cause a disconnect.
           Therefore, must perform a "third" connect */

        if (sqlca.sqlcode == DB_ALREADY_CONNECTED)
        {
          /* Due to a bug in 'sqllib', which is fixed in 7.1.4, the following
             2 rollbacks are required to achive proper messaging if a db
             is shutdown while a bridge is connected. This will prevent the
             'already connected' code from being returned even though the
             connection does not exist. */

            EXEC SQL AT :connect_name ROLLBACK WORK RELEASE ;
            EXEC SQL AT :connect_name ROLLBACK WORK RELEASE ;

            if (sqlca.sqlcode == -3113 || sqlca.sqlcode == -3114)
            {
                iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EBADCON) ;
                XFREE (user_pass) ;
                XFREE (conn_str) ;
                return GDB_EXT_ERROR ;
            }
            else
            {
                EXEC SQL CONNECT :user_pass AT :connect_name USING :conn_str ;

                XFREE (user_pass) ;
                XFREE (conn_str) ;

                if (sqlca.sqlcode == DB_ALREADY_CONNECTED)
                {
                    iomsg(DBG2, LAYER, TRUE, TRUE, NULL, TRUE, "%d", IDBCONA) ;
                    return GDB_SUCCESS ;
                }
                else
                {
                    if (!sqlca.sqlcode)
                    {
                        iomsg(DBG2, LAYER, TRUE, TRUE, NULL, TRUE, "%d", IDBCONE) ;
                        return GDB_SUCCESS ;
                    }
                    else
                    {
                        iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EBADCON) ;
                        return GDB_EXT_ERROR ;
                    }
                }
            }
        } /* already connected section */
    } /* if */
    else
    {
        XFREE (user_pass) ;
        XFREE (conn_str) ;
        iomsg(DBG2, LAYER, TRUE, TRUE, NULL, TRUE, "%d", IDBCONA) ;
        return GDB_SUCCESS ;
    }

    XFREE (user_pass) ;
    XFREE (conn_str) ;

#ifdef ORA09
    if (sqlca.sqlcode == -1)
        sqlca.sqlcode = 0 ;
#endif
    if (!sqlca.sqlcode)
    {
        iomsg(DBG2, LAYER, TRUE, TRUE, NULL, TRUE, "%d", IDBCONE) ;
        return GDB_SUCCESS ;
    }

    iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EBADCON) ;
    return GDB_EXT_ERROR ;
}


/*======================================================================
  sql_alloc_descriptors
    - alloc select descriptors (db) and corresponding select_ptr (bridge)
    - store select_ptr in global sqlda_ptrs array

    Arguments:
    - shandle: statement handle
    - action: SELECT, BIND
 ======================================================================*/

long sql_alloc_descriptors(long shandle, long action)
{
  SQLDA   *select_ptr ;
  SQLDA   *bind_ptr ;

  context_num = gsi_current_context() ;

  if (debug & DBG1) {
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_ALLOC_DESCRIPTORS);
  }

  if (shandle == 0) return GDB_ERROR ;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  /********
   sqlald:
     p1 = max # of array elements in each variable in the descriptor. In other
          words, its the max # of bind vars or select vars in the SQL stmt.
     p2 = max length of strings used to hold the names of select or bind vars.
          The max len of column names in Oracle is 30.
     p3 = max length of strings used to hold the names of indicator vars.
          The max len of ind names in Oracle is 30
   ********/

  if (action == BIND) 
  {
    if ((bind_ptr = sqlald(context[context_num].max_bind_vars, context[context_num].max_bind_name_len, context[context_num].max_bind_name_len)) == NULL) 
    {
      iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%d", EALDESC) ;
      iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
      return GDB_ERROR ;
    }
    /*** store bind addr in SQLDA_PTRS array ***/
    if (sqlda_ptrs[context_num] != NULL)
      sqlda_ptrs[context_num][shandle].bptr = bind_ptr ;
    else 
    {
      iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Could NOT store bind pointer in SQLDA_PTRS"));

      iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
      return GDB_ERROR ;
    }

    /*** alloc (ARRAY) buffers & load SQLDA with default info ***/
    bind_ptr->N = context[context_num].max_bind_vars;       /* max number of bind items */
    iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Input (BIND) Descriptor Memory Allocated")) ;
    return GDB_SUCCESS ;
  }


  if (action == SELECT) 
  {
    if ((select_ptr = sqlald(max_col_array_size, context[context_num].max_bind_name_len, 0)) == NULL) 
    {
      iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%d", EALDESC) ;
      iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
      return GDB_ERROR ;
    }
    /*** store bind & select addr in SQLDA_PTRS array ***/
    if (sqlda_ptrs[context_num] != NULL)
      sqlda_ptrs[context_num][shandle].sptr = select_ptr ;
    else 
    {
      iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Could NOT store select pointer in SQLDA_PTRS"));

      iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
      return GDB_ERROR ;
    }

    /*** alloc (ARRAY) buffers & load SQLDA with default info ***/
    select_ptr->N = /*context[context_num].max_ncols*/max_col_array_size;       /* max number of select items */

    iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Output (SELECT) Descriptor Memory Allocated"));

    return GDB_SUCCESS ;
  }

  return GDB_SUCCESS ;
}


/*======================================================================
  sql_prepare
    - perform a database 'prepare' of the sql statement
    - generate a stmt_id_name & store in SQLDA_PTRS

    Arguments:
    - shandle: statement handle
    - stmt_id: statement id created by the prepare
    - sql_str: sql statement
 ======================================================================*/

long sql_prepare(long shandle, long *stmt_id, GDB_CHAR *sql_str)
{
  unsigned short  len ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_PREPARE);

  if (shandle == 0) return GDB_ERROR ;
  if (*stmt_id != 0) *stmt_id = 0 ;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  len = wcslen(sql_str);

  if ((ora_sql_stmt = XCALLOC(1, sizeof(short)+1+sizeof(GDB_CHAR)*len)) == NULL) 
  {
    iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Could not alloc mem for ora_sql_stmt"));

    iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
    return GDB_ERROR ;
  }
  wcscpy((GDB_CHAR *)ora_sql_stmt->arr, sql_str);
  ora_sql_stmt->len = len ;

  switch (shandle) 
  {
    case   1 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_1 STATEMENT;
      EXEC SQL PREPARE prep_stmt_1 FROM :ora_sql_stmt;
      break ;
    case   2 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_2 STATEMENT;
      EXEC SQL PREPARE prep_stmt_2 FROM :ora_sql_stmt;
      break ;
    case   3 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_3 STATEMENT;
      EXEC SQL PREPARE prep_stmt_3 FROM :ora_sql_stmt;
      break ;
    case   4 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_4 STATEMENT;
      EXEC SQL PREPARE prep_stmt_4 FROM :ora_sql_stmt;
      break ;
    case   5 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_5 STATEMENT;
      EXEC SQL PREPARE prep_stmt_5 FROM :ora_sql_stmt;
      break ;
    case   6 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_6 STATEMENT;
      EXEC SQL PREPARE prep_stmt_6 FROM :ora_sql_stmt;
      break ;
    case   7 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_7 STATEMENT;
      EXEC SQL PREPARE prep_stmt_7 FROM :ora_sql_stmt;
      break ;
    case   8 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_8 STATEMENT;
      EXEC SQL PREPARE prep_stmt_8 FROM :ora_sql_stmt;
      break ;
    case   9 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_9 STATEMENT;
      EXEC SQL PREPARE prep_stmt_9 FROM :ora_sql_stmt;
      break ;
    case  10 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_10 STATEMENT;
      EXEC SQL PREPARE prep_stmt_10 FROM :ora_sql_stmt;
      break ;
    case  11 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_11 STATEMENT;
      EXEC SQL PREPARE prep_stmt_11 FROM :ora_sql_stmt;
      break ;
    case  12 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_12 STATEMENT;
      EXEC SQL PREPARE prep_stmt_12 FROM :ora_sql_stmt;
      break ;
    case  13 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_13 STATEMENT;
      EXEC SQL PREPARE prep_stmt_13 FROM :ora_sql_stmt;
      break ;
    case  14 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_14 STATEMENT;
      EXEC SQL PREPARE prep_stmt_14 FROM :ora_sql_stmt;
      break ;
    case  15 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_15 STATEMENT;
      EXEC SQL PREPARE prep_stmt_15 FROM :ora_sql_stmt;
      break ;
    case  16 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_16 STATEMENT;
      EXEC SQL PREPARE prep_stmt_16 FROM :ora_sql_stmt;
      break ;
    case  17 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_17 STATEMENT;
      EXEC SQL PREPARE prep_stmt_17 FROM :ora_sql_stmt;
      break ;
    case  18 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_18 STATEMENT;
      EXEC SQL PREPARE prep_stmt_18 FROM :ora_sql_stmt;
      break ;
    case  19 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_19 STATEMENT;
      EXEC SQL PREPARE prep_stmt_19 FROM :ora_sql_stmt;
      break ;
    case  20 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_20 STATEMENT;
      EXEC SQL PREPARE prep_stmt_20 FROM :ora_sql_stmt;
      break ;
    case  21 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_21 STATEMENT;
      EXEC SQL PREPARE prep_stmt_21 FROM :ora_sql_stmt;
      break ;
    case  22 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_22 STATEMENT;
      EXEC SQL PREPARE prep_stmt_22 FROM :ora_sql_stmt;
      break ;
    case  23 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_23 STATEMENT;
      EXEC SQL PREPARE prep_stmt_23 FROM :ora_sql_stmt;
      break ;
    case  24 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_24 STATEMENT;
      EXEC SQL PREPARE prep_stmt_24 FROM :ora_sql_stmt;
      break ;
    case  25 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_25 STATEMENT;
      EXEC SQL PREPARE prep_stmt_25 FROM :ora_sql_stmt;
      break ;
    case  26 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_26 STATEMENT;
      EXEC SQL PREPARE prep_stmt_26 FROM :ora_sql_stmt;
      break ;
    case  27 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_27 STATEMENT;
      EXEC SQL PREPARE prep_stmt_27 FROM :ora_sql_stmt;
      break ;
    case  28 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_28 STATEMENT;
      EXEC SQL PREPARE prep_stmt_28 FROM :ora_sql_stmt;
      break ;
    case  29 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_29 STATEMENT;
      EXEC SQL PREPARE prep_stmt_29 FROM :ora_sql_stmt;
      break ;
    case  30 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_30 STATEMENT;
      EXEC SQL PREPARE prep_stmt_30 FROM :ora_sql_stmt;
      break ;
    case  31 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_31 STATEMENT;
      EXEC SQL PREPARE prep_stmt_31 FROM :ora_sql_stmt;
      break ;
    case  32 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_32 STATEMENT;
      EXEC SQL PREPARE prep_stmt_32 FROM :ora_sql_stmt;
      break ;
    case  33 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_33 STATEMENT;
      EXEC SQL PREPARE prep_stmt_33 FROM :ora_sql_stmt;
      break ;
    case  34 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_34 STATEMENT;
      EXEC SQL PREPARE prep_stmt_34 FROM :ora_sql_stmt;
      break ;
    case  35 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_35 STATEMENT;
      EXEC SQL PREPARE prep_stmt_35 FROM :ora_sql_stmt;
      break ;
    case  36 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_36 STATEMENT;
      EXEC SQL PREPARE prep_stmt_36 FROM :ora_sql_stmt;
      break ;
    case  37 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_37 STATEMENT;
      EXEC SQL PREPARE prep_stmt_37 FROM :ora_sql_stmt;
      break ;
    case  38 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_38 STATEMENT;
      EXEC SQL PREPARE prep_stmt_38 FROM :ora_sql_stmt;
      break ;
    case  39 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_39 STATEMENT;
      EXEC SQL PREPARE prep_stmt_39 FROM :ora_sql_stmt;
      break ;
    case  40 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_40 STATEMENT;
      EXEC SQL PREPARE prep_stmt_40 FROM :ora_sql_stmt;
      break ;
    case  41 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_41 STATEMENT;
      EXEC SQL PREPARE prep_stmt_41 FROM :ora_sql_stmt;
      break ;
    case  42 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_42 STATEMENT;
      EXEC SQL PREPARE prep_stmt_42 FROM :ora_sql_stmt;
      break ;
    case  43 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_43 STATEMENT;
      EXEC SQL PREPARE prep_stmt_43 FROM :ora_sql_stmt;
      break ;
    case  44 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_44 STATEMENT;
      EXEC SQL PREPARE prep_stmt_44 FROM :ora_sql_stmt;
      break ;
    case  45 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_45 STATEMENT;
      EXEC SQL PREPARE prep_stmt_45 FROM :ora_sql_stmt;
      break ;
    case  46 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_46 STATEMENT;
      EXEC SQL PREPARE prep_stmt_46 FROM :ora_sql_stmt;
      break ;
    case  47 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_47 STATEMENT;
      EXEC SQL PREPARE prep_stmt_47 FROM :ora_sql_stmt;
      break ;
    case  48 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_48 STATEMENT;
      EXEC SQL PREPARE prep_stmt_48 FROM :ora_sql_stmt;
      break ;
    case  49 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_49 STATEMENT;
      EXEC SQL PREPARE prep_stmt_49 FROM :ora_sql_stmt;
      break ;
    case  50 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_50 STATEMENT;
      EXEC SQL PREPARE prep_stmt_50 FROM :ora_sql_stmt;
      break ;
    case  51 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_51 STATEMENT;
      EXEC SQL PREPARE prep_stmt_51 FROM :ora_sql_stmt;
      break ;
    case  52 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_52 STATEMENT;
      EXEC SQL PREPARE prep_stmt_52 FROM :ora_sql_stmt;
      break ;
    case  53 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_53 STATEMENT;
      EXEC SQL PREPARE prep_stmt_53 FROM :ora_sql_stmt;
      break ;
    case  54 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_54 STATEMENT;
      EXEC SQL PREPARE prep_stmt_54 FROM :ora_sql_stmt;
      break ;
    case  55 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_55 STATEMENT;
      EXEC SQL PREPARE prep_stmt_55 FROM :ora_sql_stmt;
      break ;
    case  56 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_56 STATEMENT;
      EXEC SQL PREPARE prep_stmt_56 FROM :ora_sql_stmt;
      break ;
    case  57 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_57 STATEMENT;
      EXEC SQL PREPARE prep_stmt_57 FROM :ora_sql_stmt;
      break ;
    case  58 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_58 STATEMENT;
      EXEC SQL PREPARE prep_stmt_58 FROM :ora_sql_stmt;
      break ;
    case  59 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_59 STATEMENT;
      EXEC SQL PREPARE prep_stmt_59 FROM :ora_sql_stmt;
      break ;
    case  60 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_60 STATEMENT;
      EXEC SQL PREPARE prep_stmt_60 FROM :ora_sql_stmt;
      break ;
    case  61 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_61 STATEMENT;
      EXEC SQL PREPARE prep_stmt_61 FROM :ora_sql_stmt;
      break ;
    case  62 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_62 STATEMENT;
      EXEC SQL PREPARE prep_stmt_62 FROM :ora_sql_stmt;
      break ;
    case  63 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_63 STATEMENT;
      EXEC SQL PREPARE prep_stmt_63 FROM :ora_sql_stmt;
      break ;
    case  64 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_64 STATEMENT;
      EXEC SQL PREPARE prep_stmt_64 FROM :ora_sql_stmt;
      break ;
    case  65 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_65 STATEMENT;
      EXEC SQL PREPARE prep_stmt_65 FROM :ora_sql_stmt;
      break ;
    case  66 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_66 STATEMENT;
      EXEC SQL PREPARE prep_stmt_66 FROM :ora_sql_stmt;
      break ;
    case  67 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_67 STATEMENT;
      EXEC SQL PREPARE prep_stmt_67 FROM :ora_sql_stmt;
      break ;
    case  68 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_68 STATEMENT;
      EXEC SQL PREPARE prep_stmt_68 FROM :ora_sql_stmt;
      break ;
    case  69 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_69 STATEMENT;
      EXEC SQL PREPARE prep_stmt_69 FROM :ora_sql_stmt;
      break ;
    case  70 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_70 STATEMENT;
      EXEC SQL PREPARE prep_stmt_70 FROM :ora_sql_stmt;
      break ;
    case  71 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_71 STATEMENT;
      EXEC SQL PREPARE prep_stmt_71 FROM :ora_sql_stmt;
      break ;
    case  72 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_72 STATEMENT;
      EXEC SQL PREPARE prep_stmt_72 FROM :ora_sql_stmt;
      break ;
    case  73 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_73 STATEMENT;
      EXEC SQL PREPARE prep_stmt_73 FROM :ora_sql_stmt;
      break ;
    case  74 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_74 STATEMENT;
      EXEC SQL PREPARE prep_stmt_74 FROM :ora_sql_stmt;
      break ;
    case  75 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_75 STATEMENT;
      EXEC SQL PREPARE prep_stmt_75 FROM :ora_sql_stmt;
      break ;
    case  76 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_76 STATEMENT;
      EXEC SQL PREPARE prep_stmt_76 FROM :ora_sql_stmt;
      break ;
    case  77 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_77 STATEMENT;
      EXEC SQL PREPARE prep_stmt_77 FROM :ora_sql_stmt;
      break ;
    case  78 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_78 STATEMENT;
      EXEC SQL PREPARE prep_stmt_78 FROM :ora_sql_stmt;
      break ;
    case  79 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_79 STATEMENT;
      EXEC SQL PREPARE prep_stmt_79 FROM :ora_sql_stmt;
      break ;
    case  80 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_80 STATEMENT;
      EXEC SQL PREPARE prep_stmt_80 FROM :ora_sql_stmt;
      break ;
    case  81 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_81 STATEMENT;
      EXEC SQL PREPARE prep_stmt_81 FROM :ora_sql_stmt;
      break ;
    case  82 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_82 STATEMENT;
      EXEC SQL PREPARE prep_stmt_82 FROM :ora_sql_stmt;
      break ;
    case  83 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_83 STATEMENT;
      EXEC SQL PREPARE prep_stmt_83 FROM :ora_sql_stmt;
      break ;
    case  84 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_84 STATEMENT;
      EXEC SQL PREPARE prep_stmt_84 FROM :ora_sql_stmt;
      break ;
    case  85 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_85 STATEMENT;
      EXEC SQL PREPARE prep_stmt_85 FROM :ora_sql_stmt;
      break ;
    case  86 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_86 STATEMENT;
      EXEC SQL PREPARE prep_stmt_86 FROM :ora_sql_stmt;
      break ;
    case  87 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_87 STATEMENT;
      EXEC SQL PREPARE prep_stmt_87 FROM :ora_sql_stmt;
      break ;
    case  88 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_88 STATEMENT;
      EXEC SQL PREPARE prep_stmt_88 FROM :ora_sql_stmt;
      break ;
    case  89 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_89 STATEMENT;
      EXEC SQL PREPARE prep_stmt_89 FROM :ora_sql_stmt;
      break ;
    case  90 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_90 STATEMENT;
      EXEC SQL PREPARE prep_stmt_90 FROM :ora_sql_stmt;
      break ;
    case  91 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_91 STATEMENT;
      EXEC SQL PREPARE prep_stmt_91 FROM :ora_sql_stmt;
      break ;
    case  92 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_92 STATEMENT;
      EXEC SQL PREPARE prep_stmt_92 FROM :ora_sql_stmt;
      break ;
    case  93 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_93 STATEMENT;
      EXEC SQL PREPARE prep_stmt_93 FROM :ora_sql_stmt;
      break ;
    case  94 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_94 STATEMENT;
      EXEC SQL PREPARE prep_stmt_94 FROM :ora_sql_stmt;
      break ;
    case  95 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_95 STATEMENT;
      EXEC SQL PREPARE prep_stmt_95 FROM :ora_sql_stmt;
      break ;
    case  96 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_96 STATEMENT;
      EXEC SQL PREPARE prep_stmt_96 FROM :ora_sql_stmt;
      break ;
    case  97 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_97 STATEMENT;
      EXEC SQL PREPARE prep_stmt_97 FROM :ora_sql_stmt;
      break ;
    case  98 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_98 STATEMENT;
      EXEC SQL PREPARE prep_stmt_98 FROM :ora_sql_stmt;
      break ;
    case  99 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_99 STATEMENT;
      EXEC SQL PREPARE prep_stmt_99 FROM :ora_sql_stmt;
      break ;
    case 100 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_100 STATEMENT;
      EXEC SQL PREPARE prep_stmt_100 FROM :ora_sql_stmt;
      break ;
#ifndef SMSW
    case 101 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_101 STATEMENT;
      EXEC SQL PREPARE prep_stmt_101 FROM :ora_sql_stmt;
      break ;
    case 102 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_102 STATEMENT;
      EXEC SQL PREPARE prep_stmt_102 FROM :ora_sql_stmt;
      break ;
    case 103 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_103 STATEMENT;
      EXEC SQL PREPARE prep_stmt_103 FROM :ora_sql_stmt;
      break ;
    case 104 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_104 STATEMENT;
      EXEC SQL PREPARE prep_stmt_104 FROM :ora_sql_stmt;
      break ;
    case 105 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_105 STATEMENT;
      EXEC SQL PREPARE prep_stmt_105 FROM :ora_sql_stmt;
      break ;
    case 106 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_106 STATEMENT;
      EXEC SQL PREPARE prep_stmt_106 FROM :ora_sql_stmt;
      break ;
    case 107 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_107 STATEMENT;
      EXEC SQL PREPARE prep_stmt_107 FROM :ora_sql_stmt;
      break ;
    case 108 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_108 STATEMENT;
      EXEC SQL PREPARE prep_stmt_108 FROM :ora_sql_stmt;
      break ;
    case 109 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_109 STATEMENT;
      EXEC SQL PREPARE prep_stmt_109 FROM :ora_sql_stmt;
      break ;
    case 110 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_110 STATEMENT;
      EXEC SQL PREPARE prep_stmt_110 FROM :ora_sql_stmt;
      break ;
    case 111 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_111 STATEMENT;
      EXEC SQL PREPARE prep_stmt_111 FROM :ora_sql_stmt;
      break ;
    case 112 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_112 STATEMENT;
      EXEC SQL PREPARE prep_stmt_112 FROM :ora_sql_stmt;
      break ;
    case 113 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_113 STATEMENT;
      EXEC SQL PREPARE prep_stmt_113 FROM :ora_sql_stmt;
      break ;
    case 114 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_114 STATEMENT;
      EXEC SQL PREPARE prep_stmt_114 FROM :ora_sql_stmt;
      break ;
    case 115 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_115 STATEMENT;
      EXEC SQL PREPARE prep_stmt_115 FROM :ora_sql_stmt;
      break ;
    case 116 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_116 STATEMENT;
      EXEC SQL PREPARE prep_stmt_116 FROM :ora_sql_stmt;
      break ;
    case 117 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_117 STATEMENT;
      EXEC SQL PREPARE prep_stmt_117 FROM :ora_sql_stmt;
      break ;
    case 118 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_118 STATEMENT;
      EXEC SQL PREPARE prep_stmt_118 FROM :ora_sql_stmt;
      break ;
    case 119 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_119 STATEMENT;
      EXEC SQL PREPARE prep_stmt_119 FROM :ora_sql_stmt;
      break ;
    case 120 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_120 STATEMENT;
      EXEC SQL PREPARE prep_stmt_120 FROM :ora_sql_stmt;
      break ;
    case 121 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_121 STATEMENT;
      EXEC SQL PREPARE prep_stmt_121 FROM :ora_sql_stmt;
      break ;
    case 122 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_122 STATEMENT;
      EXEC SQL PREPARE prep_stmt_122 FROM :ora_sql_stmt;
      break ;
    case 123 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_123 STATEMENT;
      EXEC SQL PREPARE prep_stmt_123 FROM :ora_sql_stmt;
      break ;
    case 124 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_124 STATEMENT;
      EXEC SQL PREPARE prep_stmt_124 FROM :ora_sql_stmt;
      break ;
    case 125 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_125 STATEMENT;
      EXEC SQL PREPARE prep_stmt_125 FROM :ora_sql_stmt;
      break ;
    case 126 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_126 STATEMENT;
      EXEC SQL PREPARE prep_stmt_126 FROM :ora_sql_stmt;
      break ;
    case 127 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_127 STATEMENT;
      EXEC SQL PREPARE prep_stmt_127 FROM :ora_sql_stmt;
      break ;
    case 128 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_128 STATEMENT;
      EXEC SQL PREPARE prep_stmt_128 FROM :ora_sql_stmt;
      break ;
    case 129 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_129 STATEMENT;
      EXEC SQL PREPARE prep_stmt_129 FROM :ora_sql_stmt;
      break ;
    case 130 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_130 STATEMENT;
      EXEC SQL PREPARE prep_stmt_130 FROM :ora_sql_stmt;
      break ;
    case 131 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_131 STATEMENT;
      EXEC SQL PREPARE prep_stmt_131 FROM :ora_sql_stmt;
      break ;
    case 132 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_132 STATEMENT;
      EXEC SQL PREPARE prep_stmt_132 FROM :ora_sql_stmt;
      break ;
    case 133 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_133 STATEMENT;
      EXEC SQL PREPARE prep_stmt_133 FROM :ora_sql_stmt;
      break ;
    case 134 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_134 STATEMENT;
      EXEC SQL PREPARE prep_stmt_134 FROM :ora_sql_stmt;
      break ;
    case 135 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_135 STATEMENT;
      EXEC SQL PREPARE prep_stmt_135 FROM :ora_sql_stmt;
      break ;
    case 136 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_136 STATEMENT;
      EXEC SQL PREPARE prep_stmt_136 FROM :ora_sql_stmt;
      break ;
    case 137 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_137 STATEMENT;
      EXEC SQL PREPARE prep_stmt_137 FROM :ora_sql_stmt;
      break ;
    case 138 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_138 STATEMENT;
      EXEC SQL PREPARE prep_stmt_138 FROM :ora_sql_stmt;
      break ;
    case 139 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_139 STATEMENT;
      EXEC SQL PREPARE prep_stmt_139 FROM :ora_sql_stmt;
      break ;
    case 140 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_140 STATEMENT;
      EXEC SQL PREPARE prep_stmt_140 FROM :ora_sql_stmt;
      break ;
    case 141 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_141 STATEMENT;
      EXEC SQL PREPARE prep_stmt_141 FROM :ora_sql_stmt;
      break ;
    case 142 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_142 STATEMENT;
      EXEC SQL PREPARE prep_stmt_142 FROM :ora_sql_stmt;
      break ;
    case 143 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_143 STATEMENT;
      EXEC SQL PREPARE prep_stmt_143 FROM :ora_sql_stmt;
      break ;
    case 144 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_144 STATEMENT;
      EXEC SQL PREPARE prep_stmt_144 FROM :ora_sql_stmt;
      break ;
    case 145 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_145 STATEMENT;
      EXEC SQL PREPARE prep_stmt_145 FROM :ora_sql_stmt;
      break ;
    case 146 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_146 STATEMENT;
      EXEC SQL PREPARE prep_stmt_146 FROM :ora_sql_stmt;
      break ;
    case 147 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_147 STATEMENT;
      EXEC SQL PREPARE prep_stmt_147 FROM :ora_sql_stmt;
      break ;
    case 148 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_148 STATEMENT;
      EXEC SQL PREPARE prep_stmt_148 FROM :ora_sql_stmt;
      break ;
    case 149 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_149 STATEMENT;
      EXEC SQL PREPARE prep_stmt_149 FROM :ora_sql_stmt;
      break ;
    case 150 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_150 STATEMENT;
      EXEC SQL PREPARE prep_stmt_150 FROM :ora_sql_stmt;
      break ;
    case 151 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_151 STATEMENT;
      EXEC SQL PREPARE prep_stmt_151 FROM :ora_sql_stmt;
      break ;
    case 152 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_152 STATEMENT;
      EXEC SQL PREPARE prep_stmt_152 FROM :ora_sql_stmt;
      break ;
    case 153 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_153 STATEMENT;
      EXEC SQL PREPARE prep_stmt_153 FROM :ora_sql_stmt;
      break ;
    case 154 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_154 STATEMENT;
      EXEC SQL PREPARE prep_stmt_154 FROM :ora_sql_stmt;
      break ;
    case 155 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_155 STATEMENT;
      EXEC SQL PREPARE prep_stmt_155 FROM :ora_sql_stmt;
      break ;
    case 156 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_156 STATEMENT;
      EXEC SQL PREPARE prep_stmt_156 FROM :ora_sql_stmt;
      break ;
    case 157 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_157 STATEMENT;
      EXEC SQL PREPARE prep_stmt_157 FROM :ora_sql_stmt;
      break ;
    case 158 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_158 STATEMENT;
      EXEC SQL PREPARE prep_stmt_158 FROM :ora_sql_stmt;
      break ;
    case 159 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_159 STATEMENT;
      EXEC SQL PREPARE prep_stmt_159 FROM :ora_sql_stmt;
      break ;
    case 160 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_160 STATEMENT;
      EXEC SQL PREPARE prep_stmt_160 FROM :ora_sql_stmt;
      break ;
    case 161 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_161 STATEMENT;
      EXEC SQL PREPARE prep_stmt_161 FROM :ora_sql_stmt;
      break ;
    case 162 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_162 STATEMENT;
      EXEC SQL PREPARE prep_stmt_162 FROM :ora_sql_stmt;
      break ;
    case 163 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_163 STATEMENT;
      EXEC SQL PREPARE prep_stmt_163 FROM :ora_sql_stmt;
      break ;
    case 164 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_164 STATEMENT;
      EXEC SQL PREPARE prep_stmt_164 FROM :ora_sql_stmt;
      break ;
    case 165 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_165 STATEMENT;
      EXEC SQL PREPARE prep_stmt_165 FROM :ora_sql_stmt;
      break ;
    case 166 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_166 STATEMENT;
      EXEC SQL PREPARE prep_stmt_166 FROM :ora_sql_stmt;
      break ;
    case 167 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_167 STATEMENT;
      EXEC SQL PREPARE prep_stmt_167 FROM :ora_sql_stmt;
      break ;
    case 168 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_168 STATEMENT;
      EXEC SQL PREPARE prep_stmt_168 FROM :ora_sql_stmt;
      break ;
    case 169 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_169 STATEMENT;
      EXEC SQL PREPARE prep_stmt_169 FROM :ora_sql_stmt;
      break ;
    case 170 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_170 STATEMENT;
      EXEC SQL PREPARE prep_stmt_170 FROM :ora_sql_stmt;
      break ;
    case 171 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_171 STATEMENT;
      EXEC SQL PREPARE prep_stmt_171 FROM :ora_sql_stmt;
      break ;
    case 172 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_172 STATEMENT;
      EXEC SQL PREPARE prep_stmt_172 FROM :ora_sql_stmt;
      break ;
    case 173 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_173 STATEMENT;
      EXEC SQL PREPARE prep_stmt_173 FROM :ora_sql_stmt;
      break ;
    case 174 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_174 STATEMENT;
      EXEC SQL PREPARE prep_stmt_174 FROM :ora_sql_stmt;
      break ;
    case 175 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_175 STATEMENT;
      EXEC SQL PREPARE prep_stmt_175 FROM :ora_sql_stmt;
      break ;
    case 176 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_176 STATEMENT;
      EXEC SQL PREPARE prep_stmt_176 FROM :ora_sql_stmt;
      break ;
    case 177 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_177 STATEMENT;
      EXEC SQL PREPARE prep_stmt_177 FROM :ora_sql_stmt;
      break ;
    case 178 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_178 STATEMENT;
      EXEC SQL PREPARE prep_stmt_178 FROM :ora_sql_stmt;
      break ;
    case 179 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_179 STATEMENT;
      EXEC SQL PREPARE prep_stmt_179 FROM :ora_sql_stmt;
      break ;
    case 180 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_180 STATEMENT;
      EXEC SQL PREPARE prep_stmt_180 FROM :ora_sql_stmt;
      break ;
    case 181 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_181 STATEMENT;
      EXEC SQL PREPARE prep_stmt_181 FROM :ora_sql_stmt;
      break ;
    case 182 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_182 STATEMENT;
      EXEC SQL PREPARE prep_stmt_182 FROM :ora_sql_stmt;
      break ;
    case 183 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_183 STATEMENT;
      EXEC SQL PREPARE prep_stmt_183 FROM :ora_sql_stmt;
      break ;
    case 184 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_184 STATEMENT;
      EXEC SQL PREPARE prep_stmt_184 FROM :ora_sql_stmt;
      break ;
    case 185 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_185 STATEMENT;
      EXEC SQL PREPARE prep_stmt_185 FROM :ora_sql_stmt;
      break ;
    case 186 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_186 STATEMENT;
      EXEC SQL PREPARE prep_stmt_186 FROM :ora_sql_stmt;
      break ;
    case 187 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_187 STATEMENT;
      EXEC SQL PREPARE prep_stmt_187 FROM :ora_sql_stmt;
      break ;
    case 188 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_188 STATEMENT;
      EXEC SQL PREPARE prep_stmt_188 FROM :ora_sql_stmt;
      break ;
    case 189 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_189 STATEMENT;
      EXEC SQL PREPARE prep_stmt_189 FROM :ora_sql_stmt;
      break ;
    case 190 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_190 STATEMENT;
      EXEC SQL PREPARE prep_stmt_190 FROM :ora_sql_stmt;
      break ;
    case 191 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_191 STATEMENT;
      EXEC SQL PREPARE prep_stmt_191 FROM :ora_sql_stmt;
      break ;
    case 192 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_192 STATEMENT;
      EXEC SQL PREPARE prep_stmt_192 FROM :ora_sql_stmt;
      break ;
    case 193 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_193 STATEMENT;
      EXEC SQL PREPARE prep_stmt_193 FROM :ora_sql_stmt;
      break ;
    case 194 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_194 STATEMENT;
      EXEC SQL PREPARE prep_stmt_194 FROM :ora_sql_stmt;
      break ;
    case 195 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_195 STATEMENT;
      EXEC SQL PREPARE prep_stmt_195 FROM :ora_sql_stmt;
      break ;
    case 196 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_196 STATEMENT;
      EXEC SQL PREPARE prep_stmt_196 FROM :ora_sql_stmt;
      break ;
    case 197 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_197 STATEMENT;
      EXEC SQL PREPARE prep_stmt_197 FROM :ora_sql_stmt;
      break ;
    case 198 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_198 STATEMENT;
      EXEC SQL PREPARE prep_stmt_198 FROM :ora_sql_stmt;
      break ;
    case 199 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_199 STATEMENT;
      EXEC SQL PREPARE prep_stmt_199 FROM :ora_sql_stmt;
      break ;
    case 200 :
      EXEC SQL AT :connect_name DECLARE prep_stmt_200 STATEMENT;
      EXEC SQL PREPARE prep_stmt_200 FROM :ora_sql_stmt;
      break ;
#endif
    default :

    iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for prepare"), shandle, context[context_num].max_cursors);

    return GDB_ERROR ;
  }

  XFREE (ora_sql_stmt) ;

  if (!sqlca.sqlcode)
    *stmt_id = 1;     /* until dynamic stmt_id's are supported by Oracle */

  return sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS ;
}


/*======================================================================
  sql_declare_cursor
    - declare a cursor in the database

    Arguments:
    - curs_name: cursor name
    - shandle: statement handle
    - stmt_id: statement id created from prepare
 ======================================================================*/

long sql_declare_cursor(GDB_CHAR *curs_name, long shandle, long *stmt_id)
{
  context_num = gsi_current_context() ;

  if (debug & DBG1) {
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%s"), _T("SQL_DECLARE_CURSOR: %"), curs_name);
  }

  if (shandle == 0) return GDB_ERROR ;

  /* since Oracle cursor names must be hardcoded, modify the
     default cursor name in GENDA */
  if (curs_name != NULL) {
    sprintf(curs_name, "C%d", shandle);
  }

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  switch (shandle) 
  {
    case   1 :
      EXEC SQL DECLARE C1 CURSOR FOR prep_stmt_1 ;
      break ;
    case   2 :
      EXEC SQL DECLARE C2 CURSOR FOR prep_stmt_2 ;
      break ;
    case   3 :
      EXEC SQL DECLARE C3 CURSOR FOR prep_stmt_3 ;
      break ;
    case   4 :
      EXEC SQL DECLARE C4 CURSOR FOR prep_stmt_4 ;
      break ;
    case   5 :
      EXEC SQL DECLARE C5 CURSOR FOR prep_stmt_5 ;
      break ;
    case   6 :
      EXEC SQL DECLARE C6 CURSOR FOR prep_stmt_6 ;
      break ;
    case   7 :
      EXEC SQL DECLARE C7 CURSOR FOR prep_stmt_7 ;
      break ;
    case   8 :
      EXEC SQL DECLARE C8 CURSOR FOR prep_stmt_8 ;
      break ;
    case   9 :
      EXEC SQL DECLARE C9 CURSOR FOR prep_stmt_9 ;
      break ;
    case  10 :
      EXEC SQL DECLARE C10 CURSOR FOR prep_stmt_10 ;
      break ;
    case  11 :
      EXEC SQL DECLARE C11 CURSOR FOR prep_stmt_11 ;
      break ;
    case  12 :
      EXEC SQL DECLARE C12 CURSOR FOR prep_stmt_12 ;
      break ;
    case  13 :
      EXEC SQL DECLARE C13 CURSOR FOR prep_stmt_13 ;
      break ;
    case  14 :
      EXEC SQL DECLARE C14 CURSOR FOR prep_stmt_14 ;
      break ;
    case  15 :
      EXEC SQL DECLARE C15 CURSOR FOR prep_stmt_15 ;
      break ;
    case  16 :
      EXEC SQL DECLARE C16 CURSOR FOR prep_stmt_16 ;
      break ;
    case  17 :
      EXEC SQL DECLARE C17 CURSOR FOR prep_stmt_17 ;
      break ;
    case  18 :
      EXEC SQL DECLARE C18 CURSOR FOR prep_stmt_18 ;
      break ;
    case  19 :
      EXEC SQL DECLARE C19 CURSOR FOR prep_stmt_19 ;
      break ;
    case  20 :
      EXEC SQL DECLARE C20 CURSOR FOR prep_stmt_20 ;
      break ;
    case  21 :
      EXEC SQL DECLARE C21 CURSOR FOR prep_stmt_21 ;
      break ;
    case  22 :
      EXEC SQL DECLARE C22 CURSOR FOR prep_stmt_22 ;
      break ;
    case  23 :
      EXEC SQL DECLARE C23 CURSOR FOR prep_stmt_23 ;
      break ;
    case  24 :
      EXEC SQL DECLARE C24 CURSOR FOR prep_stmt_24 ;
      break ;
    case  25 :
      EXEC SQL DECLARE C25 CURSOR FOR prep_stmt_25 ;
      break ;
    case  26 :
      EXEC SQL DECLARE C26 CURSOR FOR prep_stmt_26 ;
      break ;
    case  27 :
      EXEC SQL DECLARE C27 CURSOR FOR prep_stmt_27 ;
      break ;
    case  28 :
      EXEC SQL DECLARE C28 CURSOR FOR prep_stmt_28 ;
      break ;
    case  29 :
      EXEC SQL DECLARE C29 CURSOR FOR prep_stmt_29 ;
      break ;
    case  30 :
      EXEC SQL DECLARE C30 CURSOR FOR prep_stmt_30 ;
      break ;
    case  31 :
      EXEC SQL DECLARE C31 CURSOR FOR prep_stmt_31 ;
      break ;
    case  32 :
      EXEC SQL DECLARE C32 CURSOR FOR prep_stmt_32 ;
      break ;
    case  33 :
      EXEC SQL DECLARE C33 CURSOR FOR prep_stmt_33 ;
      break ;
    case  34 :
      EXEC SQL DECLARE C34 CURSOR FOR prep_stmt_34 ;
      break ;
    case  35 :
      EXEC SQL DECLARE C35 CURSOR FOR prep_stmt_35 ;
      break ;
    case  36 :
      EXEC SQL DECLARE C36 CURSOR FOR prep_stmt_36 ;
      break ;
    case  37 :
      EXEC SQL DECLARE C37 CURSOR FOR prep_stmt_37 ;
      break ;
    case  38 :
      EXEC SQL DECLARE C38 CURSOR FOR prep_stmt_38 ;
      break ;
    case  39 :
      EXEC SQL DECLARE C39 CURSOR FOR prep_stmt_39 ;
      break ;
    case  40 :
      EXEC SQL DECLARE C40 CURSOR FOR prep_stmt_40 ;
      break ;
    case  41 :
      EXEC SQL DECLARE C41 CURSOR FOR prep_stmt_41 ;
      break ;
    case  42 :
      EXEC SQL DECLARE C42 CURSOR FOR prep_stmt_42 ;
      break ;
    case  43 :
      EXEC SQL DECLARE C43 CURSOR FOR prep_stmt_43 ;
      break ;
    case  44 :
      EXEC SQL DECLARE C44 CURSOR FOR prep_stmt_44 ;
      break ;
    case  45 :
      EXEC SQL DECLARE C45 CURSOR FOR prep_stmt_45 ;
      break ;
    case  46 :
      EXEC SQL DECLARE C46 CURSOR FOR prep_stmt_46 ;
      break ;
    case  47 :
      EXEC SQL DECLARE C47 CURSOR FOR prep_stmt_47 ;
      break ;
    case  48 :
      EXEC SQL DECLARE C48 CURSOR FOR prep_stmt_48 ;
      break ;
    case  49 :
      EXEC SQL DECLARE C49 CURSOR FOR prep_stmt_49 ;
      break ;
    case  50 :
      EXEC SQL DECLARE C50 CURSOR FOR prep_stmt_50 ;
      break ;
    case  51 :
      EXEC SQL DECLARE C51 CURSOR FOR prep_stmt_51 ;
      break ;
    case  52 :
      EXEC SQL DECLARE C52 CURSOR FOR prep_stmt_52 ;
      break ;
    case  53 :
      EXEC SQL DECLARE C53 CURSOR FOR prep_stmt_53 ;
      break ;
    case  54 :
      EXEC SQL DECLARE C54 CURSOR FOR prep_stmt_54 ;
      break ;
    case  55 :
      EXEC SQL DECLARE C55 CURSOR FOR prep_stmt_55 ;
      break ;
    case  56 :
      EXEC SQL DECLARE C56 CURSOR FOR prep_stmt_56 ;
      break ;
    case  57 :
      EXEC SQL DECLARE C57 CURSOR FOR prep_stmt_57 ;
      break ;
    case  58 :
      EXEC SQL DECLARE C58 CURSOR FOR prep_stmt_58 ;
      break ;
    case  59 :
      EXEC SQL DECLARE C59 CURSOR FOR prep_stmt_59 ;
      break ;
    case  60 :
      EXEC SQL DECLARE C60 CURSOR FOR prep_stmt_60 ;
      break ;
    case  61 :
      EXEC SQL DECLARE C61 CURSOR FOR prep_stmt_61 ;
      break ;
    case  62 :
      EXEC SQL DECLARE C62 CURSOR FOR prep_stmt_62 ;
      break ;
    case  63 :
      EXEC SQL DECLARE C63 CURSOR FOR prep_stmt_63 ;
      break ;
    case  64 :
      EXEC SQL DECLARE C64 CURSOR FOR prep_stmt_64 ;
      break ;
    case  65 :
      EXEC SQL DECLARE C65 CURSOR FOR prep_stmt_65 ;
      break ;
    case  66 :
      EXEC SQL DECLARE C66 CURSOR FOR prep_stmt_66 ;
      break ;
    case  67 :
      EXEC SQL DECLARE C67 CURSOR FOR prep_stmt_67 ;
      break ;
    case  68 :
      EXEC SQL DECLARE C68 CURSOR FOR prep_stmt_68 ;
      break ;
    case  69 :
      EXEC SQL DECLARE C69 CURSOR FOR prep_stmt_69 ;
      break ;
    case  70 :
      EXEC SQL DECLARE C70 CURSOR FOR prep_stmt_70 ;
      break ;
    case  71 :
      EXEC SQL DECLARE C71 CURSOR FOR prep_stmt_71 ;
      break ;
    case  72 :
      EXEC SQL DECLARE C72 CURSOR FOR prep_stmt_72 ;
      break ;
    case  73 :
      EXEC SQL DECLARE C73 CURSOR FOR prep_stmt_73 ;
      break ;
    case  74 :
      EXEC SQL DECLARE C74 CURSOR FOR prep_stmt_74 ;
      break ;
    case  75 :
      EXEC SQL DECLARE C75 CURSOR FOR prep_stmt_75 ;
      break ;
    case  76 :
      EXEC SQL DECLARE C76 CURSOR FOR prep_stmt_76 ;
      break ;
    case  77 :
      EXEC SQL DECLARE C77 CURSOR FOR prep_stmt_77 ;
      break ;
    case  78 :
      EXEC SQL DECLARE C78 CURSOR FOR prep_stmt_78 ;
      break ;
    case  79 :
      EXEC SQL DECLARE C79 CURSOR FOR prep_stmt_79 ;
      break ;
    case  80 :
      EXEC SQL DECLARE C80 CURSOR FOR prep_stmt_80 ;
      break ;
    case  81 :
      EXEC SQL DECLARE C81 CURSOR FOR prep_stmt_81 ;
      break ;
    case  82 :
      EXEC SQL DECLARE C82 CURSOR FOR prep_stmt_82 ;
      break ;
    case  83 :
      EXEC SQL DECLARE C83 CURSOR FOR prep_stmt_83 ;
      break ;
    case  84 :
      EXEC SQL DECLARE C84 CURSOR FOR prep_stmt_84 ;
      break ;
    case  85 :
      EXEC SQL DECLARE C85 CURSOR FOR prep_stmt_85 ;
      break ;
    case  86 :
      EXEC SQL DECLARE C86 CURSOR FOR prep_stmt_86 ;
      break ;
    case  87 :
      EXEC SQL DECLARE C87 CURSOR FOR prep_stmt_87 ;
      break ;
    case  88 :
      EXEC SQL DECLARE C88 CURSOR FOR prep_stmt_88 ;
      break ;
    case  89 :
      EXEC SQL DECLARE C89 CURSOR FOR prep_stmt_89 ;
      break ;
    case  90 :
      EXEC SQL DECLARE C90 CURSOR FOR prep_stmt_90 ;
      break ;
    case  91 :
      EXEC SQL DECLARE C91 CURSOR FOR prep_stmt_91 ;
      break ;
    case  92 :
      EXEC SQL DECLARE C92 CURSOR FOR prep_stmt_92 ;
      break ;
    case  93 :
      EXEC SQL DECLARE C93 CURSOR FOR prep_stmt_93 ;
      break ;
    case  94 :
      EXEC SQL DECLARE C94 CURSOR FOR prep_stmt_94 ;
      break ;
    case  95 :
      EXEC SQL DECLARE C95 CURSOR FOR prep_stmt_95 ;
      break ;
    case  96 :
      EXEC SQL DECLARE C96 CURSOR FOR prep_stmt_96 ;
      break ;
    case  97 :
      EXEC SQL DECLARE C97 CURSOR FOR prep_stmt_97 ;
      break ;
    case  98 :
      EXEC SQL DECLARE C98 CURSOR FOR prep_stmt_98 ;
      break ;
    case  99 :
      EXEC SQL DECLARE C99 CURSOR FOR prep_stmt_99 ;
      break ;
    case 100 :
      EXEC SQL DECLARE C100 CURSOR FOR prep_stmt_100 ;
      break ;
#ifndef SMSW
    case 101 :
      EXEC SQL DECLARE C101 CURSOR FOR prep_stmt_101 ;
      break ;
    case 102 :
      EXEC SQL DECLARE C102 CURSOR FOR prep_stmt_102 ;
      break ;
    case 103 :
      EXEC SQL DECLARE C103 CURSOR FOR prep_stmt_103 ;
      break ;
    case 104 :
      EXEC SQL DECLARE C104 CURSOR FOR prep_stmt_104 ;
      break ;
    case 105 :
      EXEC SQL DECLARE C105 CURSOR FOR prep_stmt_105 ;
      break ;
    case 106 :
      EXEC SQL DECLARE C106 CURSOR FOR prep_stmt_106 ;
      break ;
    case 107 :
      EXEC SQL DECLARE C107 CURSOR FOR prep_stmt_107 ;
      break ;
    case 108 :
      EXEC SQL DECLARE C108 CURSOR FOR prep_stmt_108 ;
      break ;
    case 109 :
      EXEC SQL DECLARE C109 CURSOR FOR prep_stmt_109 ;
      break ;
    case 110 :
      EXEC SQL DECLARE C110 CURSOR FOR prep_stmt_110 ;
      break ;
    case 111 :
      EXEC SQL DECLARE C111 CURSOR FOR prep_stmt_111 ;
      break ;
    case 112 :
      EXEC SQL DECLARE C112 CURSOR FOR prep_stmt_112 ;
      break ;
    case 113 :
      EXEC SQL DECLARE C113 CURSOR FOR prep_stmt_113 ;
      break ;
    case 114 :
      EXEC SQL DECLARE C114 CURSOR FOR prep_stmt_114 ;
      break ;
    case 115 :
      EXEC SQL DECLARE C115 CURSOR FOR prep_stmt_115 ;
      break ;
    case 116 :
      EXEC SQL DECLARE C116 CURSOR FOR prep_stmt_116 ;
      break ;
    case 117 :
      EXEC SQL DECLARE C117 CURSOR FOR prep_stmt_117 ;
      break ;
    case 118 :
      EXEC SQL DECLARE C118 CURSOR FOR prep_stmt_118 ;
      break ;
    case 119 :
      EXEC SQL DECLARE C119 CURSOR FOR prep_stmt_119 ;
      break ;
    case 120 :
      EXEC SQL DECLARE C120 CURSOR FOR prep_stmt_120 ;
      break ;
    case 121 :
      EXEC SQL DECLARE C121 CURSOR FOR prep_stmt_121 ;
      break ;
    case 122 :
      EXEC SQL DECLARE C122 CURSOR FOR prep_stmt_122 ;
      break ;
    case 123 :
      EXEC SQL DECLARE C123 CURSOR FOR prep_stmt_123 ;
      break ;
    case 124 :
      EXEC SQL DECLARE C124 CURSOR FOR prep_stmt_124 ;
      break ;
    case 125 :
      EXEC SQL DECLARE C125 CURSOR FOR prep_stmt_125 ;
      break ;
    case 126 :
      EXEC SQL DECLARE C126 CURSOR FOR prep_stmt_126 ;
      break ;
    case 127 :
      EXEC SQL DECLARE C127 CURSOR FOR prep_stmt_127 ;
      break ;
    case 128 :
      EXEC SQL DECLARE C128 CURSOR FOR prep_stmt_128 ;
      break ;
    case 129 :
      EXEC SQL DECLARE C129 CURSOR FOR prep_stmt_129 ;
      break ;
    case 130 :
      EXEC SQL DECLARE C130 CURSOR FOR prep_stmt_130 ;
      break ;
    case 131 :
      EXEC SQL DECLARE C131 CURSOR FOR prep_stmt_131 ;
      break ;
    case 132 :
      EXEC SQL DECLARE C132 CURSOR FOR prep_stmt_132 ;
      break ;
    case 133 :
      EXEC SQL DECLARE C133 CURSOR FOR prep_stmt_133 ;
      break ;
    case 134 :
      EXEC SQL DECLARE C134 CURSOR FOR prep_stmt_134 ;
      break ;
    case 135 :
      EXEC SQL DECLARE C135 CURSOR FOR prep_stmt_135 ;
      break ;
    case 136 :
      EXEC SQL DECLARE C136 CURSOR FOR prep_stmt_136 ;
      break ;
    case 137 :
      EXEC SQL DECLARE C137 CURSOR FOR prep_stmt_137 ;
      break ;
    case 138 :
      EXEC SQL DECLARE C138 CURSOR FOR prep_stmt_138 ;
      break ;
    case 139 :
      EXEC SQL DECLARE C139 CURSOR FOR prep_stmt_139 ;
      break ;
    case 140 :
      EXEC SQL DECLARE C140 CURSOR FOR prep_stmt_140 ;
      break ;
    case 141 :
      EXEC SQL DECLARE C141 CURSOR FOR prep_stmt_141 ;
      break ;
    case 142 :
      EXEC SQL DECLARE C142 CURSOR FOR prep_stmt_142 ;
      break ;
    case 143 :
      EXEC SQL DECLARE C143 CURSOR FOR prep_stmt_143 ;
      break ;
    case 144 :
      EXEC SQL DECLARE C144 CURSOR FOR prep_stmt_144 ;
      break ;
    case 145 :
      EXEC SQL DECLARE C145 CURSOR FOR prep_stmt_145 ;
      break ;
    case 146 :
      EXEC SQL DECLARE C146 CURSOR FOR prep_stmt_146 ;
      break ;
    case 147 :
      EXEC SQL DECLARE C147 CURSOR FOR prep_stmt_147 ;
      break ;
    case 148 :
      EXEC SQL DECLARE C148 CURSOR FOR prep_stmt_148 ;
      break ;
    case 149 :
      EXEC SQL DECLARE C149 CURSOR FOR prep_stmt_149 ;
      break ;
    case 150 :
      EXEC SQL DECLARE C150 CURSOR FOR prep_stmt_150 ;
      break ;
    case 151 :
      EXEC SQL DECLARE C151 CURSOR FOR prep_stmt_151 ;
      break ;
    case 152 :
      EXEC SQL DECLARE C152 CURSOR FOR prep_stmt_152 ;
      break ;
    case 153 :
      EXEC SQL DECLARE C153 CURSOR FOR prep_stmt_153 ;
      break ;
    case 154 :
      EXEC SQL DECLARE C154 CURSOR FOR prep_stmt_154 ;
      break ;
    case 155 :
      EXEC SQL DECLARE C155 CURSOR FOR prep_stmt_155 ;
      break ;
    case 156 :
      EXEC SQL DECLARE C156 CURSOR FOR prep_stmt_156 ;
      break ;
    case 157 :
      EXEC SQL DECLARE C157 CURSOR FOR prep_stmt_157 ;
      break ;
    case 158 :
      EXEC SQL DECLARE C158 CURSOR FOR prep_stmt_158 ;
      break ;
    case 159 :
      EXEC SQL DECLARE C159 CURSOR FOR prep_stmt_159 ;
      break ;
    case 160 :
      EXEC SQL DECLARE C160 CURSOR FOR prep_stmt_160 ;
      break ;
    case 161 :
      EXEC SQL DECLARE C161 CURSOR FOR prep_stmt_161 ;
      break ;
    case 162 :
      EXEC SQL DECLARE C162 CURSOR FOR prep_stmt_162 ;
      break ;
    case 163 :
      EXEC SQL DECLARE C163 CURSOR FOR prep_stmt_163 ;
      break ;
    case 164 :
      EXEC SQL DECLARE C164 CURSOR FOR prep_stmt_164 ;
      break ;
    case 165 :
      EXEC SQL DECLARE C165 CURSOR FOR prep_stmt_165 ;
      break ;
    case 166 :
      EXEC SQL DECLARE C166 CURSOR FOR prep_stmt_166 ;
      break ;
    case 167 :
      EXEC SQL DECLARE C167 CURSOR FOR prep_stmt_167 ;
      break ;
    case 168 :
      EXEC SQL DECLARE C168 CURSOR FOR prep_stmt_168 ;
      break ;
    case 169 :
      EXEC SQL DECLARE C169 CURSOR FOR prep_stmt_169 ;
      break ;
    case 170 :
      EXEC SQL DECLARE C170 CURSOR FOR prep_stmt_170 ;
      break ;
    case 171 :
      EXEC SQL DECLARE C171 CURSOR FOR prep_stmt_171 ;
      break ;
    case 172 :
      EXEC SQL DECLARE C172 CURSOR FOR prep_stmt_172 ;
      break ;
    case 173 :
      EXEC SQL DECLARE C173 CURSOR FOR prep_stmt_173 ;
      break ;
    case 174 :
      EXEC SQL DECLARE C174 CURSOR FOR prep_stmt_174 ;
      break ;
    case 175 :
      EXEC SQL DECLARE C175 CURSOR FOR prep_stmt_175 ;
      break ;
    case 176 :
      EXEC SQL DECLARE C176 CURSOR FOR prep_stmt_176 ;
      break ;
    case 177 :
      EXEC SQL DECLARE C177 CURSOR FOR prep_stmt_177 ;
      break ;
    case 178 :
      EXEC SQL DECLARE C178 CURSOR FOR prep_stmt_178 ;
      break ;
    case 179 :
      EXEC SQL DECLARE C179 CURSOR FOR prep_stmt_179 ;
      break ;
    case 180 :
      EXEC SQL DECLARE C180 CURSOR FOR prep_stmt_180 ;
      break ;
    case 181 :
      EXEC SQL DECLARE C181 CURSOR FOR prep_stmt_181 ;
      break ;
    case 182 :
      EXEC SQL DECLARE C182 CURSOR FOR prep_stmt_182 ;
      break ;
    case 183 :
      EXEC SQL DECLARE C183 CURSOR FOR prep_stmt_183 ;
      break ;
    case 184 :
      EXEC SQL DECLARE C184 CURSOR FOR prep_stmt_184 ;
      break ;
    case 185 :
      EXEC SQL DECLARE C185 CURSOR FOR prep_stmt_185 ;
      break ;
    case 186 :
      EXEC SQL DECLARE C186 CURSOR FOR prep_stmt_186 ;
      break ;
    case 187 :
      EXEC SQL DECLARE C187 CURSOR FOR prep_stmt_187 ;
      break ;
    case 188 :
      EXEC SQL DECLARE C188 CURSOR FOR prep_stmt_188 ;
      break ;
    case 189 :
      EXEC SQL DECLARE C189 CURSOR FOR prep_stmt_189 ;
      break ;
    case 190 :
      EXEC SQL DECLARE C190 CURSOR FOR prep_stmt_190 ;
      break ;
    case 191 :
      EXEC SQL DECLARE C191 CURSOR FOR prep_stmt_191 ;
      break ;
    case 192 :
      EXEC SQL DECLARE C192 CURSOR FOR prep_stmt_192 ;
      break ;
    case 193 :
      EXEC SQL DECLARE C193 CURSOR FOR prep_stmt_193 ;
      break ;
    case 194 :
      EXEC SQL DECLARE C194 CURSOR FOR prep_stmt_194 ;
      break ;
    case 195 :
      EXEC SQL DECLARE C195 CURSOR FOR prep_stmt_195 ;
      break ;
    case 196 :
      EXEC SQL DECLARE C196 CURSOR FOR prep_stmt_196 ;
      break ;
    case 197 :
      EXEC SQL DECLARE C197 CURSOR FOR prep_stmt_197 ;
      break ;
    case 198 :
      EXEC SQL DECLARE C198 CURSOR FOR prep_stmt_198 ;
      break ;
    case 199 :
      EXEC SQL DECLARE C199 CURSOR FOR prep_stmt_199 ;
      break ;
    case 200 :
      EXEC SQL DECLARE C200 CURSOR FOR prep_stmt_200 ;
      break ;
#endif
    default :
      iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for declare cursor"), shandle, context[context_num].max_cursors) ;

      return GDB_ERROR ;
  }
  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_describe_input                                               XXX
    - id all host vars (INPUT VARIABLES) and load into bind descriptor
    - alloc memory for bind vars
    - get values for host bind vars
    - currently not supported

    Arguments:
    - shandle: statement handle
    - bind_vars: array of bind variables
    - stmt_id: statement id from 'prepare' (na for Informix)
    - action:
        * GDB_INIT = fully setup the stmt which contains bind vars.
        * GDB_UPDATE = only update the bind descriptor with new bind vars.
 ======================================================================*/

long sql_describe_input( shandle, bind_vars, stmt_id, bind_processed, action )
    long          shandle ;
    BIND_STRUCT  *bind_vars ;
    long         *stmt_id ;
    long         *bind_processed ;
    long          action ;
{
  register long   i, n ;
  SQLDA     *bind_ptr ;
  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_DESCRIBE_INPUT) ;

  *bind_processed = FALSE ;

  if (shandle == 0) return GDB_ERROR ;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  bind_ptr = sqlda_ptrs[context_num][shandle].bptr ;

  if (bind_ptr == NULL) 
  {
    iomsg(DBG3, LAYER, TRUE, TRUE, NULL, FALSE, "%d", ENOTINI) ;
    return GDB_ERROR ;
  }

  if (action == GDB_INIT)
  {
     switch (shandle) 
     {
       case   1 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_1 INTO bind_ptr ;
         break ;
       case   2 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_2 INTO bind_ptr ;
         break ;
       case   3 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_3 INTO bind_ptr ;
         break ;
       case   4 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_4 INTO bind_ptr ;
         break ;
       case   5 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_5 INTO bind_ptr ;
         break ;
       case   6 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_6 INTO bind_ptr ;
         break ;
       case   7 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_7 INTO bind_ptr ;
         break ;
       case   8 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_8 INTO bind_ptr ;
         break ;
       case   9 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_9 INTO bind_ptr ;
         break ;
       case  10 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_10 INTO bind_ptr ;
         break ;
       case  11 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_11 INTO bind_ptr ;
         break ;
       case  12 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_12 INTO bind_ptr ;
         break ;
       case  13 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_13 INTO bind_ptr ;
         break ;
       case  14 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_14 INTO bind_ptr ;
         break ;
       case  15 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_15 INTO bind_ptr ;
         break ;
       case  16 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_16 INTO bind_ptr ;
         break ;
       case  17 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_17 INTO bind_ptr ;
         break ;
       case  18 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_18 INTO bind_ptr ;
         break ;
       case  19 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_19 INTO bind_ptr ;
         break ;
       case  20 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_20 INTO bind_ptr ;
         break ;
       case  21 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_21 INTO bind_ptr ;
         break ;
       case  22 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_22 INTO bind_ptr ;
         break ;
       case  23 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_23 INTO bind_ptr ;
         break ;
       case  24 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_24 INTO bind_ptr ;
         break ;
       case  25 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_25 INTO bind_ptr ;
         break ;
       case  26 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_26 INTO bind_ptr ;
         break ;
       case  27 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_27 INTO bind_ptr ;
         break ;
       case  28 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_28 INTO bind_ptr ;
         break ;
       case  29 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_29 INTO bind_ptr ;
         break ;
       case  30 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_30 INTO bind_ptr ;
         break ;
       case  31 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_31 INTO bind_ptr ;
         break ;
       case  32 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_32 INTO bind_ptr ;
         break ;
       case  33 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_33 INTO bind_ptr ;
         break ;
       case  34 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_34 INTO bind_ptr ;
         break ;
       case  35 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_35 INTO bind_ptr ;
         break ;
       case  36 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_36 INTO bind_ptr ;
         break ;
       case  37 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_37 INTO bind_ptr ;
         break ;
       case  38 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_38 INTO bind_ptr ;
         break ;
       case  39 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_39 INTO bind_ptr ;
         break ;
       case  40 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_40 INTO bind_ptr ;
         break ;
       case  41 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_41 INTO bind_ptr ;
         break ;
       case  42 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_42 INTO bind_ptr ;
         break ;
       case  43 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_43 INTO bind_ptr ;
         break ;
       case  44 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_44 INTO bind_ptr ;
         break ;
       case  45 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_45 INTO bind_ptr ;
         break ;
       case  46 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_46 INTO bind_ptr ;
         break ;
       case  47 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_47 INTO bind_ptr ;
         break ;
       case  48 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_48 INTO bind_ptr ;
         break ;
       case  49 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_49 INTO bind_ptr ;
         break ;
       case  50 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_50 INTO bind_ptr ;
         break ;
       case  51 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_51 INTO bind_ptr ;
         break ;
       case  52 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_52 INTO bind_ptr ;
         break ;
       case  53 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_53 INTO bind_ptr ;
         break ;
       case  54 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_54 INTO bind_ptr ;
         break ;
       case  55 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_55 INTO bind_ptr ;
         break ;
       case  56 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_56 INTO bind_ptr ;
         break ;
       case  57 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_57 INTO bind_ptr ;
         break ;
       case  58 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_58 INTO bind_ptr ;
         break ;
       case  59 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_59 INTO bind_ptr ;
         break ;
       case  60 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_60 INTO bind_ptr ;
         break ;
       case  61 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_61 INTO bind_ptr ;
         break ;
       case  62 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_62 INTO bind_ptr ;
         break ;
       case  63 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_63 INTO bind_ptr ;
         break ;
       case  64 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_64 INTO bind_ptr ;
         break ;
       case  65 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_65 INTO bind_ptr ;
         break ;
       case  66 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_66 INTO bind_ptr ;
         break ;
       case  67 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_67 INTO bind_ptr ;
         break ;
       case  68 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_68 INTO bind_ptr ;
         break ;
       case  69 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_69 INTO bind_ptr ;
         break ;
       case  70 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_70 INTO bind_ptr ;
         break ;
       case  71 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_71 INTO bind_ptr ;
         break ;
       case  72 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_72 INTO bind_ptr ;
         break ;
       case  73 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_73 INTO bind_ptr ;
         break ;
       case  74 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_74 INTO bind_ptr ;
         break ;
       case  75 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_75 INTO bind_ptr ;
         break ;
       case  76 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_76 INTO bind_ptr ;
         break ;
       case  77 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_77 INTO bind_ptr ;
         break ;
       case  78 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_78 INTO bind_ptr ;
         break ;
       case  79 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_79 INTO bind_ptr ;
         break ;
       case  80 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_80 INTO bind_ptr ;
         break ;
       case  81 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_81 INTO bind_ptr ;
         break ;
       case  82 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_82 INTO bind_ptr ;
         break ;
       case  83 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_83 INTO bind_ptr ;
         break ;
       case  84 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_84 INTO bind_ptr ;
         break ;
       case  85 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_85 INTO bind_ptr ;
         break ;
       case  86 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_86 INTO bind_ptr ;
         break ;
       case  87 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_87 INTO bind_ptr ;
         break ;
       case  88 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_88 INTO bind_ptr ;
         break ;
       case  89 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_89 INTO bind_ptr ;
         break ;
       case  90 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_90 INTO bind_ptr ;
         break ;
       case  91 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_91 INTO bind_ptr ;
         break ;
       case  92 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_92 INTO bind_ptr ;
         break ;
       case  93 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_93 INTO bind_ptr ;
         break ;
       case  94 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_94 INTO bind_ptr ;
         break ;
       case  95 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_95 INTO bind_ptr ;
         break ;
       case  96 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_96 INTO bind_ptr ;
         break ;
       case  97 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_97 INTO bind_ptr ;
         break ;
       case  98 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_98 INTO bind_ptr ;
         break ;
       case  99 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_99 INTO bind_ptr ;
         break ;
       case 100 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_100 INTO bind_ptr ;
         break ;
#ifndef SMSW
       case 101 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_101 INTO bind_ptr ;
         break ;
       case 102 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_102 INTO bind_ptr ;
         break ;
       case 103 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_103 INTO bind_ptr ;
         break ;
       case 104 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_104 INTO bind_ptr ;
         break ;
       case 105 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_105 INTO bind_ptr ;
         break ;
       case 106 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_106 INTO bind_ptr ;
         break ;
       case 107 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_107 INTO bind_ptr ;
         break ;
       case 108 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_108 INTO bind_ptr ;
         break ;
       case 109 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_109 INTO bind_ptr ;
         break ;
       case 110 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_110 INTO bind_ptr ;
         break ;
       case 111 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_111 INTO bind_ptr ;
         break ;
       case 112 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_112 INTO bind_ptr ;
         break ;
       case 113 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_113 INTO bind_ptr ;
         break ;
       case 114 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_114 INTO bind_ptr ;
         break ;
       case 115 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_115 INTO bind_ptr ;
         break ;
       case 116 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_116 INTO bind_ptr ;
         break ;
       case 117 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_117 INTO bind_ptr ;
         break ;
       case 118 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_118 INTO bind_ptr ;
         break ;
       case 119 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_119 INTO bind_ptr ;
         break ;
       case 120 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_120 INTO bind_ptr ;
         break ;
       case 121 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_121 INTO bind_ptr ;
         break ;
       case 122 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_122 INTO bind_ptr ;
         break ;
       case 123 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_123 INTO bind_ptr ;
         break ;
       case 124 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_124 INTO bind_ptr ;
         break ;
       case 125 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_125 INTO bind_ptr ;
         break ;
       case 126 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_126 INTO bind_ptr ;
         break ;
       case 127 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_127 INTO bind_ptr ;
         break ;
       case 128 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_128 INTO bind_ptr ;
         break ;
       case 129 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_129 INTO bind_ptr ;
         break ;
       case 130 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_130 INTO bind_ptr ;
         break ;
       case 131 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_131 INTO bind_ptr ;
         break ;
       case 132 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_132 INTO bind_ptr ;
         break ;
       case 133 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_133 INTO bind_ptr ;
         break ;
       case 134 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_134 INTO bind_ptr ;
         break ;
       case 135 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_135 INTO bind_ptr ;
         break ;
       case 136 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_136 INTO bind_ptr ;
         break ;
       case 137 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_137 INTO bind_ptr ;
         break ;
       case 138 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_138 INTO bind_ptr ;
         break ;
       case 139 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_139 INTO bind_ptr ;
         break ;
       case 140 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_140 INTO bind_ptr ;
         break ;
       case 141 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_141 INTO bind_ptr ;
         break ;
       case 142 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_142 INTO bind_ptr ;
         break ;
       case 143 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_143 INTO bind_ptr ;
         break ;
       case 144 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_144 INTO bind_ptr ;
         break ;
       case 145 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_145 INTO bind_ptr ;
         break ;
       case 146 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_146 INTO bind_ptr ;
         break ;
       case 147 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_147 INTO bind_ptr ;
         break ;
       case 148 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_148 INTO bind_ptr ;
         break ;
       case 149 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_149 INTO bind_ptr ;
         break ;
       case 150 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_150 INTO bind_ptr ;
         break ;
       case 151 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_151 INTO bind_ptr ;
         break ;
       case 152 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_152 INTO bind_ptr ;
         break ;
       case 153 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_153 INTO bind_ptr ;
         break ;
       case 154 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_154 INTO bind_ptr ;
         break ;
       case 155 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_155 INTO bind_ptr ;
         break ;
       case 156 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_156 INTO bind_ptr ;
         break ;
       case 157 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_157 INTO bind_ptr ;
         break ;
       case 158 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_158 INTO bind_ptr ;
         break ;
       case 159 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_159 INTO bind_ptr ;
         break ;
       case 160 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_160 INTO bind_ptr ;
         break ;
       case 161 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_161 INTO bind_ptr ;
         break ;
       case 162 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_162 INTO bind_ptr ;
         break ;
       case 163 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_163 INTO bind_ptr ;
         break ;
       case 164 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_164 INTO bind_ptr ;
         break ;
       case 165 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_165 INTO bind_ptr ;
         break ;
       case 166 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_166 INTO bind_ptr ;
         break ;
       case 167 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_167 INTO bind_ptr ;
         break ;
       case 168 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_168 INTO bind_ptr ;
         break ;
       case 169 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_169 INTO bind_ptr ;
         break ;
       case 170 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_170 INTO bind_ptr ;
         break ;
       case 171 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_171 INTO bind_ptr ;
         break ;
       case 172 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_172 INTO bind_ptr ;
         break ;
       case 173 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_173 INTO bind_ptr ;
         break ;
       case 174 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_174 INTO bind_ptr ;
         break ;
       case 175 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_175 INTO bind_ptr ;
         break ;
       case 176 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_176 INTO bind_ptr ;
         break ;
       case 177 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_177 INTO bind_ptr ;
         break ;
       case 178 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_178 INTO bind_ptr ;
         break ;
       case 179 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_179 INTO bind_ptr ;
         break ;
       case 180 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_180 INTO bind_ptr ;
         break ;
       case 181 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_181 INTO bind_ptr ;
         break ;
       case 182 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_182 INTO bind_ptr ;
         break ;
       case 183 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_183 INTO bind_ptr ;
         break ;
       case 184 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_184 INTO bind_ptr ;
         break ;
       case 185 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_185 INTO bind_ptr ;
         break ;
       case 186 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_186 INTO bind_ptr ;
         break ;
       case 187 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_187 INTO bind_ptr ;
         break ;
       case 188 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_188 INTO bind_ptr ;
         break ;
       case 189 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_189 INTO bind_ptr ;
         break ;
       case 190 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_190 INTO bind_ptr ;
         break ;
       case 191 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_191 INTO bind_ptr ;
         break ;
       case 192 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_192 INTO bind_ptr ;
         break ;
       case 193 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_193 INTO bind_ptr ;
         break ;
       case 194 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_194 INTO bind_ptr ;
         break ;
       case 195 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_195 INTO bind_ptr ;
         break ;
       case 196 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_196 INTO bind_ptr ;
         break ;
       case 197 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_197 INTO bind_ptr ;
         break ;
       case 198 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_198 INTO bind_ptr ;
         break ;
       case 199 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_199 INTO bind_ptr ;
         break ;
       case 200 :
         EXEC SQL DESCRIBE BIND VARIABLES FOR prep_stmt_200 INTO bind_ptr ;
         break ;
#endif
       default :
         iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for describe-bind-list"), shandle, context[context_num].max_cursors);

         return GDB_ERROR ;
     }

     if (sqlca.sqlcode < 0) return GDB_EXT_ERROR ;

     /* Note: Added F > N for AlphaOSF as AlphaOSF not returning negative #'s) */
     if (bind_ptr->F < 0 || (bind_ptr->F > bind_ptr->N)) 
    {
       iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d%d%d", EMBVEXD, abs(bind_ptr->F), context[context_num].max_bind_vars) ;
       bind_ptr->F = 0 ;
       return GDB_ERROR ;
     }
     bind_ptr->N = bind_ptr->F;  /* max items = max items found */
  }

  if (!bind_ptr->N || bind_vars->nBind == 0) 
  {
    if (!bind_ptr->N)
      *bind_processed = TRUE ;
    return GDB_SUCCESS ;
  }
#ifdef XXX
  /* check bind value length */
  for (n=0;n<bind_vars->nBind;n++) 
  {
    if ((int)wcslen(bind_vars->bind_array[n]) > context[context_num].max_bind_value_len) 
    {
      iomsg(DBG3, LAYER, TRUE, TRUE, NULL, FALSE, FORMAT_DD, EINMAXL, context[context_num].max_bind_value_len) ;
      return GDB_ERROR ;
    }
  }
#endif

  iomsg(DBG6, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d"), _T("Bind variables processed: %"), bind_vars->nBind);

  if (bind_ptr->N != bind_vars->nBind) 
  {
    iomsg(DBG3, LAYER, TRUE, TRUE, NULL, FALSE, "%d%d%d", ENUMVAL, bind_vars->nBind, bind_ptr->N) ;
    return GDB_ERROR ;
  }

  /* Load bind variables into bind descriptor */
  for (i=0; i<bind_ptr->N; i++)
  {
    /* allocate the indicator variables */
    if((bind_ptr->I[i] = (short *)XCALLOC(1, sizeof(short *))) == NULL) 
    {
      iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Could not alloc mem for bind_ptr array (I)"));

      iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
      return GDB_ERROR; /* addr of indicator vars */
    }

    /* Get length and remove the new line character. */
    n = wcslen(bind_vars->bind_array[i]);

    /* Set it in the descriptor. */
    bind_ptr->L[i] = n ;

    /* (re-)allocate the buffer for the value. sqlald() reserves a ** pointer location
       for V but does not allocate the V[i] buffer. */

    if (bind_ptr->V[i] == NULL) 
    {
      bind_ptr->V[i] = (char *)XCALLOC(bind_ptr->L[i] + 1, sizeof(char)) ;
    }
    else 
    {
      bind_ptr->V[i] = (char *)realloc(bind_ptr->V[i], (bind_ptr->L[i] + 1)) ;
    }

    /* check for failed reallocation */
    if (bind_ptr->V[i] == NULL) 
    {
      iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
      return GDB_ERROR ;
    }

    /* And copy it in. */
    strncpy(bind_ptr->V[i], bind_vars->bind_array[i], n);

    /* Set the null indicator if required */
    /* ---------------------------------- */
    *bind_ptr->I[i] = 0 ;
    if ((context[context_num].set_null_options & 0x2) &&
            ! _wcsicmp(bind_ptr->V[i], context[context_num].set_null_string))
        *bind_ptr->I[i] = -1 ;
    else {
        if ((context[context_num].set_null_options & 0x4) && !_wcsicmp(bind_ptr->V[i], "NULL"))
            *bind_ptr->I[i] = -1 ;
    }
    /* Set the bind datatype to null terminated string type */
    bind_ptr->T[i] = ORA_CHAR ;
  }

  *bind_processed = TRUE ;

  return GDB_SUCCESS ;
}


/*======================================================================
  sql_describe_output
    - 'describe' the 'prepared' sql statement to determine the character-
      istics of the database columns (i.e. datatype, column name, etc)
    - store the results in select_ptr
    - queries only

    Arguments:
    - shandle: statement handle
    - stmt_id: statement id from 'prepare' (na for Informix)
    - ncols: # of columns detected
    - query_type:
        * SELECT = standard sql select statement
        * STORED_PROC = stored procedure (currently not supported)
  ======================================================================*/

long sql_describe_output( GENDA* sqlGen, long query_type )
{
  SQLDA  *select_ptr ;
  long    col ;
  int     nullOK ;
  int     prec, scal ;
  long    shandle ;
  long   *stmt_id ;
  long   *ncols ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_DESCRIBE_OUTPUT);

  if (sqlGen == NULL) return GDB_ERROR ;
  shandle = sqlGen->stmt_handle ;
  stmt_id = &(sqlGen->stmt_id) ;
  ncols = &(sqlGen->ncols) ;
  if (shandle == 0) return GDB_ERROR ;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  select_ptr = sqlda_ptrs[context_num][shandle].sptr ;

  switch (shandle) 
  {
    case   1 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_1 INTO select_ptr ;
      break ;
    case   2 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_2 INTO select_ptr ;
      break ;
    case   3 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_3 INTO select_ptr ;
      break ;
    case   4 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_4 INTO select_ptr ;
      break ;
    case   5 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_5 INTO select_ptr ;
      break ;
    case   6 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_6 INTO select_ptr ;
      break ;
    case   7 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_7 INTO select_ptr ;
      break ;
    case   8 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_8 INTO select_ptr ;
      break ;
    case   9 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_9 INTO select_ptr ;
      break ;
    case  10 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_10 INTO select_ptr ;
      break ;
    case  11 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_11 INTO select_ptr ;
      break ;
    case  12 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_12 INTO select_ptr ;
      break ;
    case  13 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_13 INTO select_ptr ;
      break ;
    case  14 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_14 INTO select_ptr ;
      break ;
    case  15 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_15 INTO select_ptr ;
      break ;
    case  16 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_16 INTO select_ptr ;
      break ;
    case  17 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_17 INTO select_ptr ;
      break ;
    case  18 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_18 INTO select_ptr ;
      break ;
    case  19 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_19 INTO select_ptr ;
      break ;
    case  20 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_20 INTO select_ptr ;
      break ;
    case  21 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_21 INTO select_ptr ;
      break ;
    case  22 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_22 INTO select_ptr ;
      break ;
    case  23 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_23 INTO select_ptr ;
      break ;
    case  24 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_24 INTO select_ptr ;
      break ;
    case  25 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_25 INTO select_ptr ;
      break ;
    case  26 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_26 INTO select_ptr ;
      break ;
    case  27 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_27 INTO select_ptr ;
      break ;
    case  28 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_28 INTO select_ptr ;
      break ;
    case  29 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_29 INTO select_ptr ;
      break ;
    case  30 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_30 INTO select_ptr ;
      break ;
    case  31 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_31 INTO select_ptr ;
      break ;
    case  32 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_32 INTO select_ptr ;
      break ;
    case  33 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_33 INTO select_ptr ;
      break ;
    case  34 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_34 INTO select_ptr ;
      break ;
    case  35 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_35 INTO select_ptr ;
      break ;
    case  36 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_36 INTO select_ptr ;
      break ;
    case  37 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_37 INTO select_ptr ;
      break ;
    case  38 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_38 INTO select_ptr ;
      break ;
    case  39 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_39 INTO select_ptr ;
      break ;
    case  40 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_40 INTO select_ptr ;
      break ;
    case  41 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_41 INTO select_ptr ;
      break ;
    case  42 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_42 INTO select_ptr ;
      break ;
    case  43 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_43 INTO select_ptr ;
      break ;
    case  44 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_44 INTO select_ptr ;
      break ;
    case  45 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_45 INTO select_ptr ;
      break ;
    case  46 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_46 INTO select_ptr ;
      break ;
    case  47 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_47 INTO select_ptr ;
      break ;
    case  48 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_48 INTO select_ptr ;
      break ;
    case  49 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_49 INTO select_ptr ;
      break ;
    case  50 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_50 INTO select_ptr ;
      break ;
    case  51 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_51 INTO select_ptr ;
      break ;
    case  52 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_52 INTO select_ptr ;
      break ;
    case  53 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_53 INTO select_ptr ;
      break ;
    case  54 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_54 INTO select_ptr ;
      break ;
    case  55 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_55 INTO select_ptr ;
      break ;
    case  56 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_56 INTO select_ptr ;
      break ;
    case  57 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_57 INTO select_ptr ;
      break ;
    case  58 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_58 INTO select_ptr ;
      break ;
    case  59 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_59 INTO select_ptr ;
      break ;
    case  60 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_60 INTO select_ptr ;
      break ;
    case  61 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_61 INTO select_ptr ;
      break ;
    case  62 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_62 INTO select_ptr ;
      break ;
    case  63 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_63 INTO select_ptr ;
      break ;
    case  64 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_64 INTO select_ptr ;
      break ;
    case  65 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_65 INTO select_ptr ;
      break ;
    case  66 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_66 INTO select_ptr ;
      break ;
    case  67 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_67 INTO select_ptr ;
      break ;
    case  68 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_68 INTO select_ptr ;
      break ;
    case  69 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_69 INTO select_ptr ;
      break ;
    case  70 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_70 INTO select_ptr ;
      break ;
    case  71 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_71 INTO select_ptr ;
      break ;
    case  72 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_72 INTO select_ptr ;
      break ;
    case  73 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_73 INTO select_ptr ;
      break ;
    case  74 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_74 INTO select_ptr ;
      break ;
    case  75 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_75 INTO select_ptr ;
      break ;
    case  76 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_76 INTO select_ptr ;
      break ;
    case  77 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_77 INTO select_ptr ;
      break ;
    case  78 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_78 INTO select_ptr ;
      break ;
    case  79 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_79 INTO select_ptr ;
      break ;
    case  80 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_80 INTO select_ptr ;
      break ;
    case  81 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_81 INTO select_ptr ;
      break ;
    case  82 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_82 INTO select_ptr ;
      break ;
    case  83 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_83 INTO select_ptr ;
      break ;
    case  84 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_84 INTO select_ptr ;
      break ;
    case  85 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_85 INTO select_ptr ;
      break ;
    case  86 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_86 INTO select_ptr ;
      break ;
    case  87 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_87 INTO select_ptr ;
      break ;
    case  88 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_88 INTO select_ptr ;
      break ;
    case  89 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_89 INTO select_ptr ;
      break ;
    case  90 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_90 INTO select_ptr ;
      break ;
    case  91 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_91 INTO select_ptr ;
      break ;
    case  92 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_92 INTO select_ptr ;
      break ;
    case  93 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_93 INTO select_ptr ;
      break ;
    case  94 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_94 INTO select_ptr ;
      break ;
    case  95 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_95 INTO select_ptr ;
      break ;
    case  96 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_96 INTO select_ptr ;
      break ;
    case  97 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_97 INTO select_ptr ;
      break ;
    case  98 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_98 INTO select_ptr ;
      break ;
    case  99 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_99 INTO select_ptr ;
      break ;
    case 100 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_100 INTO select_ptr ;
      break ;
#ifndef SMSW
    case 101 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_101 INTO select_ptr ;
      break ;
    case 102 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_102 INTO select_ptr ;
      break ;
    case 103 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_103 INTO select_ptr ;
      break ;
    case 104 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_104 INTO select_ptr ;
      break ;
    case 105 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_105 INTO select_ptr ;
      break ;
    case 106 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_106 INTO select_ptr ;
      break ;
    case 107 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_107 INTO select_ptr ;
      break ;
    case 108 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_108 INTO select_ptr ;
      break ;
    case 109 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_109 INTO select_ptr ;
      break ;
    case 110 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_110 INTO select_ptr ;
      break ;
    case 111 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_111 INTO select_ptr ;
      break ;
    case 112 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_112 INTO select_ptr ;
      break ;
    case 113 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_113 INTO select_ptr ;
      break ;
    case 114 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_114 INTO select_ptr ;
      break ;
    case 115 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_115 INTO select_ptr ;
      break ;
    case 116 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_116 INTO select_ptr ;
      break ;
    case 117 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_117 INTO select_ptr ;
      break ;
    case 118 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_118 INTO select_ptr ;
      break ;
    case 119 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_119 INTO select_ptr ;
      break ;
    case 120 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_120 INTO select_ptr ;
      break ;
    case 121 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_121 INTO select_ptr ;
      break ;
    case 122 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_122 INTO select_ptr ;
      break ;
    case 123 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_123 INTO select_ptr ;
      break ;
    case 124 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_124 INTO select_ptr ;
      break ;
    case 125 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_125 INTO select_ptr ;
      break ;
    case 126 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_126 INTO select_ptr ;
      break ;
    case 127 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_127 INTO select_ptr ;
      break ;
    case 128 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_128 INTO select_ptr ;
      break ;
    case 129 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_129 INTO select_ptr ;
      break ;
    case 130 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_130 INTO select_ptr ;
      break ;
    case 131 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_131 INTO select_ptr ;
      break ;
    case 132 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_132 INTO select_ptr ;
      break ;
    case 133 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_133 INTO select_ptr ;
      break ;
    case 134 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_134 INTO select_ptr ;
      break ;
    case 135 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_135 INTO select_ptr ;
      break ;
    case 136 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_136 INTO select_ptr ;
      break ;
    case 137 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_137 INTO select_ptr ;
      break ;
    case 138 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_138 INTO select_ptr ;
      break ;
    case 139 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_139 INTO select_ptr ;
      break ;
    case 140 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_140 INTO select_ptr ;
      break ;
    case 141 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_141 INTO select_ptr ;
      break ;
    case 142 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_142 INTO select_ptr ;
      break ;
    case 143 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_143 INTO select_ptr ;
      break ;
    case 144 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_144 INTO select_ptr ;
      break ;
    case 145 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_145 INTO select_ptr ;
      break ;
    case 146 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_146 INTO select_ptr ;
      break ;
    case 147 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_147 INTO select_ptr ;
      break ;
    case 148 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_148 INTO select_ptr ;
      break ;
    case 149 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_149 INTO select_ptr ;
      break ;
    case 150 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_150 INTO select_ptr ;
      break ;
    case 151 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_151 INTO select_ptr ;
      break ;
    case 152 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_152 INTO select_ptr ;
      break ;
    case 153 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_153 INTO select_ptr ;
      break ;
    case 154 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_154 INTO select_ptr ;
      break ;
    case 155 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_155 INTO select_ptr ;
      break ;
    case 156 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_156 INTO select_ptr ;
      break ;
    case 157 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_157 INTO select_ptr ;
      break ;
    case 158 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_158 INTO select_ptr ;
      break ;
    case 159 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_159 INTO select_ptr ;
      break ;
    case 160 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_160 INTO select_ptr ;
      break ;
    case 161 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_161 INTO select_ptr ;
      break ;
    case 162 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_162 INTO select_ptr ;
      break ;
    case 163 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_163 INTO select_ptr ;
      break ;
    case 164 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_164 INTO select_ptr ;
      break ;
    case 165 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_165 INTO select_ptr ;
      break ;
    case 166 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_166 INTO select_ptr ;
      break ;
    case 167 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_167 INTO select_ptr ;
      break ;
    case 168 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_168 INTO select_ptr ;
      break ;
    case 169 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_169 INTO select_ptr ;
      break ;
    case 170 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_170 INTO select_ptr ;
      break ;
    case 171 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_171 INTO select_ptr ;
      break ;
    case 172 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_172 INTO select_ptr ;
      break ;
    case 173 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_173 INTO select_ptr ;
      break ;
    case 174 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_174 INTO select_ptr ;
      break ;
    case 175 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_175 INTO select_ptr ;
      break ;
    case 176 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_176 INTO select_ptr ;
      break ;
    case 177 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_177 INTO select_ptr ;
      break ;
    case 178 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_178 INTO select_ptr ;
      break ;
    case 179 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_179 INTO select_ptr ;
      break ;
    case 180 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_180 INTO select_ptr ;
      break ;
    case 181 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_181 INTO select_ptr ;
      break ;
    case 182 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_182 INTO select_ptr ;
      break ;
    case 183 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_183 INTO select_ptr ;
      break ;
    case 184 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_184 INTO select_ptr ;
      break ;
    case 185 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_185 INTO select_ptr ;
      break ;
    case 186 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_186 INTO select_ptr ;
      break ;
    case 187 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_187 INTO select_ptr ;
      break ;
    case 188 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_188 INTO select_ptr ;
      break ;
    case 189 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_189 INTO select_ptr ;
      break ;
    case 190 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_190 INTO select_ptr ;
      break ;
    case 191 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_191 INTO select_ptr ;
      break ;
    case 192 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_192 INTO select_ptr ;
      break ;
    case 193 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_193 INTO select_ptr ;
      break ;
    case 194 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_194 INTO select_ptr ;
      break ;
    case 195 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_195 INTO select_ptr ;
      break ;
    case 196 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_196 INTO select_ptr ;
      break ;
    case 197 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_197 INTO select_ptr ;
      break ;
    case 198 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_198 INTO select_ptr ;
      break ;
    case 199 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_199 INTO select_ptr ;
      break ;
    case 200 :
      EXEC SQL DESCRIBE SELECT LIST FOR prep_stmt_200 INTO select_ptr ;
      break ;
#endif
    default :

      iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for describe-select-list"), shandle, context[context_num].max_cursors);

      return GDB_ERROR ;
  }
  if (sqlca.sqlcode < 0) return GDB_EXT_ERROR ;

  /* Added F > N for AlphaOSF as it's not returning negative numbers in F */
  if (select_ptr->F < 0 || (select_ptr->F > select_ptr->N)) 
  {
    iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d%d%d", ENCOLEX, abs(select_ptr->F), /*context[context_num].max_ncols*/max_col_array_size) ;
    select_ptr->F = 0 ;
    return GDB_ERROR ;
  }
  select_ptr->N = select_ptr->F;  /* max items = max items found */
  *ncols = select_ptr->F ;

  /* decimal_flags is an array of flags used for tracking which columns are   */
  /* type DECIMAL(x, 0) where x >=9.  If we have already allocated it from a   */
  /* prior query, release its memory.  Then, allocate a new array based upon  */
  /* the number of columns we currently have.  XCALLOC initializes all        */
  /* element to 0.                                                            */
  /* ------------------------------------------------------------------------ */
  if (sqlGen->decimal_flags) free(sqlGen->decimal_flags) ;
  sqlGen->decimal_flags = NULL ;
  if (*ncols)
  {
    sqlGen->decimal_flags = XCALLOC(*ncols, sizeof(char)) ;
    if (sqlGen->decimal_flags == NULL)
    {
      iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Could not alloc mem for decimal_flags array"));

      iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
      return GDB_ERROR ;
    }
  }

  /* get datatype of each select item & alloc space */
  for (col=0;col<select_ptr->F;col++) 
  {
    sqlnul(&(select_ptr->T[col]), &(select_ptr->T[col]), &nullOK);  /* clear null bit */

    /* allocate indicator variables */
    if((select_ptr->I[col] = (short *)XCALLOC(context[context_num].genda_rows+1,
          sizeof(short *))) == NULL) 
          {
            iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Could not alloc mem for select_ptr array (I)"));

            iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
            return GDB_ERROR; /* addr of indicator vars */
            }

    /* Should coerce internal datatypes to desired external here this will reduce
       the size of the external datatype switch and instruct Oracle to convert its
       internal datatype to the desired external type. Should also reset descriptor
       length if necessary */

    switch (select_ptr->T[col])
    {
      case ORA_NUMBER :
          sqlpr2(&select_ptr->L[col], &prec, &scal) ;

          /* if scale is 0 and precision is 0 then the number could be either
             a float or int. Prec is set to 0 for some 'sql functions'. Therefore
             if prec is 0 assume a float result */

          if (scal == 0 && prec != 0 && prec < 9)
          {
             select_ptr->T[col] = ORA_INTEGER ;
             select_ptr->L[col] = sizeof(GDB_LONG) ;
             if ((select_ptr->V[col] = (char *)XCALLOC(context[context_num].genda_rows+1, select_ptr->L[col]+1)) == 0)
             {
                iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
                return GDB_ERROR ;
             }
          }

          /* Remember that values from this column could overflow G2 integers.*/
          /* Depending upon the value, the data type used to receive the      */
          /* value, and whether or not "smart fetch" is enabled, the value    */
          /* will be returned as either a float or an integer.                */
          /* ---------------------------------------------------------------- */
          else 
          {
            if (scal==0 && prec != 0)
                sqlGen->decimal_flags[col] = (char)TRUE ;
            select_ptr->T[col] = ORA_FLOAT;
            select_ptr->L[col] = sizeof(GDB_DBL) ;
            if ((select_ptr->V[col] = (char *)XCALLOC(context[context_num].genda_rows+1, select_ptr->L[col]+1)) == 0) 
            {
              iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
              return GDB_ERROR ;
            }
          }
          break ;

      case ORA_VARCHAR2 :
      case ORA_CHAR :
      case ORA_RAW :
          select_ptr->L[col]++;       /* required for CHAR */
          select_ptr->T[col] = ORA_STRING ;
          if ((select_ptr->V[col] = (char *)XCALLOC(context[context_num].genda_rows+1, select_ptr->L[col]+1)) == 0) 
          {
            iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
            return GDB_ERROR ;
          }
          break ;

      case ORA_LONG :
      case ORA_LONGRAW :
          select_ptr->L[col] = PR_MAX_GSI_STRING_LEN ;
          select_ptr->T[col] = ORA_STRING ;
          if ((select_ptr->V[col] = (char *)XCALLOC(context[context_num].genda_rows+1, select_ptr->L[col]+1)) == 0) 
          {
            iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
            return GDB_ERROR ;
          }
          break ;

      case ORA_ROWID :
          select_ptr->L[col] = 18 ;
          select_ptr->T[col] = ORA_STRING ;
          if ((select_ptr->V[col] = (char *)XCALLOC(context[context_num].genda_rows+1, select_ptr->L[col]+1)) == 0) 
          {
            iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
            return GDB_ERROR ;
          }
          break ;

      case ORA_DATE :
          select_ptr->L[col] = DATE_LEN ;
          select_ptr->T[col] = ORA_STRING ;
          if ((select_ptr->V[col] = (char *)XCALLOC(context[context_num].genda_rows+1, select_ptr->L[col]+1)) == 0) 
          {
            iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
            return GDB_ERROR ;
          }
          break ;

      default :
          iomsg(DBG3, LAYER, TRUE, TRUE, NULL, TRUE, "%d%d%d", EINVDTY, select_ptr->T[col], col+1) ;
          return GDB_ERROR ;
          break ;
    }
  }
  return GDB_SUCCESS ;
}


/*======================================================================
  sql_open_cursor
    - open the 'declared' cursor
    - cursors must be opened prior to executing a 'fetch'

    Arguments:
    - curs_name: cursor name
    - shandle: statement handle
  ======================================================================*/

long sql_open_cursor( curs_name, shandle )
    char  *curs_name ;
    long   shandle ;
{
  SQLDA     *bind_ptr ;

  context_num = gsi_current_context() ;

  if (shandle == 0 || curs_name == NULL)
    return GDB_ERROR ;

  if (debug & DBG1) {
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s%s", _T("SQL_OPEN_CURSOR: %"), curs_name);
  }

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  bind_ptr = sqlda_ptrs[context_num][shandle].bptr ;

  /* syntax OPEN <cursor> USING DESCRIPTOR <descriptor> is only required
     if using input (bind) host variables */

  switch (shandle) 
  {
    case   1 :
      EXEC SQL OPEN C1 USING DESCRIPTOR bind_ptr ;
      break ;
    case   2 :
      EXEC SQL OPEN C2 USING DESCRIPTOR bind_ptr ;
      break ;
    case   3 :
      EXEC SQL OPEN C3 USING DESCRIPTOR bind_ptr ;
      break ;
    case   4 :
      EXEC SQL OPEN C4 USING DESCRIPTOR bind_ptr ;
      break ;
    case   5 :
      EXEC SQL OPEN C5 USING DESCRIPTOR bind_ptr ;
      break ;
    case   6 :
      EXEC SQL OPEN C6 USING DESCRIPTOR bind_ptr ;
      break ;
    case   7 :
      EXEC SQL OPEN C7 USING DESCRIPTOR bind_ptr ;
      break ;
    case   8 :
      EXEC SQL OPEN C8 USING DESCRIPTOR bind_ptr ;
      break ;
    case   9 :
      EXEC SQL OPEN C9 USING DESCRIPTOR bind_ptr ;
      break ;
    case  10 :
      EXEC SQL OPEN C10 USING DESCRIPTOR bind_ptr ;
      break ;
    case  11 :
      EXEC SQL OPEN C11 USING DESCRIPTOR bind_ptr ;
      break ;
    case  12 :
      EXEC SQL OPEN C12 USING DESCRIPTOR bind_ptr ;
      break ;
    case  13 :
      EXEC SQL OPEN C13 USING DESCRIPTOR bind_ptr ;
      break ;
    case  14 :
      EXEC SQL OPEN C14 USING DESCRIPTOR bind_ptr ;
      break ;
    case  15 :
      EXEC SQL OPEN C15 USING DESCRIPTOR bind_ptr ;
      break ;
    case  16 :
      EXEC SQL OPEN C16 USING DESCRIPTOR bind_ptr ;
      break ;
    case  17 :
      EXEC SQL OPEN C17 USING DESCRIPTOR bind_ptr ;
      break ;
    case  18 :
      EXEC SQL OPEN C18 USING DESCRIPTOR bind_ptr ;
      break ;
    case  19 :
      EXEC SQL OPEN C19 USING DESCRIPTOR bind_ptr ;
      break ;
    case  20 :
      EXEC SQL OPEN C20 USING DESCRIPTOR bind_ptr ;
      break ;
    case  21 :
      EXEC SQL OPEN C21 USING DESCRIPTOR bind_ptr ;
      break ;
    case  22 :
      EXEC SQL OPEN C22 USING DESCRIPTOR bind_ptr ;
      break ;
    case  23 :
      EXEC SQL OPEN C23 USING DESCRIPTOR bind_ptr ;
      break ;
    case  24 :
      EXEC SQL OPEN C24 USING DESCRIPTOR bind_ptr ;
      break ;
    case  25 :
      EXEC SQL OPEN C25 USING DESCRIPTOR bind_ptr ;
      break ;
    case  26 :
      EXEC SQL OPEN C26 USING DESCRIPTOR bind_ptr ;
      break ;
    case  27 :
      EXEC SQL OPEN C27 USING DESCRIPTOR bind_ptr ;
      break ;
    case  28 :
      EXEC SQL OPEN C28 USING DESCRIPTOR bind_ptr ;
      break ;
    case  29 :
      EXEC SQL OPEN C29 USING DESCRIPTOR bind_ptr ;
      break ;
    case  30 :
      EXEC SQL OPEN C30 USING DESCRIPTOR bind_ptr ;
      break ;
    case  31 :
      EXEC SQL OPEN C31 USING DESCRIPTOR bind_ptr ;
      break ;
    case  32 :
      EXEC SQL OPEN C32 USING DESCRIPTOR bind_ptr ;
      break ;
    case  33 :
      EXEC SQL OPEN C33 USING DESCRIPTOR bind_ptr ;
      break ;
    case  34 :
      EXEC SQL OPEN C34 USING DESCRIPTOR bind_ptr ;
      break ;
    case  35 :
      EXEC SQL OPEN C35 USING DESCRIPTOR bind_ptr ;
      break ;
    case  36 :
      EXEC SQL OPEN C36 USING DESCRIPTOR bind_ptr ;
      break ;
    case  37 :
      EXEC SQL OPEN C37 USING DESCRIPTOR bind_ptr ;
      break ;
    case  38 :
      EXEC SQL OPEN C38 USING DESCRIPTOR bind_ptr ;
      break ;
    case  39 :
      EXEC SQL OPEN C39 USING DESCRIPTOR bind_ptr ;
      break ;
    case  40 :
      EXEC SQL OPEN C40 USING DESCRIPTOR bind_ptr ;
      break ;
    case  41 :
      EXEC SQL OPEN C41 USING DESCRIPTOR bind_ptr ;
      break ;
    case  42 :
      EXEC SQL OPEN C42 USING DESCRIPTOR bind_ptr ;
      break ;
    case  43 :
      EXEC SQL OPEN C43 USING DESCRIPTOR bind_ptr ;
      break ;
    case  44 :
      EXEC SQL OPEN C44 USING DESCRIPTOR bind_ptr ;
      break ;
    case  45 :
      EXEC SQL OPEN C45 USING DESCRIPTOR bind_ptr ;
      break ;
    case  46 :
      EXEC SQL OPEN C46 USING DESCRIPTOR bind_ptr ;
      break ;
    case  47 :
      EXEC SQL OPEN C47 USING DESCRIPTOR bind_ptr ;
      break ;
    case  48 :
      EXEC SQL OPEN C48 USING DESCRIPTOR bind_ptr ;
      break ;
    case  49 :
      EXEC SQL OPEN C49 USING DESCRIPTOR bind_ptr ;
      break ;
    case  50 :
      EXEC SQL OPEN C50 USING DESCRIPTOR bind_ptr ;
      break ;
    case  51 :
      EXEC SQL OPEN C51 USING DESCRIPTOR bind_ptr ;
      break ;
    case  52 :
      EXEC SQL OPEN C52 USING DESCRIPTOR bind_ptr ;
      break ;
    case  53 :
      EXEC SQL OPEN C53 USING DESCRIPTOR bind_ptr ;
      break ;
    case  54 :
      EXEC SQL OPEN C54 USING DESCRIPTOR bind_ptr ;
      break ;
    case  55 :
      EXEC SQL OPEN C55 USING DESCRIPTOR bind_ptr ;
      break ;
    case  56 :
      EXEC SQL OPEN C56 USING DESCRIPTOR bind_ptr ;
      break ;
    case  57 :
      EXEC SQL OPEN C57 USING DESCRIPTOR bind_ptr ;
      break ;
    case  58 :
      EXEC SQL OPEN C58 USING DESCRIPTOR bind_ptr ;
      break ;
    case  59 :
      EXEC SQL OPEN C59 USING DESCRIPTOR bind_ptr ;
      break ;
    case  60 :
      EXEC SQL OPEN C60 USING DESCRIPTOR bind_ptr ;
      break ;
    case  61 :
      EXEC SQL OPEN C61 USING DESCRIPTOR bind_ptr ;
      break ;
    case  62 :
      EXEC SQL OPEN C62 USING DESCRIPTOR bind_ptr ;
      break ;
    case  63 :
      EXEC SQL OPEN C63 USING DESCRIPTOR bind_ptr ;
      break ;
    case  64 :
      EXEC SQL OPEN C64 USING DESCRIPTOR bind_ptr ;
      break ;
    case  65 :
      EXEC SQL OPEN C65 USING DESCRIPTOR bind_ptr ;
      break ;
    case  66 :
      EXEC SQL OPEN C66 USING DESCRIPTOR bind_ptr ;
      break ;
    case  67 :
      EXEC SQL OPEN C67 USING DESCRIPTOR bind_ptr ;
      break ;
    case  68 :
      EXEC SQL OPEN C68 USING DESCRIPTOR bind_ptr ;
      break ;
    case  69 :
      EXEC SQL OPEN C69 USING DESCRIPTOR bind_ptr ;
      break ;
    case  70 :
      EXEC SQL OPEN C70 USING DESCRIPTOR bind_ptr ;
      break ;
    case  71 :
      EXEC SQL OPEN C71 USING DESCRIPTOR bind_ptr ;
      break ;
    case  72 :
      EXEC SQL OPEN C72 USING DESCRIPTOR bind_ptr ;
      break ;
    case  73 :
      EXEC SQL OPEN C73 USING DESCRIPTOR bind_ptr ;
      break ;
    case  74 :
      EXEC SQL OPEN C74 USING DESCRIPTOR bind_ptr ;
      break ;
    case  75 :
      EXEC SQL OPEN C75 USING DESCRIPTOR bind_ptr ;
      break ;
    case  76 :
      EXEC SQL OPEN C76 USING DESCRIPTOR bind_ptr ;
      break ;
    case  77 :
      EXEC SQL OPEN C77 USING DESCRIPTOR bind_ptr ;
      break ;
    case  78 :
      EXEC SQL OPEN C78 USING DESCRIPTOR bind_ptr ;
      break ;
    case  79 :
      EXEC SQL OPEN C79 USING DESCRIPTOR bind_ptr ;
      break ;
    case  80 :
      EXEC SQL OPEN C80 USING DESCRIPTOR bind_ptr ;
      break ;
    case  81 :
      EXEC SQL OPEN C81 USING DESCRIPTOR bind_ptr ;
      break ;
    case  82 :
      EXEC SQL OPEN C82 USING DESCRIPTOR bind_ptr ;
      break ;
    case  83 :
      EXEC SQL OPEN C83 USING DESCRIPTOR bind_ptr ;
      break ;
    case  84 :
      EXEC SQL OPEN C84 USING DESCRIPTOR bind_ptr ;
      break ;
    case  85 :
      EXEC SQL OPEN C85 USING DESCRIPTOR bind_ptr ;
      break ;
    case  86 :
      EXEC SQL OPEN C86 USING DESCRIPTOR bind_ptr ;
      break ;
    case  87 :
      EXEC SQL OPEN C87 USING DESCRIPTOR bind_ptr ;
      break ;
    case  88 :
      EXEC SQL OPEN C88 USING DESCRIPTOR bind_ptr ;
      break ;
    case  89 :
      EXEC SQL OPEN C89 USING DESCRIPTOR bind_ptr ;
      break ;
    case  90 :
      EXEC SQL OPEN C90 USING DESCRIPTOR bind_ptr ;
      break ;
    case  91 :
      EXEC SQL OPEN C91 USING DESCRIPTOR bind_ptr ;
      break ;
    case  92 :
      EXEC SQL OPEN C92 USING DESCRIPTOR bind_ptr ;
      break ;
    case  93 :
      EXEC SQL OPEN C93 USING DESCRIPTOR bind_ptr ;
      break ;
    case  94 :
      EXEC SQL OPEN C94 USING DESCRIPTOR bind_ptr ;
      break ;
    case  95 :
      EXEC SQL OPEN C95 USING DESCRIPTOR bind_ptr ;
      break ;
    case  96 :
      EXEC SQL OPEN C96 USING DESCRIPTOR bind_ptr ;
      break ;
    case  97 :
      EXEC SQL OPEN C97 USING DESCRIPTOR bind_ptr ;
      break ;
    case  98 :
      EXEC SQL OPEN C98 USING DESCRIPTOR bind_ptr ;
      break ;
    case  99 :
      EXEC SQL OPEN C99 USING DESCRIPTOR bind_ptr ;
      break ;
    case 100 :
      EXEC SQL OPEN C100 USING DESCRIPTOR bind_ptr ;
      break ;
#ifndef SMSW
    case 101 :
      EXEC SQL OPEN C101 USING DESCRIPTOR bind_ptr ;
      break ;
    case 102 :
      EXEC SQL OPEN C102 USING DESCRIPTOR bind_ptr ;
      break ;
    case 103 :
      EXEC SQL OPEN C103 USING DESCRIPTOR bind_ptr ;
      break ;
    case 104 :
      EXEC SQL OPEN C104 USING DESCRIPTOR bind_ptr ;
      break ;
    case 105 :
      EXEC SQL OPEN C105 USING DESCRIPTOR bind_ptr ;
      break ;
    case 106 :
      EXEC SQL OPEN C106 USING DESCRIPTOR bind_ptr ;
      break ;
    case 107 :
      EXEC SQL OPEN C107 USING DESCRIPTOR bind_ptr ;
      break ;
    case 108 :
      EXEC SQL OPEN C108 USING DESCRIPTOR bind_ptr ;
      break ;
    case 109 :
      EXEC SQL OPEN C109 USING DESCRIPTOR bind_ptr ;
      break ;
    case 110 :
      EXEC SQL OPEN C110 USING DESCRIPTOR bind_ptr ;
      break ;
    case 111 :
      EXEC SQL OPEN C111 USING DESCRIPTOR bind_ptr ;
      break ;
    case 112 :
      EXEC SQL OPEN C112 USING DESCRIPTOR bind_ptr ;
      break ;
    case 113 :
      EXEC SQL OPEN C113 USING DESCRIPTOR bind_ptr ;
      break ;
    case 114 :
      EXEC SQL OPEN C114 USING DESCRIPTOR bind_ptr ;
      break ;
    case 115 :
      EXEC SQL OPEN C115 USING DESCRIPTOR bind_ptr ;
      break ;
    case 116 :
      EXEC SQL OPEN C116 USING DESCRIPTOR bind_ptr ;
      break ;
    case 117 :
      EXEC SQL OPEN C117 USING DESCRIPTOR bind_ptr ;
      break ;
    case 118 :
      EXEC SQL OPEN C118 USING DESCRIPTOR bind_ptr ;
      break ;
    case 119 :
      EXEC SQL OPEN C119 USING DESCRIPTOR bind_ptr ;
      break ;
    case 120 :
      EXEC SQL OPEN C120 USING DESCRIPTOR bind_ptr ;
      break ;
    case 121 :
      EXEC SQL OPEN C121 USING DESCRIPTOR bind_ptr ;
      break ;
    case 122 :
      EXEC SQL OPEN C122 USING DESCRIPTOR bind_ptr ;
      break ;
    case 123 :
      EXEC SQL OPEN C123 USING DESCRIPTOR bind_ptr ;
      break ;
    case 124 :
      EXEC SQL OPEN C124 USING DESCRIPTOR bind_ptr ;
      break ;
    case 125 :
      EXEC SQL OPEN C125 USING DESCRIPTOR bind_ptr ;
      break ;
    case 126 :
      EXEC SQL OPEN C126 USING DESCRIPTOR bind_ptr ;
      break ;
    case 127 :
      EXEC SQL OPEN C127 USING DESCRIPTOR bind_ptr ;
      break ;
    case 128 :
      EXEC SQL OPEN C128 USING DESCRIPTOR bind_ptr ;
      break ;
    case 129 :
      EXEC SQL OPEN C129 USING DESCRIPTOR bind_ptr ;
      break ;
    case 130 :
      EXEC SQL OPEN C130 USING DESCRIPTOR bind_ptr ;
      break ;
    case 131 :
      EXEC SQL OPEN C131 USING DESCRIPTOR bind_ptr ;
      break ;
    case 132 :
      EXEC SQL OPEN C132 USING DESCRIPTOR bind_ptr ;
      break ;
    case 133 :
      EXEC SQL OPEN C133 USING DESCRIPTOR bind_ptr ;
      break ;
    case 134 :
      EXEC SQL OPEN C134 USING DESCRIPTOR bind_ptr ;
      break ;
    case 135 :
      EXEC SQL OPEN C135 USING DESCRIPTOR bind_ptr ;
      break ;
    case 136 :
      EXEC SQL OPEN C136 USING DESCRIPTOR bind_ptr ;
      break ;
    case 137 :
      EXEC SQL OPEN C137 USING DESCRIPTOR bind_ptr ;
      break ;
    case 138 :
      EXEC SQL OPEN C138 USING DESCRIPTOR bind_ptr ;
      break ;
    case 139 :
      EXEC SQL OPEN C139 USING DESCRIPTOR bind_ptr ;
      break ;
    case 140 :
      EXEC SQL OPEN C140 USING DESCRIPTOR bind_ptr ;
      break ;
    case 141 :
      EXEC SQL OPEN C141 USING DESCRIPTOR bind_ptr ;
      break ;
    case 142 :
      EXEC SQL OPEN C142 USING DESCRIPTOR bind_ptr ;
      break ;
    case 143 :
      EXEC SQL OPEN C143 USING DESCRIPTOR bind_ptr ;
      break ;
    case 144 :
      EXEC SQL OPEN C144 USING DESCRIPTOR bind_ptr ;
      break ;
    case 145 :
      EXEC SQL OPEN C145 USING DESCRIPTOR bind_ptr ;
      break ;
    case 146 :
      EXEC SQL OPEN C146 USING DESCRIPTOR bind_ptr ;
      break ;
    case 147 :
      EXEC SQL OPEN C147 USING DESCRIPTOR bind_ptr ;
      break ;
    case 148 :
      EXEC SQL OPEN C148 USING DESCRIPTOR bind_ptr ;
      break ;
    case 149 :
      EXEC SQL OPEN C149 USING DESCRIPTOR bind_ptr ;
      break ;
    case 150 :
      EXEC SQL OPEN C150 USING DESCRIPTOR bind_ptr ;
      break ;
    case 151 :
      EXEC SQL OPEN C151 USING DESCRIPTOR bind_ptr ;
      break ;
    case 152 :
      EXEC SQL OPEN C152 USING DESCRIPTOR bind_ptr ;
      break ;
    case 153 :
      EXEC SQL OPEN C153 USING DESCRIPTOR bind_ptr ;
      break ;
    case 154 :
      EXEC SQL OPEN C154 USING DESCRIPTOR bind_ptr ;
      break ;
    case 155 :
      EXEC SQL OPEN C155 USING DESCRIPTOR bind_ptr ;
      break ;
    case 156 :
      EXEC SQL OPEN C156 USING DESCRIPTOR bind_ptr ;
      break ;
    case 157 :
      EXEC SQL OPEN C157 USING DESCRIPTOR bind_ptr ;
      break ;
    case 158 :
      EXEC SQL OPEN C158 USING DESCRIPTOR bind_ptr ;
      break ;
    case 159 :
      EXEC SQL OPEN C159 USING DESCRIPTOR bind_ptr ;
      break ;
    case 160 :
      EXEC SQL OPEN C160 USING DESCRIPTOR bind_ptr ;
      break ;
    case 161 :
      EXEC SQL OPEN C161 USING DESCRIPTOR bind_ptr ;
      break ;
    case 162 :
      EXEC SQL OPEN C162 USING DESCRIPTOR bind_ptr ;
      break ;
    case 163 :
      EXEC SQL OPEN C163 USING DESCRIPTOR bind_ptr ;
      break ;
    case 164 :
      EXEC SQL OPEN C164 USING DESCRIPTOR bind_ptr ;
      break ;
    case 165 :
      EXEC SQL OPEN C165 USING DESCRIPTOR bind_ptr ;
      break ;
    case 166 :
      EXEC SQL OPEN C166 USING DESCRIPTOR bind_ptr ;
      break ;
    case 167 :
      EXEC SQL OPEN C167 USING DESCRIPTOR bind_ptr ;
      break ;
    case 168 :
      EXEC SQL OPEN C168 USING DESCRIPTOR bind_ptr ;
      break ;
    case 169 :
      EXEC SQL OPEN C169 USING DESCRIPTOR bind_ptr ;
      break ;
    case 170 :
      EXEC SQL OPEN C170 USING DESCRIPTOR bind_ptr ;
      break ;
    case 171 :
      EXEC SQL OPEN C171 USING DESCRIPTOR bind_ptr ;
      break ;
    case 172 :
      EXEC SQL OPEN C172 USING DESCRIPTOR bind_ptr ;
      break ;
    case 173 :
      EXEC SQL OPEN C173 USING DESCRIPTOR bind_ptr ;
      break ;
    case 174 :
      EXEC SQL OPEN C174 USING DESCRIPTOR bind_ptr ;
      break ;
    case 175 :
      EXEC SQL OPEN C175 USING DESCRIPTOR bind_ptr ;
      break ;
    case 176 :
      EXEC SQL OPEN C176 USING DESCRIPTOR bind_ptr ;
      break ;
    case 177 :
      EXEC SQL OPEN C177 USING DESCRIPTOR bind_ptr ;
      break ;
    case 178 :
      EXEC SQL OPEN C178 USING DESCRIPTOR bind_ptr ;
      break ;
    case 179 :
      EXEC SQL OPEN C179 USING DESCRIPTOR bind_ptr ;
      break ;
    case 180 :
      EXEC SQL OPEN C180 USING DESCRIPTOR bind_ptr ;
      break ;
    case 181 :
      EXEC SQL OPEN C181 USING DESCRIPTOR bind_ptr ;
      break ;
    case 182 :
      EXEC SQL OPEN C182 USING DESCRIPTOR bind_ptr ;
      break ;
    case 183 :
      EXEC SQL OPEN C183 USING DESCRIPTOR bind_ptr ;
      break ;
    case 184 :
      EXEC SQL OPEN C184 USING DESCRIPTOR bind_ptr ;
      break ;
    case 185 :
      EXEC SQL OPEN C185 USING DESCRIPTOR bind_ptr ;
      break ;
    case 186 :
      EXEC SQL OPEN C186 USING DESCRIPTOR bind_ptr ;
      break ;
    case 187 :
      EXEC SQL OPEN C187 USING DESCRIPTOR bind_ptr ;
      break ;
    case 188 :
      EXEC SQL OPEN C188 USING DESCRIPTOR bind_ptr ;
      break ;
    case 189 :
      EXEC SQL OPEN C189 USING DESCRIPTOR bind_ptr ;
      break ;
    case 190 :
      EXEC SQL OPEN C190 USING DESCRIPTOR bind_ptr ;
      break ;
    case 191 :
      EXEC SQL OPEN C191 USING DESCRIPTOR bind_ptr ;
      break ;
    case 192 :
      EXEC SQL OPEN C192 USING DESCRIPTOR bind_ptr ;
      break ;
    case 193 :
      EXEC SQL OPEN C193 USING DESCRIPTOR bind_ptr ;
      break ;
    case 194 :
      EXEC SQL OPEN C194 USING DESCRIPTOR bind_ptr ;
      break ;
    case 195 :
      EXEC SQL OPEN C195 USING DESCRIPTOR bind_ptr ;
      break ;
    case 196 :
      EXEC SQL OPEN C196 USING DESCRIPTOR bind_ptr ;
      break ;
    case 197 :
      EXEC SQL OPEN C197 USING DESCRIPTOR bind_ptr ;
      break ;
    case 198 :
      EXEC SQL OPEN C198 USING DESCRIPTOR bind_ptr ;
      break ;
    case 199 :
      EXEC SQL OPEN C199 USING DESCRIPTOR bind_ptr ;
      break ;
    case 200 :
      EXEC SQL OPEN C200 USING DESCRIPTOR bind_ptr ;
      break ;
#endif
    default :

      iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for open cursor"), shandle, context[context_num].max_cursors);

      return GDB_ERROR ;
    }

    if (sqlca.sqlcode < 0)
        return GDB_EXT_ERROR ;
    else
    {
        sqlda_ptrs[context_num][shandle].fCursorOpen = TRUE ;
        return GDB_SUCCESS ;
    }
}


/*======================================================================
  sql_fetch
    - fetch a database row into the defined descriptor
    - 'get descriptor' must be used to extract row from descriptor

    Arguments:
    - curs_name: cursor name
    - shandle: statment handle
  ======================================================================*/

long sql_fetch(GDB_CHAR *curs_name, long shandle)
{
  SQLDA     *select_ptr ;
  char      tmp_curs_name[MAX_DCURS_LEN+1] ;
  long      retry=0 ;
  long      status ;

  context_num = gsi_current_context() ;

  if (shandle == 0) return GDB_ERROR ;

  if (debug & DBG1) {
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s%s", _T("SQL_FETCH: %"), curs_name);
  }

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

    array_size = context[context_num].genda_rows ;
    select_ptr = sqlda_ptrs[context_num][shandle].sptr ;

    /* Make sure the cursor is open before trying to fetch */
    /* --------------------------------------------------- */
    if (!sqlda_ptrs[context_num][shandle].fCursorOpen)
    {
        status = sql_open_cursor(curs_name, shandle) ;
        if (status)
        {
            iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d"), _T("Unable to open cursor "), shandle);
			
            return GDB_ERROR ;
        }
    }

    if (debug & DBG10)
        dump_descriptor(select_ptr, array_size) ;

  while (1)
  {
    switch (shandle) 
    {
      case   1 :
        EXEC SQL FOR :array_size FETCH C1 USING DESCRIPTOR select_ptr ;
        break ;
      case   2 :
        EXEC SQL FOR :array_size FETCH C2 USING DESCRIPTOR select_ptr ;
        break ;
      case   3 :
        EXEC SQL FOR :array_size FETCH C3 USING DESCRIPTOR select_ptr ;
        break ;
      case   4 :
        EXEC SQL FOR :array_size FETCH C4 USING DESCRIPTOR select_ptr ;
        break ;
      case   5 :
        EXEC SQL FOR :array_size FETCH C5 USING DESCRIPTOR select_ptr ;
        break ;
      case   6 :
        EXEC SQL FOR :array_size FETCH C6 USING DESCRIPTOR select_ptr ;
        break ;
      case   7 :
        EXEC SQL FOR :array_size FETCH C7 USING DESCRIPTOR select_ptr ;
        break ;
      case   8 :
        EXEC SQL FOR :array_size FETCH C8 USING DESCRIPTOR select_ptr ;
        break ;
      case   9 :
        EXEC SQL FOR :array_size FETCH C9 USING DESCRIPTOR select_ptr ;
        break ;
      case  10 :
        EXEC SQL FOR :array_size FETCH C10 USING DESCRIPTOR select_ptr ;
        break ;
      case  11 :
        EXEC SQL FOR :array_size FETCH C11 USING DESCRIPTOR select_ptr ;
        break ;
      case  12 :
        EXEC SQL FOR :array_size FETCH C12 USING DESCRIPTOR select_ptr ;
        break ;
      case  13 :
        EXEC SQL FOR :array_size FETCH C13 USING DESCRIPTOR select_ptr ;
        break ;
      case  14 :
        EXEC SQL FOR :array_size FETCH C14 USING DESCRIPTOR select_ptr ;
        break ;
      case  15 :
        EXEC SQL FOR :array_size FETCH C15 USING DESCRIPTOR select_ptr ;
        break ;
      case  16 :
        EXEC SQL FOR :array_size FETCH C16 USING DESCRIPTOR select_ptr ;
        break ;
      case  17 :
        EXEC SQL FOR :array_size FETCH C17 USING DESCRIPTOR select_ptr ;
        break ;
      case  18 :
        EXEC SQL FOR :array_size FETCH C18 USING DESCRIPTOR select_ptr ;
        break ;
      case  19 :
        EXEC SQL FOR :array_size FETCH C19 USING DESCRIPTOR select_ptr ;
        break ;
      case  20 :
        EXEC SQL FOR :array_size FETCH C20 USING DESCRIPTOR select_ptr ;
        break ;
      case  21 :
        EXEC SQL FOR :array_size FETCH C21 USING DESCRIPTOR select_ptr ;
        break ;
      case  22 :
        EXEC SQL FOR :array_size FETCH C22 USING DESCRIPTOR select_ptr ;
        break ;
      case  23 :
        EXEC SQL FOR :array_size FETCH C23 USING DESCRIPTOR select_ptr ;
        break ;
      case  24 :
        EXEC SQL FOR :array_size FETCH C24 USING DESCRIPTOR select_ptr ;
        break ;
      case  25 :
        EXEC SQL FOR :array_size FETCH C25 USING DESCRIPTOR select_ptr ;
        break ;
      case  26 :
        EXEC SQL FOR :array_size FETCH C26 USING DESCRIPTOR select_ptr ;
        break ;
      case  27 :
        EXEC SQL FOR :array_size FETCH C27 USING DESCRIPTOR select_ptr ;
        break ;
      case  28 :
        EXEC SQL FOR :array_size FETCH C28 USING DESCRIPTOR select_ptr ;
        break ;
      case  29 :
        EXEC SQL FOR :array_size FETCH C29 USING DESCRIPTOR select_ptr ;
        break ;
      case  30 :
        EXEC SQL FOR :array_size FETCH C30 USING DESCRIPTOR select_ptr ;
        break ;
      case  31 :
        EXEC SQL FOR :array_size FETCH C31 USING DESCRIPTOR select_ptr ;
        break ;
      case  32 :
        EXEC SQL FOR :array_size FETCH C32 USING DESCRIPTOR select_ptr ;
        break ;
      case  33 :
        EXEC SQL FOR :array_size FETCH C33 USING DESCRIPTOR select_ptr ;
        break ;
      case  34 :
        EXEC SQL FOR :array_size FETCH C34 USING DESCRIPTOR select_ptr ;
        break ;
      case  35 :
        EXEC SQL FOR :array_size FETCH C35 USING DESCRIPTOR select_ptr ;
        break ;
      case  36 :
        EXEC SQL FOR :array_size FETCH C36 USING DESCRIPTOR select_ptr ;
        break ;
      case  37 :
        EXEC SQL FOR :array_size FETCH C37 USING DESCRIPTOR select_ptr ;
        break ;
      case  38 :
        EXEC SQL FOR :array_size FETCH C38 USING DESCRIPTOR select_ptr ;
        break ;
      case  39 :
        EXEC SQL FOR :array_size FETCH C39 USING DESCRIPTOR select_ptr ;
        break ;
      case  40 :
        EXEC SQL FOR :array_size FETCH C40 USING DESCRIPTOR select_ptr ;
        break ;
      case  41 :
        EXEC SQL FOR :array_size FETCH C41 USING DESCRIPTOR select_ptr ;
        break ;
      case  42 :
        EXEC SQL FOR :array_size FETCH C42 USING DESCRIPTOR select_ptr ;
        break ;
      case  43 :
        EXEC SQL FOR :array_size FETCH C43 USING DESCRIPTOR select_ptr ;
        break ;
      case  44 :
        EXEC SQL FOR :array_size FETCH C44 USING DESCRIPTOR select_ptr ;
        break ;
      case  45 :
        EXEC SQL FOR :array_size FETCH C45 USING DESCRIPTOR select_ptr ;
        break ;
      case  46 :
        EXEC SQL FOR :array_size FETCH C46 USING DESCRIPTOR select_ptr ;
        break ;
      case  47 :
        EXEC SQL FOR :array_size FETCH C47 USING DESCRIPTOR select_ptr ;
        break ;
      case  48 :
        EXEC SQL FOR :array_size FETCH C48 USING DESCRIPTOR select_ptr ;
        break ;
      case  49 :
        EXEC SQL FOR :array_size FETCH C49 USING DESCRIPTOR select_ptr ;
        break ;
      case  50 :
        EXEC SQL FOR :array_size FETCH C50 USING DESCRIPTOR select_ptr ;
        break ;
      case  51 :
        EXEC SQL FOR :array_size FETCH C51 USING DESCRIPTOR select_ptr ;
        break ;
      case  52 :
        EXEC SQL FOR :array_size FETCH C52 USING DESCRIPTOR select_ptr ;
        break ;
      case  53 :
        EXEC SQL FOR :array_size FETCH C53 USING DESCRIPTOR select_ptr ;
        break ;
      case  54 :
        EXEC SQL FOR :array_size FETCH C54 USING DESCRIPTOR select_ptr ;
        break ;
      case  55 :
        EXEC SQL FOR :array_size FETCH C55 USING DESCRIPTOR select_ptr ;
        break ;
      case  56 :
        EXEC SQL FOR :array_size FETCH C56 USING DESCRIPTOR select_ptr ;
        break ;
      case  57 :
        EXEC SQL FOR :array_size FETCH C57 USING DESCRIPTOR select_ptr ;
        break ;
      case  58 :
        EXEC SQL FOR :array_size FETCH C58 USING DESCRIPTOR select_ptr ;
        break ;
      case  59 :
        EXEC SQL FOR :array_size FETCH C59 USING DESCRIPTOR select_ptr ;
        break ;
      case  60 :
        EXEC SQL FOR :array_size FETCH C60 USING DESCRIPTOR select_ptr ;
        break ;
      case  61 :
        EXEC SQL FOR :array_size FETCH C61 USING DESCRIPTOR select_ptr ;
        break ;
      case  62 :
        EXEC SQL FOR :array_size FETCH C62 USING DESCRIPTOR select_ptr ;
        break ;
      case  63 :
        EXEC SQL FOR :array_size FETCH C63 USING DESCRIPTOR select_ptr ;
        break ;
      case  64 :
        EXEC SQL FOR :array_size FETCH C64 USING DESCRIPTOR select_ptr ;
        break ;
      case  65 :
        EXEC SQL FOR :array_size FETCH C65 USING DESCRIPTOR select_ptr ;
        break ;
      case  66 :
        EXEC SQL FOR :array_size FETCH C66 USING DESCRIPTOR select_ptr ;
        break ;
      case  67 :
        EXEC SQL FOR :array_size FETCH C67 USING DESCRIPTOR select_ptr ;
        break ;
      case  68 :
        EXEC SQL FOR :array_size FETCH C68 USING DESCRIPTOR select_ptr ;
        break ;
      case  69 :
        EXEC SQL FOR :array_size FETCH C69 USING DESCRIPTOR select_ptr ;
        break ;
      case  70 :
        EXEC SQL FOR :array_size FETCH C70 USING DESCRIPTOR select_ptr ;
        break ;
      case  71 :
        EXEC SQL FOR :array_size FETCH C71 USING DESCRIPTOR select_ptr ;
        break ;
      case  72 :
        EXEC SQL FOR :array_size FETCH C72 USING DESCRIPTOR select_ptr ;
        break ;
      case  73 :
        EXEC SQL FOR :array_size FETCH C73 USING DESCRIPTOR select_ptr ;
        break ;
      case  74 :
        EXEC SQL FOR :array_size FETCH C74 USING DESCRIPTOR select_ptr ;
        break ;
      case  75 :
        EXEC SQL FOR :array_size FETCH C75 USING DESCRIPTOR select_ptr ;
        break ;
      case  76 :
        EXEC SQL FOR :array_size FETCH C76 USING DESCRIPTOR select_ptr ;
        break ;
      case  77 :
        EXEC SQL FOR :array_size FETCH C77 USING DESCRIPTOR select_ptr ;
        break ;
      case  78 :
        EXEC SQL FOR :array_size FETCH C78 USING DESCRIPTOR select_ptr ;
        break ;
      case  79 :
        EXEC SQL FOR :array_size FETCH C79 USING DESCRIPTOR select_ptr ;
        break ;
      case  80 :
        EXEC SQL FOR :array_size FETCH C80 USING DESCRIPTOR select_ptr ;
        break ;
      case  81 :
        EXEC SQL FOR :array_size FETCH C81 USING DESCRIPTOR select_ptr ;
        break ;
      case  82 :
        EXEC SQL FOR :array_size FETCH C82 USING DESCRIPTOR select_ptr ;
        break ;
      case  83 :
        EXEC SQL FOR :array_size FETCH C83 USING DESCRIPTOR select_ptr ;
        break ;
      case  84 :
        EXEC SQL FOR :array_size FETCH C84 USING DESCRIPTOR select_ptr ;
        break ;
      case  85 :
        EXEC SQL FOR :array_size FETCH C85 USING DESCRIPTOR select_ptr ;
        break ;
      case  86 :
        EXEC SQL FOR :array_size FETCH C86 USING DESCRIPTOR select_ptr ;
        break ;
      case  87 :
        EXEC SQL FOR :array_size FETCH C87 USING DESCRIPTOR select_ptr ;
        break ;
      case  88 :
        EXEC SQL FOR :array_size FETCH C88 USING DESCRIPTOR select_ptr ;
        break ;
      case  89 :
        EXEC SQL FOR :array_size FETCH C89 USING DESCRIPTOR select_ptr ;
        break ;
      case  90 :
        EXEC SQL FOR :array_size FETCH C90 USING DESCRIPTOR select_ptr ;
        break ;
      case  91 :
        EXEC SQL FOR :array_size FETCH C91 USING DESCRIPTOR select_ptr ;
        break ;
      case  92 :
        EXEC SQL FOR :array_size FETCH C92 USING DESCRIPTOR select_ptr ;
        break ;
      case  93 :
        EXEC SQL FOR :array_size FETCH C93 USING DESCRIPTOR select_ptr ;
        break ;
      case  94 :
        EXEC SQL FOR :array_size FETCH C94 USING DESCRIPTOR select_ptr ;
        break ;
      case  95 :
        EXEC SQL FOR :array_size FETCH C95 USING DESCRIPTOR select_ptr ;
        break ;
      case  96 :
        EXEC SQL FOR :array_size FETCH C96 USING DESCRIPTOR select_ptr ;
        break ;
      case  97 :
        EXEC SQL FOR :array_size FETCH C97 USING DESCRIPTOR select_ptr ;
        break ;
      case  98 :
        EXEC SQL FOR :array_size FETCH C98 USING DESCRIPTOR select_ptr ;
        break ;
      case  99 :
        EXEC SQL FOR :array_size FETCH C99 USING DESCRIPTOR select_ptr ;
        break ;
      case 100 :
        EXEC SQL FOR :array_size FETCH C100 USING DESCRIPTOR select_ptr ;
        break ;
#ifndef SMSW
      case 101 :
        EXEC SQL FOR :array_size FETCH C101 USING DESCRIPTOR select_ptr ;
        break ;
      case 102 :
        EXEC SQL FOR :array_size FETCH C102 USING DESCRIPTOR select_ptr ;
        break ;
      case 103 :
        EXEC SQL FOR :array_size FETCH C103 USING DESCRIPTOR select_ptr ;
        break ;
      case 104 :
        EXEC SQL FOR :array_size FETCH C104 USING DESCRIPTOR select_ptr ;
        break ;
      case 105 :
        EXEC SQL FOR :array_size FETCH C105 USING DESCRIPTOR select_ptr ;
        break ;
      case 106 :
        EXEC SQL FOR :array_size FETCH C106 USING DESCRIPTOR select_ptr ;
        break ;
      case 107 :
        EXEC SQL FOR :array_size FETCH C107 USING DESCRIPTOR select_ptr ;
        break ;
      case 108 :
        EXEC SQL FOR :array_size FETCH C108 USING DESCRIPTOR select_ptr ;
        break ;
      case 109 :
        EXEC SQL FOR :array_size FETCH C109 USING DESCRIPTOR select_ptr ;
        break ;
      case 110 :
        EXEC SQL FOR :array_size FETCH C110 USING DESCRIPTOR select_ptr ;
        break ;
      case 111 :
        EXEC SQL FOR :array_size FETCH C111 USING DESCRIPTOR select_ptr ;
        break ;
      case 112 :
        EXEC SQL FOR :array_size FETCH C112 USING DESCRIPTOR select_ptr ;
        break ;
      case 113 :
        EXEC SQL FOR :array_size FETCH C113 USING DESCRIPTOR select_ptr ;
        break ;
      case 114 :
        EXEC SQL FOR :array_size FETCH C114 USING DESCRIPTOR select_ptr ;
        break ;
      case 115 :
        EXEC SQL FOR :array_size FETCH C115 USING DESCRIPTOR select_ptr ;
        break ;
      case 116 :
        EXEC SQL FOR :array_size FETCH C116 USING DESCRIPTOR select_ptr ;
        break ;
      case 117 :
        EXEC SQL FOR :array_size FETCH C117 USING DESCRIPTOR select_ptr ;
        break ;
      case 118 :
        EXEC SQL FOR :array_size FETCH C118 USING DESCRIPTOR select_ptr ;
        break ;
      case 119 :
        EXEC SQL FOR :array_size FETCH C119 USING DESCRIPTOR select_ptr ;
        break ;
      case 120 :
        EXEC SQL FOR :array_size FETCH C120 USING DESCRIPTOR select_ptr ;
        break ;
      case 121 :
        EXEC SQL FOR :array_size FETCH C121 USING DESCRIPTOR select_ptr ;
        break ;
      case 122 :
        EXEC SQL FOR :array_size FETCH C122 USING DESCRIPTOR select_ptr ;
        break ;
      case 123 :
        EXEC SQL FOR :array_size FETCH C123 USING DESCRIPTOR select_ptr ;
        break ;
      case 124 :
        EXEC SQL FOR :array_size FETCH C124 USING DESCRIPTOR select_ptr ;
        break ;
      case 125 :
        EXEC SQL FOR :array_size FETCH C125 USING DESCRIPTOR select_ptr ;
        break ;
      case 126 :
        EXEC SQL FOR :array_size FETCH C126 USING DESCRIPTOR select_ptr ;
        break ;
      case 127 :
        EXEC SQL FOR :array_size FETCH C127 USING DESCRIPTOR select_ptr ;
        break ;
      case 128 :
        EXEC SQL FOR :array_size FETCH C128 USING DESCRIPTOR select_ptr ;
        break ;
      case 129 :
        EXEC SQL FOR :array_size FETCH C129 USING DESCRIPTOR select_ptr ;
        break ;
      case 130 :
        EXEC SQL FOR :array_size FETCH C130 USING DESCRIPTOR select_ptr ;
        break ;
      case 131 :
        EXEC SQL FOR :array_size FETCH C131 USING DESCRIPTOR select_ptr ;
        break ;
      case 132 :
        EXEC SQL FOR :array_size FETCH C132 USING DESCRIPTOR select_ptr ;
        break ;
      case 133 :
        EXEC SQL FOR :array_size FETCH C133 USING DESCRIPTOR select_ptr ;
        break ;
      case 134 :
        EXEC SQL FOR :array_size FETCH C134 USING DESCRIPTOR select_ptr ;
        break ;
      case 135 :
        EXEC SQL FOR :array_size FETCH C135 USING DESCRIPTOR select_ptr ;
        break ;
      case 136 :
        EXEC SQL FOR :array_size FETCH C136 USING DESCRIPTOR select_ptr ;
        break ;
      case 137 :
        EXEC SQL FOR :array_size FETCH C137 USING DESCRIPTOR select_ptr ;
        break ;
      case 138 :
        EXEC SQL FOR :array_size FETCH C138 USING DESCRIPTOR select_ptr ;
        break ;
      case 139 :
        EXEC SQL FOR :array_size FETCH C139 USING DESCRIPTOR select_ptr ;
        break ;
      case 140 :
        EXEC SQL FOR :array_size FETCH C140 USING DESCRIPTOR select_ptr ;
        break ;
      case 141 :
        EXEC SQL FOR :array_size FETCH C141 USING DESCRIPTOR select_ptr ;
        break ;
      case 142 :
        EXEC SQL FOR :array_size FETCH C142 USING DESCRIPTOR select_ptr ;
        break ;
      case 143 :
        EXEC SQL FOR :array_size FETCH C143 USING DESCRIPTOR select_ptr ;
        break ;
      case 144 :
        EXEC SQL FOR :array_size FETCH C144 USING DESCRIPTOR select_ptr ;
        break ;
      case 145 :
        EXEC SQL FOR :array_size FETCH C145 USING DESCRIPTOR select_ptr ;
        break ;
      case 146 :
        EXEC SQL FOR :array_size FETCH C146 USING DESCRIPTOR select_ptr ;
        break ;
      case 147 :
        EXEC SQL FOR :array_size FETCH C147 USING DESCRIPTOR select_ptr ;
        break ;
      case 148 :
        EXEC SQL FOR :array_size FETCH C148 USING DESCRIPTOR select_ptr ;
        break ;
      case 149 :
        EXEC SQL FOR :array_size FETCH C149 USING DESCRIPTOR select_ptr ;
        break ;
      case 150 :
        EXEC SQL FOR :array_size FETCH C150 USING DESCRIPTOR select_ptr ;
        break ;
      case 151 :
        EXEC SQL FOR :array_size FETCH C151 USING DESCRIPTOR select_ptr ;
        break ;
      case 152 :
        EXEC SQL FOR :array_size FETCH C152 USING DESCRIPTOR select_ptr ;
        break ;
      case 153 :
        EXEC SQL FOR :array_size FETCH C153 USING DESCRIPTOR select_ptr ;
        break ;
      case 154 :
        EXEC SQL FOR :array_size FETCH C154 USING DESCRIPTOR select_ptr ;
        break ;
      case 155 :
        EXEC SQL FOR :array_size FETCH C155 USING DESCRIPTOR select_ptr ;
        break ;
      case 156 :
        EXEC SQL FOR :array_size FETCH C156 USING DESCRIPTOR select_ptr ;
        break ;
      case 157 :
        EXEC SQL FOR :array_size FETCH C157 USING DESCRIPTOR select_ptr ;
        break ;
      case 158 :
        EXEC SQL FOR :array_size FETCH C158 USING DESCRIPTOR select_ptr ;
        break ;
      case 159 :
        EXEC SQL FOR :array_size FETCH C159 USING DESCRIPTOR select_ptr ;
        break ;
      case 160 :
        EXEC SQL FOR :array_size FETCH C160 USING DESCRIPTOR select_ptr ;
        break ;
      case 161 :
        EXEC SQL FOR :array_size FETCH C161 USING DESCRIPTOR select_ptr ;
        break ;
      case 162 :
        EXEC SQL FOR :array_size FETCH C162 USING DESCRIPTOR select_ptr ;
        break ;
      case 163 :
        EXEC SQL FOR :array_size FETCH C163 USING DESCRIPTOR select_ptr ;
        break ;
      case 164 :
        EXEC SQL FOR :array_size FETCH C164 USING DESCRIPTOR select_ptr ;
        break ;
      case 165 :
        EXEC SQL FOR :array_size FETCH C165 USING DESCRIPTOR select_ptr ;
        break ;
      case 166 :
        EXEC SQL FOR :array_size FETCH C166 USING DESCRIPTOR select_ptr ;
        break ;
      case 167 :
        EXEC SQL FOR :array_size FETCH C167 USING DESCRIPTOR select_ptr ;
        break ;
      case 168 :
        EXEC SQL FOR :array_size FETCH C168 USING DESCRIPTOR select_ptr ;
        break ;
      case 169 :
        EXEC SQL FOR :array_size FETCH C169 USING DESCRIPTOR select_ptr ;
        break ;
      case 170 :
        EXEC SQL FOR :array_size FETCH C170 USING DESCRIPTOR select_ptr ;
        break ;
      case 171 :
        EXEC SQL FOR :array_size FETCH C171 USING DESCRIPTOR select_ptr ;
        break ;
      case 172 :
        EXEC SQL FOR :array_size FETCH C172 USING DESCRIPTOR select_ptr ;
        break ;
      case 173 :
        EXEC SQL FOR :array_size FETCH C173 USING DESCRIPTOR select_ptr ;
        break ;
      case 174 :
        EXEC SQL FOR :array_size FETCH C174 USING DESCRIPTOR select_ptr ;
        break ;
      case 175 :
        EXEC SQL FOR :array_size FETCH C175 USING DESCRIPTOR select_ptr ;
        break ;
      case 176 :
        EXEC SQL FOR :array_size FETCH C176 USING DESCRIPTOR select_ptr ;
        break ;
      case 177 :
        EXEC SQL FOR :array_size FETCH C177 USING DESCRIPTOR select_ptr ;
        break ;
      case 178 :
        EXEC SQL FOR :array_size FETCH C178 USING DESCRIPTOR select_ptr ;
        break ;
      case 179 :
        EXEC SQL FOR :array_size FETCH C179 USING DESCRIPTOR select_ptr ;
        break ;
      case 180 :
        EXEC SQL FOR :array_size FETCH C180 USING DESCRIPTOR select_ptr ;
        break ;
      case 181 :
        EXEC SQL FOR :array_size FETCH C181 USING DESCRIPTOR select_ptr ;
        break ;
      case 182 :
        EXEC SQL FOR :array_size FETCH C182 USING DESCRIPTOR select_ptr ;
        break ;
      case 183 :
        EXEC SQL FOR :array_size FETCH C183 USING DESCRIPTOR select_ptr ;
        break ;
      case 184 :
        EXEC SQL FOR :array_size FETCH C184 USING DESCRIPTOR select_ptr ;
        break ;
      case 185 :
        EXEC SQL FOR :array_size FETCH C185 USING DESCRIPTOR select_ptr ;
        break ;
      case 186 :
        EXEC SQL FOR :array_size FETCH C186 USING DESCRIPTOR select_ptr ;
        break ;
      case 187 :
        EXEC SQL FOR :array_size FETCH C187 USING DESCRIPTOR select_ptr ;
        break ;
      case 188 :
        EXEC SQL FOR :array_size FETCH C188 USING DESCRIPTOR select_ptr ;
        break ;
      case 189 :
        EXEC SQL FOR :array_size FETCH C189 USING DESCRIPTOR select_ptr ;
        break ;
      case 190 :
        EXEC SQL FOR :array_size FETCH C190 USING DESCRIPTOR select_ptr ;
        break ;
      case 191 :
        EXEC SQL FOR :array_size FETCH C191 USING DESCRIPTOR select_ptr ;
        break ;
      case 192 :
        EXEC SQL FOR :array_size FETCH C192 USING DESCRIPTOR select_ptr ;
        break ;
      case 193 :
        EXEC SQL FOR :array_size FETCH C193 USING DESCRIPTOR select_ptr ;
        break ;
      case 194 :
        EXEC SQL FOR :array_size FETCH C194 USING DESCRIPTOR select_ptr ;
        break ;
      case 195 :
        EXEC SQL FOR :array_size FETCH C195 USING DESCRIPTOR select_ptr ;
        break ;
      case 196 :
        EXEC SQL FOR :array_size FETCH C196 USING DESCRIPTOR select_ptr ;
        break ;
      case 197 :
        EXEC SQL FOR :array_size FETCH C197 USING DESCRIPTOR select_ptr ;
        break ;
      case 198 :
        EXEC SQL FOR :array_size FETCH C198 USING DESCRIPTOR select_ptr ;
        break ;
      case 199 :
        EXEC SQL FOR :array_size FETCH C199 USING DESCRIPTOR select_ptr ;
        break ;
      case 200 :
        EXEC SQL FOR :array_size FETCH C200 USING DESCRIPTOR select_ptr ;
        break ;
#endif
      default :
        iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for fetch"), shandle, context[context_num].max_cursors);

        return GDB_ERROR ;
    }
    if (sqlca.sqlcode == CURSOR_NOT_OPEN && !retry) 
    {
      wcscpy(tmp_curs_name, curs_name) ;
      sql_open_cursor(tmp_curs_name, shandle) ;
      retry = TRUE ;
    }
    else
      break ;
  }
  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_dealloc_descriptors
    - deallocate the allocated descriptor
    - XFREE column name
    - XFREE select_ptr

    Arguments:
    - shandle: statement handle
    - action: SELECT, BIND (see sql_alloc_descriptors)
  ======================================================================*/

long sql_dealloc_descriptors( shandle, action )
    long     shandle ;
    long     action ;
{
  SQLDA  *select_ptr ;
  SQLDA  *bind_ptr ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_DEALLOC_DESCRIPTORS);

  if (shandle == 0) return GDB_ERROR ;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  if (action == BIND) 
  {
    if (debug & DBG6) {
      iomsg(DBG6, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("- bind"));
    }

    bind_ptr = sqlda_ptrs[context_num][shandle].bptr ;

    if (bind_ptr ==  NULL)
      return GDB_SUCCESS ;

    sql_release_bind( shandle, action ) ;

    if (bind_ptr != NULL) 
    {
      sqlclu(bind_ptr) ;
	  
      iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("BIND Descriptor Memory Deallocated"));
    }
    sqlda_ptrs[context_num][shandle].bptr = NULL ;
  }

  if (action == SELECT) 
  {
    if (debug & DBG6) {
      iomsg(DBG6, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("- select"));
    }
    select_ptr = sqlda_ptrs[context_num][shandle].sptr ;

    if (select_ptr ==  NULL)
      return GDB_SUCCESS ;

    sql_release_bind( shandle, action ) ;

    if (select_ptr != NULL) 
    {
      sqlclu(select_ptr) ;
	  
      iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("SELECT Descriptor Memory Deallocated"));
    }
    sqlda_ptrs[context_num][shandle].sptr = NULL ;
  }

  return GDB_SUCCESS ;
}



/*======================================================================
  sql_release_bind
    - deallocate the SQLDA data buffers

    Arguments:
    - shandle: statement handle
    - action: SELECT, BIND (see sql_dealloc_descriptors)
  ======================================================================*/

long sql_release_bind( shandle, action )
    long     shandle ;
    long     action ;
{
  register long    col ;
  SQLDA  *select_ptr ;
  SQLDA  *bind_ptr ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_RELEASE_BIND);

  if (shandle == 0) return GDB_ERROR ;

  if (action == BIND) 
  {
    bind_ptr = sqlda_ptrs[context_num][shandle].bptr ;

    if (bind_ptr ==  NULL || bind_ptr->F <= 0) /* added ->F to avoid loop on bind failure */
      return GDB_SUCCESS ;

    for (col=0;col<bind_ptr->N/*context[context_num].max_bind_vars*/;col++)  /*   // ?????????   */
    {
      if (bind_ptr->V[col] != NULL) 
      {
        XFREE((char *)bind_ptr->V[col]) ;
        bind_ptr->V[col] = NULL ;
      }
      if (bind_ptr->I[col] != NULL) 
      {
        XFREE((short *)bind_ptr->I[col]) ;
        bind_ptr->I[col] = NULL ;
      }
    }
  }

  if (action == SELECT) 
  {
    select_ptr = sqlda_ptrs[context_num][shandle].sptr ;

    if (select_ptr ==  NULL || select_ptr->F <= 0) /* added ->F to avoid loop on bind failure */
      return GDB_SUCCESS ;

    for (col=0;col<select_ptr->N/*max_col_array_size*/;col++)    /* ??????? fix this */
    {
      if (select_ptr->V[col] != NULL) 
      {
        XFREE((char *)select_ptr->V[col]) ;
        select_ptr->V[col] = NULL ;
      }
      if (select_ptr->I[col] != NULL) 
      {
        XFREE((short *)select_ptr->I[col]) ;
        select_ptr->I[col] = NULL ;
      }
    }
  }

  return GDB_SUCCESS ;
}



/*======================================================================
   sql_close_cursor  (10)

    Arguments:
    - curs_name: cursor name
    - shandle: statement handle
    - release_cursor: TRUE = call sql_close_cursor_release
 ======================================================================*/

long sql_close_cursor(GDB_CHAR *curs_name, long shandle, long release_cursor )
{
  context_num = gsi_current_context() ;

  if (debug & DBG1) {
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d"), _T("SQL_CLOSE_CURSOR: C%"), shandle);
  }

  if (shandle == 0) return GDB_ERROR ;

  /** remove cursor from cache **/
  if (release_cursor) 
  {
    sql_close_cursor_release( curs_name, shandle ) ;
    return GDB_SUCCESS ;
  }

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  switch (shandle) 
  {
    case   1 :
      EXEC SQL CLOSE C1 ;
      break ;
    case   2 :
      EXEC SQL CLOSE C2 ;
      break ;
    case   3 :
      EXEC SQL CLOSE C3 ;
      break ;
    case   4 :
      EXEC SQL CLOSE C4 ;
      break ;
    case   5 :
      EXEC SQL CLOSE C5 ;
      break ;
    case   6 :
      EXEC SQL CLOSE C6 ;
      break ;
    case   7 :
      EXEC SQL CLOSE C7 ;
      break ;
    case   8 :
      EXEC SQL CLOSE C8 ;
      break ;
    case   9 :
      EXEC SQL CLOSE C9 ;
      break ;
    case  10 :
      EXEC SQL CLOSE C10 ;
      break ;
    case  11 :
      EXEC SQL CLOSE C11 ;
      break ;
    case  12 :
      EXEC SQL CLOSE C12 ;
      break ;
    case  13 :
      EXEC SQL CLOSE C13 ;
      break ;
    case  14 :
      EXEC SQL CLOSE C14 ;
      break ;
    case  15 :
      EXEC SQL CLOSE C15 ;
      break ;
    case  16 :
      EXEC SQL CLOSE C16 ;
      break ;
    case  17 :
      EXEC SQL CLOSE C17 ;
      break ;
    case  18 :
      EXEC SQL CLOSE C18 ;
      break ;
    case  19 :
      EXEC SQL CLOSE C19 ;
      break ;
    case  20 :
      EXEC SQL CLOSE C20 ;
      break ;
    case  21 :
      EXEC SQL CLOSE C21 ;
      break ;
    case  22 :
      EXEC SQL CLOSE C22 ;
      break ;
    case  23 :
      EXEC SQL CLOSE C23 ;
      break ;
    case  24 :
      EXEC SQL CLOSE C24 ;
      break ;
    case  25 :
      EXEC SQL CLOSE C25 ;
      break ;
    case  26 :
      EXEC SQL CLOSE C26 ;
      break ;
    case  27 :
      EXEC SQL CLOSE C27 ;
      break ;
    case  28 :
      EXEC SQL CLOSE C28 ;
      break ;
    case  29 :
      EXEC SQL CLOSE C29 ;
      break ;
    case  30 :
      EXEC SQL CLOSE C30 ;
      break ;
    case  31 :
      EXEC SQL CLOSE C31 ;
      break ;
    case  32 :
      EXEC SQL CLOSE C32 ;
      break ;
    case  33 :
      EXEC SQL CLOSE C33 ;
      break ;
    case  34 :
      EXEC SQL CLOSE C34 ;
      break ;
    case  35 :
      EXEC SQL CLOSE C35 ;
      break ;
    case  36 :
      EXEC SQL CLOSE C36 ;
      break ;
    case  37 :
      EXEC SQL CLOSE C37 ;
      break ;
    case  38 :
      EXEC SQL CLOSE C38 ;
      break ;
    case  39 :
      EXEC SQL CLOSE C39 ;
      break ;
    case  40 :
      EXEC SQL CLOSE C40 ;
      break ;
    case  41 :
      EXEC SQL CLOSE C41 ;
      break ;
    case  42 :
      EXEC SQL CLOSE C42 ;
      break ;
    case  43 :
      EXEC SQL CLOSE C43 ;
      break ;
    case  44 :
      EXEC SQL CLOSE C44 ;
      break ;
    case  45 :
      EXEC SQL CLOSE C45 ;
      break ;
    case  46 :
      EXEC SQL CLOSE C46 ;
      break ;
    case  47 :
      EXEC SQL CLOSE C47 ;
      break ;
    case  48 :
      EXEC SQL CLOSE C48 ;
      break ;
    case  49 :
      EXEC SQL CLOSE C49 ;
      break ;
    case  50 :
      EXEC SQL CLOSE C50 ;
      break ;
    case  51 :
      EXEC SQL CLOSE C51 ;
      break ;
    case  52 :
      EXEC SQL CLOSE C52 ;
      break ;
    case  53 :
      EXEC SQL CLOSE C53 ;
      break ;
    case  54 :
      EXEC SQL CLOSE C54 ;
      break ;
    case  55 :
      EXEC SQL CLOSE C55 ;
      break ;
    case  56 :
      EXEC SQL CLOSE C56 ;
      break ;
    case  57 :
      EXEC SQL CLOSE C57 ;
      break ;
    case  58 :
      EXEC SQL CLOSE C58 ;
      break ;
    case  59 :
      EXEC SQL CLOSE C59 ;
      break ;
    case  60 :
      EXEC SQL CLOSE C60 ;
      break ;
    case  61 :
      EXEC SQL CLOSE C61 ;
      break ;
    case  62 :
      EXEC SQL CLOSE C62 ;
      break ;
    case  63 :
      EXEC SQL CLOSE C63 ;
      break ;
    case  64 :
      EXEC SQL CLOSE C64 ;
      break ;
    case  65 :
      EXEC SQL CLOSE C65 ;
      break ;
    case  66 :
      EXEC SQL CLOSE C66 ;
      break ;
    case  67 :
      EXEC SQL CLOSE C67 ;
      break ;
    case  68 :
      EXEC SQL CLOSE C68 ;
      break ;
    case  69 :
      EXEC SQL CLOSE C69 ;
      break ;
    case  70 :
      EXEC SQL CLOSE C70 ;
      break ;
    case  71 :
      EXEC SQL CLOSE C71 ;
      break ;
    case  72 :
      EXEC SQL CLOSE C72 ;
      break ;
    case  73 :
      EXEC SQL CLOSE C73 ;
      break ;
    case  74 :
      EXEC SQL CLOSE C74 ;
      break ;
    case  75 :
      EXEC SQL CLOSE C75 ;
      break ;
    case  76 :
      EXEC SQL CLOSE C76 ;
      break ;
    case  77 :
      EXEC SQL CLOSE C77 ;
      break ;
    case  78 :
      EXEC SQL CLOSE C78 ;
      break ;
    case  79 :
      EXEC SQL CLOSE C79 ;
      break ;
    case  80 :
      EXEC SQL CLOSE C80 ;
      break ;
    case  81 :
      EXEC SQL CLOSE C81 ;
      break ;
    case  82 :
      EXEC SQL CLOSE C82 ;
      break ;
    case  83 :
      EXEC SQL CLOSE C83 ;
      break ;
    case  84 :
      EXEC SQL CLOSE C84 ;
      break ;
    case  85 :
      EXEC SQL CLOSE C85 ;
      break ;
    case  86 :
      EXEC SQL CLOSE C86 ;
      break ;
    case  87 :
      EXEC SQL CLOSE C87 ;
      break ;
    case  88 :
      EXEC SQL CLOSE C88 ;
      break ;
    case  89 :
      EXEC SQL CLOSE C89 ;
      break ;
    case  90 :
      EXEC SQL CLOSE C90 ;
      break ;
    case  91 :
      EXEC SQL CLOSE C91 ;
      break ;
    case  92 :
      EXEC SQL CLOSE C92 ;
      break ;
    case  93 :
      EXEC SQL CLOSE C93 ;
      break ;
    case  94 :
      EXEC SQL CLOSE C94 ;
      break ;
    case  95 :
      EXEC SQL CLOSE C95 ;
      break ;
    case  96 :
      EXEC SQL CLOSE C96 ;
      break ;
    case  97 :
      EXEC SQL CLOSE C97 ;
      break ;
    case  98 :
      EXEC SQL CLOSE C98 ;
      break ;
    case  99 :
      EXEC SQL CLOSE C99 ;
      break ;
    case 100 :
      EXEC SQL CLOSE C100 ;
      break ;
#ifndef SMSW
    case 101 :
      EXEC SQL CLOSE C101 ;
      break ;
    case 102 :
      EXEC SQL CLOSE C102 ;
      break ;
    case 103 :
      EXEC SQL CLOSE C103 ;
      break ;
    case 104 :
      EXEC SQL CLOSE C104 ;
      break ;
    case 105 :
      EXEC SQL CLOSE C105 ;
      break ;
    case 106 :
      EXEC SQL CLOSE C106 ;
      break ;
    case 107 :
      EXEC SQL CLOSE C107 ;
      break ;
    case 108 :
      EXEC SQL CLOSE C108 ;
      break ;
    case 109 :
      EXEC SQL CLOSE C109 ;
      break ;
    case 110 :
      EXEC SQL CLOSE C110 ;
      break ;
    case 111 :
      EXEC SQL CLOSE C111 ;
      break ;
    case 112 :
      EXEC SQL CLOSE C112 ;
      break ;
    case 113 :
      EXEC SQL CLOSE C113 ;
      break ;
    case 114 :
      EXEC SQL CLOSE C114 ;
      break ;
    case 115 :
      EXEC SQL CLOSE C115 ;
      break ;
    case 116 :
      EXEC SQL CLOSE C116 ;
      break ;
    case 117 :
      EXEC SQL CLOSE C117 ;
      break ;
    case 118 :
      EXEC SQL CLOSE C118 ;
      break ;
    case 119 :
      EXEC SQL CLOSE C119 ;
      break ;
    case 120 :
      EXEC SQL CLOSE C120 ;
      break ;
    case 121 :
      EXEC SQL CLOSE C121 ;
      break ;
    case 122 :
      EXEC SQL CLOSE C122 ;
      break ;
    case 123 :
      EXEC SQL CLOSE C123 ;
      break ;
    case 124 :
      EXEC SQL CLOSE C124 ;
      break ;
    case 125 :
      EXEC SQL CLOSE C125 ;
      break ;
    case 126 :
      EXEC SQL CLOSE C126 ;
      break ;
    case 127 :
      EXEC SQL CLOSE C127 ;
      break ;
    case 128 :
      EXEC SQL CLOSE C128 ;
      break ;
    case 129 :
      EXEC SQL CLOSE C129 ;
      break ;
    case 130 :
      EXEC SQL CLOSE C130 ;
      break ;
    case 131 :
      EXEC SQL CLOSE C131 ;
      break ;
    case 132 :
      EXEC SQL CLOSE C132 ;
      break ;
    case 133 :
      EXEC SQL CLOSE C133 ;
      break ;
    case 134 :
      EXEC SQL CLOSE C134 ;
      break ;
    case 135 :
      EXEC SQL CLOSE C135 ;
      break ;
    case 136 :
      EXEC SQL CLOSE C136 ;
      break ;
    case 137 :
      EXEC SQL CLOSE C137 ;
      break ;
    case 138 :
      EXEC SQL CLOSE C138 ;
      break ;
    case 139 :
      EXEC SQL CLOSE C139 ;
      break ;
    case 140 :
      EXEC SQL CLOSE C140 ;
      break ;
    case 141 :
      EXEC SQL CLOSE C141 ;
      break ;
    case 142 :
      EXEC SQL CLOSE C142 ;
      break ;
    case 143 :
      EXEC SQL CLOSE C143 ;
      break ;
    case 144 :
      EXEC SQL CLOSE C144 ;
      break ;
    case 145 :
      EXEC SQL CLOSE C145 ;
      break ;
    case 146 :
      EXEC SQL CLOSE C146 ;
      break ;
    case 147 :
      EXEC SQL CLOSE C147 ;
      break ;
    case 148 :
      EXEC SQL CLOSE C148 ;
      break ;
    case 149 :
      EXEC SQL CLOSE C149 ;
      break ;
    case 150 :
      EXEC SQL CLOSE C150 ;
      break ;
    case 151 :
      EXEC SQL CLOSE C151 ;
      break ;
    case 152 :
      EXEC SQL CLOSE C152 ;
      break ;
    case 153 :
      EXEC SQL CLOSE C153 ;
      break ;
    case 154 :
      EXEC SQL CLOSE C154 ;
      break ;
    case 155 :
      EXEC SQL CLOSE C155 ;
      break ;
    case 156 :
      EXEC SQL CLOSE C156 ;
      break ;
    case 157 :
      EXEC SQL CLOSE C157 ;
      break ;
    case 158 :
      EXEC SQL CLOSE C158 ;
      break ;
    case 159 :
      EXEC SQL CLOSE C159 ;
      break ;
    case 160 :
      EXEC SQL CLOSE C160 ;
      break ;
    case 161 :
      EXEC SQL CLOSE C161 ;
      break ;
    case 162 :
      EXEC SQL CLOSE C162 ;
      break ;
    case 163 :
      EXEC SQL CLOSE C163 ;
      break ;
    case 164 :
      EXEC SQL CLOSE C164 ;
      break ;
    case 165 :
      EXEC SQL CLOSE C165 ;
      break ;
    case 166 :
      EXEC SQL CLOSE C166 ;
      break ;
    case 167 :
      EXEC SQL CLOSE C167 ;
      break ;
    case 168 :
      EXEC SQL CLOSE C168 ;
      break ;
    case 169 :
      EXEC SQL CLOSE C169 ;
      break ;
    case 170 :
      EXEC SQL CLOSE C170 ;
      break ;
    case 171 :
      EXEC SQL CLOSE C171 ;
      break ;
    case 172 :
      EXEC SQL CLOSE C172 ;
      break ;
    case 173 :
      EXEC SQL CLOSE C173 ;
      break ;
    case 174 :
      EXEC SQL CLOSE C174 ;
      break ;
    case 175 :
      EXEC SQL CLOSE C175 ;
      break ;
    case 176 :
      EXEC SQL CLOSE C176 ;
      break ;
    case 177 :
      EXEC SQL CLOSE C177 ;
      break ;
    case 178 :
      EXEC SQL CLOSE C178 ;
      break ;
    case 179 :
      EXEC SQL CLOSE C179 ;
      break ;
    case 180 :
      EXEC SQL CLOSE C180 ;
      break ;
    case 181 :
      EXEC SQL CLOSE C181 ;
      break ;
    case 182 :
      EXEC SQL CLOSE C182 ;
      break ;
    case 183 :
      EXEC SQL CLOSE C183 ;
      break ;
    case 184 :
      EXEC SQL CLOSE C184 ;
      break ;
    case 185 :
      EXEC SQL CLOSE C185 ;
      break ;
    case 186 :
      EXEC SQL CLOSE C186 ;
      break ;
    case 187 :
      EXEC SQL CLOSE C187 ;
      break ;
    case 188 :
      EXEC SQL CLOSE C188 ;
      break ;
    case 189 :
      EXEC SQL CLOSE C189 ;
      break ;
    case 190 :
      EXEC SQL CLOSE C190 ;
      break ;
    case 191 :
      EXEC SQL CLOSE C191 ;
      break ;
    case 192 :
      EXEC SQL CLOSE C192 ;
      break ;
    case 193 :
      EXEC SQL CLOSE C193 ;
      break ;
    case 194 :
      EXEC SQL CLOSE C194 ;
      break ;
    case 195 :
      EXEC SQL CLOSE C195 ;
      break ;
    case 196 :
      EXEC SQL CLOSE C196 ;
      break ;
    case 197 :
      EXEC SQL CLOSE C197 ;
      break ;
    case 198 :
      EXEC SQL CLOSE C198 ;
      break ;
    case 199 :
      EXEC SQL CLOSE C199 ;
      break ;
    case 200 :
      EXEC SQL CLOSE C200 ;
      break ;
#endif  
    default :

      iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for 'close cursor'"), shandle, context[context_num].max_cursors);

      return GDB_ERROR ;
  }

    sqlda_ptrs[context_num][shandle].fCursorOpen = FALSE ;
    return GDB_SUCCESS ;
}



/*======================================================================
  sql_disconnect
    - disconnect from the database

  Arguments:
    - context_num: the context whose DB connection you wish to disconnect
 ======================================================================*/

long sql_disconnect( context_num )
  gsi_int   context_num ;
{
  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_DISCONNECT);

  /* since there is no direct method for disconnecting from
     an Oracle database, a release must be performed. The release
     must be used in conjuction with either a rollback or commit.
     It is assumed that the user has performed either a commit
     or rollback prior to issuing a disconnect. If he has not,
     it should be acceptable to perform a rollback by default
     when disconnecting */

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  EXEC SQL AT :connect_name ROLLBACK RELEASE ;

  /*                Work around Oracle bug.                   */
  /* Sometimes Oracle 9.0 for Linux returns -1 on disconnect. */
  /* -------------------------------------------------------- */
#if defined(ORA09)
  if (sqlca.sqlcode == -1)
    sqlca.sqlcode = 0 ;
#endif
  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_exec_sql
    - process non-query
    - statement must not contain 'select'
    - sql statement is passed directly to database 'as is'

    Arguments:
    - stmt_str: non-select sql statement
 ======================================================================*/

long sql_exec_sql(GDB_CHAR *stmt_str)
{
  unsigned short    len ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_EXEC_SQL) ;

  len = wcslen(stmt_str);

  if ((ora_sql_stmt = XCALLOC(1, sizeof(short)+1+sizeof(char)*len)) == NULL) 
  {
    iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Could not alloc mem for inf_ora_sql_stmt"));

    iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
    return GDB_ERROR ;
  }
  wcscpy(ora_sql_stmt->arr, stmt_str) ;
  ora_sql_stmt->len = len ;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  EXEC ORACLE OPTION(HOLD_CURSOR=NO) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=YES) ;

  EXEC SQL AT :connect_name EXECUTE IMMEDIATE :ora_sql_stmt;

  EXEC ORACLE OPTION(HOLD_CURSOR=YES) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=NO) ;

  XFREE (ora_sql_stmt) ;

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_exec_dynamic_sql
    - process non-query
    - statement must not contain 'select'
    - sql statement is passed directly to database 'as is'

    Arguments:
    - stmt_str: non-select sql statement
 ======================================================================*/

long sql_exec_dynamic_sql( shandle, stmt_id )
    long   shandle ;
    long   stmt_id ;
{
  SQLDA       *bind_ptr ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_EXEC_DYNAMIC_SQL);

  if (shandle == 0) return GDB_ERROR ;

  bind_ptr = sqlda_ptrs[context_num][shandle].bptr ;

  switch (shandle) 
  {
    case   1 :
      EXEC SQL EXECUTE prep_stmt_1 using DESCRIPTOR bind_ptr ;
      break ;
    case   2 :
      EXEC SQL EXECUTE prep_stmt_2 using DESCRIPTOR bind_ptr ;
      break ;
    case   3 :
      EXEC SQL EXECUTE prep_stmt_3 using DESCRIPTOR bind_ptr ;
      break ;
    case   4 :
      EXEC SQL EXECUTE prep_stmt_4 using DESCRIPTOR bind_ptr ;
      break ;
    case   5 :
      EXEC SQL EXECUTE prep_stmt_5 using DESCRIPTOR bind_ptr ;
      break ;
    case   6 :
      EXEC SQL EXECUTE prep_stmt_6 using DESCRIPTOR bind_ptr ;
      break ;
    case   7 :
      EXEC SQL EXECUTE prep_stmt_7 using DESCRIPTOR bind_ptr ;
      break ;
    case   8 :
      EXEC SQL EXECUTE prep_stmt_8 using DESCRIPTOR bind_ptr ;
      break ;
    case   9 :
      EXEC SQL EXECUTE prep_stmt_9 using DESCRIPTOR bind_ptr ;
      break ;
    case  10 :
      EXEC SQL EXECUTE prep_stmt_10 using DESCRIPTOR bind_ptr ;
      break ;
    case  11 :
      EXEC SQL EXECUTE prep_stmt_11 using DESCRIPTOR bind_ptr ;
      break ;
    case  12 :
      EXEC SQL EXECUTE prep_stmt_12 using DESCRIPTOR bind_ptr ;
      break ;
    case  13 :
      EXEC SQL EXECUTE prep_stmt_13 using DESCRIPTOR bind_ptr ;
      break ;
    case  14 :
      EXEC SQL EXECUTE prep_stmt_14 using DESCRIPTOR bind_ptr ;
      break ;
    case  15 :
      EXEC SQL EXECUTE prep_stmt_15 using DESCRIPTOR bind_ptr ;
      break ;
    case  16 :
      EXEC SQL EXECUTE prep_stmt_16 using DESCRIPTOR bind_ptr ;
      break ;
    case  17 :
      EXEC SQL EXECUTE prep_stmt_17 using DESCRIPTOR bind_ptr ;
      break ;
    case  18 :
      EXEC SQL EXECUTE prep_stmt_18 using DESCRIPTOR bind_ptr ;
      break ;
    case  19 :
      EXEC SQL EXECUTE prep_stmt_19 using DESCRIPTOR bind_ptr ;
      break ;
    case  20 :
      EXEC SQL EXECUTE prep_stmt_20 using DESCRIPTOR bind_ptr ;
      break ;
    case  21 :
      EXEC SQL EXECUTE prep_stmt_21 using DESCRIPTOR bind_ptr ;
      break ;
    case  22 :
      EXEC SQL EXECUTE prep_stmt_22 using DESCRIPTOR bind_ptr ;
      break ;
    case  23 :
      EXEC SQL EXECUTE prep_stmt_23 using DESCRIPTOR bind_ptr ;
      break ;
    case  24 :
      EXEC SQL EXECUTE prep_stmt_24 using DESCRIPTOR bind_ptr ;
      break ;
    case  25 :
      EXEC SQL EXECUTE prep_stmt_25 using DESCRIPTOR bind_ptr ;
      break ;
    case  26 :
      EXEC SQL EXECUTE prep_stmt_26 using DESCRIPTOR bind_ptr ;
      break ;
    case  27 :
      EXEC SQL EXECUTE prep_stmt_27 using DESCRIPTOR bind_ptr ;
      break ;
    case  28 :
      EXEC SQL EXECUTE prep_stmt_28 using DESCRIPTOR bind_ptr ;
      break ;
    case  29 :
      EXEC SQL EXECUTE prep_stmt_29 using DESCRIPTOR bind_ptr ;
      break ;
    case  30 :
      EXEC SQL EXECUTE prep_stmt_30 using DESCRIPTOR bind_ptr ;
      break ;
    case  31 :
      EXEC SQL EXECUTE prep_stmt_31 using DESCRIPTOR bind_ptr ;
      break ;
    case  32 :
      EXEC SQL EXECUTE prep_stmt_32 using DESCRIPTOR bind_ptr ;
      break ;
    case  33 :
      EXEC SQL EXECUTE prep_stmt_33 using DESCRIPTOR bind_ptr ;
      break ;
    case  34 :
      EXEC SQL EXECUTE prep_stmt_34 using DESCRIPTOR bind_ptr ;
      break ;
    case  35 :
      EXEC SQL EXECUTE prep_stmt_35 using DESCRIPTOR bind_ptr ;
      break ;
    case  36 :
      EXEC SQL EXECUTE prep_stmt_36 using DESCRIPTOR bind_ptr ;
      break ;
    case  37 :
      EXEC SQL EXECUTE prep_stmt_37 using DESCRIPTOR bind_ptr ;
      break ;
    case  38 :
      EXEC SQL EXECUTE prep_stmt_38 using DESCRIPTOR bind_ptr ;
      break ;
    case  39 :
      EXEC SQL EXECUTE prep_stmt_39 using DESCRIPTOR bind_ptr ;
      break ;
    case  40 :
      EXEC SQL EXECUTE prep_stmt_40 using DESCRIPTOR bind_ptr ;
      break ;
    case  41 :
      EXEC SQL EXECUTE prep_stmt_41 using DESCRIPTOR bind_ptr ;
      break ;
    case  42 :
      EXEC SQL EXECUTE prep_stmt_42 using DESCRIPTOR bind_ptr ;
      break ;
    case  43 :
      EXEC SQL EXECUTE prep_stmt_43 using DESCRIPTOR bind_ptr ;
      break ;
    case  44 :
      EXEC SQL EXECUTE prep_stmt_44 using DESCRIPTOR bind_ptr ;
      break ;
    case  45 :
      EXEC SQL EXECUTE prep_stmt_45 using DESCRIPTOR bind_ptr ;
      break ;
    case  46 :
      EXEC SQL EXECUTE prep_stmt_46 using DESCRIPTOR bind_ptr ;
      break ;
    case  47 :
      EXEC SQL EXECUTE prep_stmt_47 using DESCRIPTOR bind_ptr ;
      break ;
    case  48 :
      EXEC SQL EXECUTE prep_stmt_48 using DESCRIPTOR bind_ptr ;
      break ;
    case  49 :
      EXEC SQL EXECUTE prep_stmt_49 using DESCRIPTOR bind_ptr ;
      break ;
    case  50 :
      EXEC SQL EXECUTE prep_stmt_50 using DESCRIPTOR bind_ptr ;
      break ;
    case  51 :
      EXEC SQL EXECUTE prep_stmt_51 using DESCRIPTOR bind_ptr ;
      break ;
    case  52 :
      EXEC SQL EXECUTE prep_stmt_52 using DESCRIPTOR bind_ptr ;
      break ;
    case  53 :
      EXEC SQL EXECUTE prep_stmt_53 using DESCRIPTOR bind_ptr ;
      break ;
    case  54 :
      EXEC SQL EXECUTE prep_stmt_54 using DESCRIPTOR bind_ptr ;
      break ;
    case  55 :
      EXEC SQL EXECUTE prep_stmt_55 using DESCRIPTOR bind_ptr ;
      break ;
    case  56 :
      EXEC SQL EXECUTE prep_stmt_56 using DESCRIPTOR bind_ptr ;
      break ;
    case  57 :
      EXEC SQL EXECUTE prep_stmt_57 using DESCRIPTOR bind_ptr ;
      break ;
    case  58 :
      EXEC SQL EXECUTE prep_stmt_58 using DESCRIPTOR bind_ptr ;
      break ;
    case  59 :
      EXEC SQL EXECUTE prep_stmt_59 using DESCRIPTOR bind_ptr ;
      break ;
    case  60 :
      EXEC SQL EXECUTE prep_stmt_60 using DESCRIPTOR bind_ptr ;
      break ;
    case  61 :
      EXEC SQL EXECUTE prep_stmt_61 using DESCRIPTOR bind_ptr ;
      break ;
    case  62 :
      EXEC SQL EXECUTE prep_stmt_62 using DESCRIPTOR bind_ptr ;
      break ;
    case  63 :
      EXEC SQL EXECUTE prep_stmt_63 using DESCRIPTOR bind_ptr ;
      break ;
    case  64 :
      EXEC SQL EXECUTE prep_stmt_64 using DESCRIPTOR bind_ptr ;
      break ;
    case  65 :
      EXEC SQL EXECUTE prep_stmt_65 using DESCRIPTOR bind_ptr ;
      break ;
    case  66 :
      EXEC SQL EXECUTE prep_stmt_66 using DESCRIPTOR bind_ptr ;
      break ;
    case  67 :
      EXEC SQL EXECUTE prep_stmt_67 using DESCRIPTOR bind_ptr ;
      break ;
    case  68 :
      EXEC SQL EXECUTE prep_stmt_68 using DESCRIPTOR bind_ptr ;
      break ;
    case  69 :
      EXEC SQL EXECUTE prep_stmt_69 using DESCRIPTOR bind_ptr ;
      break ;
    case  70 :
      EXEC SQL EXECUTE prep_stmt_70 using DESCRIPTOR bind_ptr ;
      break ;
    case  71 :
      EXEC SQL EXECUTE prep_stmt_71 using DESCRIPTOR bind_ptr ;
      break ;
    case  72 :
      EXEC SQL EXECUTE prep_stmt_72 using DESCRIPTOR bind_ptr ;
      break ;
    case  73 :
      EXEC SQL EXECUTE prep_stmt_73 using DESCRIPTOR bind_ptr ;
      break ;
    case  74 :
      EXEC SQL EXECUTE prep_stmt_74 using DESCRIPTOR bind_ptr ;
      break ;
    case  75 :
      EXEC SQL EXECUTE prep_stmt_75 using DESCRIPTOR bind_ptr ;
      break ;
    case  76 :
      EXEC SQL EXECUTE prep_stmt_76 using DESCRIPTOR bind_ptr ;
      break ;
    case  77 :
      EXEC SQL EXECUTE prep_stmt_77 using DESCRIPTOR bind_ptr ;
      break ;
    case  78 :
      EXEC SQL EXECUTE prep_stmt_78 using DESCRIPTOR bind_ptr ;
      break ;
    case  79 :
      EXEC SQL EXECUTE prep_stmt_79 using DESCRIPTOR bind_ptr ;
      break ;
    case  80 :
      EXEC SQL EXECUTE prep_stmt_80 using DESCRIPTOR bind_ptr ;
      break ;
    case  81 :
      EXEC SQL EXECUTE prep_stmt_81 using DESCRIPTOR bind_ptr ;
      break ;
    case  82 :
      EXEC SQL EXECUTE prep_stmt_82 using DESCRIPTOR bind_ptr ;
      break ;
    case  83 :
      EXEC SQL EXECUTE prep_stmt_83 using DESCRIPTOR bind_ptr ;
      break ;
    case  84 :
      EXEC SQL EXECUTE prep_stmt_84 using DESCRIPTOR bind_ptr ;
      break ;
    case  85 :
      EXEC SQL EXECUTE prep_stmt_85 using DESCRIPTOR bind_ptr ;
      break ;
    case  86 :
      EXEC SQL EXECUTE prep_stmt_86 using DESCRIPTOR bind_ptr ;
      break ;
    case  87 :
      EXEC SQL EXECUTE prep_stmt_87 using DESCRIPTOR bind_ptr ;
      break ;
    case  88 :
      EXEC SQL EXECUTE prep_stmt_88 using DESCRIPTOR bind_ptr ;
      break ;
    case  89 :
      EXEC SQL EXECUTE prep_stmt_89 using DESCRIPTOR bind_ptr ;
      break ;
    case  90 :
      EXEC SQL EXECUTE prep_stmt_90 using DESCRIPTOR bind_ptr ;
      break ;
    case  91 :
      EXEC SQL EXECUTE prep_stmt_91 using DESCRIPTOR bind_ptr ;
      break ;
    case  92 :
      EXEC SQL EXECUTE prep_stmt_92 using DESCRIPTOR bind_ptr ;
      break ;
    case  93 :
      EXEC SQL EXECUTE prep_stmt_93 using DESCRIPTOR bind_ptr ;
      break ;
    case  94 :
      EXEC SQL EXECUTE prep_stmt_94 using DESCRIPTOR bind_ptr ;
      break ;
    case  95 :
      EXEC SQL EXECUTE prep_stmt_95 using DESCRIPTOR bind_ptr ;
      break ;
    case  96 :
      EXEC SQL EXECUTE prep_stmt_96 using DESCRIPTOR bind_ptr ;
      break ;
    case  97 :
      EXEC SQL EXECUTE prep_stmt_97 using DESCRIPTOR bind_ptr ;
      break ;
    case  98 :
      EXEC SQL EXECUTE prep_stmt_98 using DESCRIPTOR bind_ptr ;
      break ;
    case  99 :
      EXEC SQL EXECUTE prep_stmt_99 using DESCRIPTOR bind_ptr ;
      break ;
    case 100 :
      EXEC SQL EXECUTE prep_stmt_100 using DESCRIPTOR bind_ptr ;
      break ;
#ifndef SMSW
    case 101 :
      EXEC SQL EXECUTE prep_stmt_101 using DESCRIPTOR bind_ptr ;
      break ;
    case 102 :
      EXEC SQL EXECUTE prep_stmt_102 using DESCRIPTOR bind_ptr ;
      break ;
    case 103 :
      EXEC SQL EXECUTE prep_stmt_103 using DESCRIPTOR bind_ptr ;
      break ;
    case 104 :
      EXEC SQL EXECUTE prep_stmt_104 using DESCRIPTOR bind_ptr ;
      break ;
    case 105 :
      EXEC SQL EXECUTE prep_stmt_105 using DESCRIPTOR bind_ptr ;
      break ;
    case 106 :
      EXEC SQL EXECUTE prep_stmt_106 using DESCRIPTOR bind_ptr ;
      break ;
    case 107 :
      EXEC SQL EXECUTE prep_stmt_107 using DESCRIPTOR bind_ptr ;
      break ;
    case 108 :
      EXEC SQL EXECUTE prep_stmt_108 using DESCRIPTOR bind_ptr ;
      break ;
    case 109 :
      EXEC SQL EXECUTE prep_stmt_109 using DESCRIPTOR bind_ptr ;
      break ;
    case 110 :
      EXEC SQL EXECUTE prep_stmt_110 using DESCRIPTOR bind_ptr ;
      break ;
    case 111 :
      EXEC SQL EXECUTE prep_stmt_111 using DESCRIPTOR bind_ptr ;
      break ;
    case 112 :
      EXEC SQL EXECUTE prep_stmt_112 using DESCRIPTOR bind_ptr ;
      break ;
    case 113 :
      EXEC SQL EXECUTE prep_stmt_113 using DESCRIPTOR bind_ptr ;
      break ;
    case 114 :
      EXEC SQL EXECUTE prep_stmt_114 using DESCRIPTOR bind_ptr ;
      break ;
    case 115 :
      EXEC SQL EXECUTE prep_stmt_115 using DESCRIPTOR bind_ptr ;
      break ;
    case 116 :
      EXEC SQL EXECUTE prep_stmt_116 using DESCRIPTOR bind_ptr ;
      break ;
    case 117 :
      EXEC SQL EXECUTE prep_stmt_117 using DESCRIPTOR bind_ptr ;
      break ;
    case 118 :
      EXEC SQL EXECUTE prep_stmt_118 using DESCRIPTOR bind_ptr ;
      break ;
    case 119 :
      EXEC SQL EXECUTE prep_stmt_119 using DESCRIPTOR bind_ptr ;
      break ;
    case 120 :
      EXEC SQL EXECUTE prep_stmt_120 using DESCRIPTOR bind_ptr ;
      break ;
    case 121 :
      EXEC SQL EXECUTE prep_stmt_121 using DESCRIPTOR bind_ptr ;
      break ;
    case 122 :
      EXEC SQL EXECUTE prep_stmt_122 using DESCRIPTOR bind_ptr ;
      break ;
    case 123 :
      EXEC SQL EXECUTE prep_stmt_123 using DESCRIPTOR bind_ptr ;
      break ;
    case 124 :
      EXEC SQL EXECUTE prep_stmt_124 using DESCRIPTOR bind_ptr ;
      break ;
    case 125 :
      EXEC SQL EXECUTE prep_stmt_125 using DESCRIPTOR bind_ptr ;
      break ;
    case 126 :
      EXEC SQL EXECUTE prep_stmt_126 using DESCRIPTOR bind_ptr ;
      break ;
    case 127 :
      EXEC SQL EXECUTE prep_stmt_127 using DESCRIPTOR bind_ptr ;
      break ;
    case 128 :
      EXEC SQL EXECUTE prep_stmt_128 using DESCRIPTOR bind_ptr ;
      break ;
    case 129 :
      EXEC SQL EXECUTE prep_stmt_129 using DESCRIPTOR bind_ptr ;
      break ;
    case 130 :
      EXEC SQL EXECUTE prep_stmt_130 using DESCRIPTOR bind_ptr ;
      break ;
    case 131 :
      EXEC SQL EXECUTE prep_stmt_131 using DESCRIPTOR bind_ptr ;
      break ;
    case 132 :
      EXEC SQL EXECUTE prep_stmt_132 using DESCRIPTOR bind_ptr ;
      break ;
    case 133 :
      EXEC SQL EXECUTE prep_stmt_133 using DESCRIPTOR bind_ptr ;
      break ;
    case 134 :
      EXEC SQL EXECUTE prep_stmt_134 using DESCRIPTOR bind_ptr ;
      break ;
    case 135 :
      EXEC SQL EXECUTE prep_stmt_135 using DESCRIPTOR bind_ptr ;
      break ;
    case 136 :
      EXEC SQL EXECUTE prep_stmt_136 using DESCRIPTOR bind_ptr ;
      break ;
    case 137 :
      EXEC SQL EXECUTE prep_stmt_137 using DESCRIPTOR bind_ptr ;
      break ;
    case 138 :
      EXEC SQL EXECUTE prep_stmt_138 using DESCRIPTOR bind_ptr ;
      break ;
    case 139 :
      EXEC SQL EXECUTE prep_stmt_139 using DESCRIPTOR bind_ptr ;
      break ;
    case 140 :
      EXEC SQL EXECUTE prep_stmt_140 using DESCRIPTOR bind_ptr ;
      break ;
    case 141 :
      EXEC SQL EXECUTE prep_stmt_141 using DESCRIPTOR bind_ptr ;
      break ;
    case 142 :
      EXEC SQL EXECUTE prep_stmt_142 using DESCRIPTOR bind_ptr ;
      break ;
    case 143 :
      EXEC SQL EXECUTE prep_stmt_143 using DESCRIPTOR bind_ptr ;
      break ;
    case 144 :
      EXEC SQL EXECUTE prep_stmt_144 using DESCRIPTOR bind_ptr ;
      break ;
    case 145 :
      EXEC SQL EXECUTE prep_stmt_145 using DESCRIPTOR bind_ptr ;
      break ;
    case 146 :
      EXEC SQL EXECUTE prep_stmt_146 using DESCRIPTOR bind_ptr ;
      break ;
    case 147 :
      EXEC SQL EXECUTE prep_stmt_147 using DESCRIPTOR bind_ptr ;
      break ;
    case 148 :
      EXEC SQL EXECUTE prep_stmt_148 using DESCRIPTOR bind_ptr ;
      break ;
    case 149 :
      EXEC SQL EXECUTE prep_stmt_149 using DESCRIPTOR bind_ptr ;
      break ;
    case 150 :
      EXEC SQL EXECUTE prep_stmt_150 using DESCRIPTOR bind_ptr ;
      break ;
    case 151 :
      EXEC SQL EXECUTE prep_stmt_151 using DESCRIPTOR bind_ptr ;
      break ;
    case 152 :
      EXEC SQL EXECUTE prep_stmt_152 using DESCRIPTOR bind_ptr ;
      break ;
    case 153 :
      EXEC SQL EXECUTE prep_stmt_153 using DESCRIPTOR bind_ptr ;
      break ;
    case 154 :
      EXEC SQL EXECUTE prep_stmt_154 using DESCRIPTOR bind_ptr ;
      break ;
    case 155 :
      EXEC SQL EXECUTE prep_stmt_155 using DESCRIPTOR bind_ptr ;
      break ;
    case 156 :
      EXEC SQL EXECUTE prep_stmt_156 using DESCRIPTOR bind_ptr ;
      break ;
    case 157 :
      EXEC SQL EXECUTE prep_stmt_157 using DESCRIPTOR bind_ptr ;
      break ;
    case 158 :
      EXEC SQL EXECUTE prep_stmt_158 using DESCRIPTOR bind_ptr ;
      break ;
    case 159 :
      EXEC SQL EXECUTE prep_stmt_159 using DESCRIPTOR bind_ptr ;
      break ;
    case 160 :
      EXEC SQL EXECUTE prep_stmt_160 using DESCRIPTOR bind_ptr ;
      break ;
    case 161 :
      EXEC SQL EXECUTE prep_stmt_161 using DESCRIPTOR bind_ptr ;
      break ;
    case 162 :
      EXEC SQL EXECUTE prep_stmt_162 using DESCRIPTOR bind_ptr ;
      break ;
    case 163 :
      EXEC SQL EXECUTE prep_stmt_163 using DESCRIPTOR bind_ptr ;
      break ;
    case 164 :
      EXEC SQL EXECUTE prep_stmt_164 using DESCRIPTOR bind_ptr ;
      break ;
    case 165 :
      EXEC SQL EXECUTE prep_stmt_165 using DESCRIPTOR bind_ptr ;
      break ;
    case 166 :
      EXEC SQL EXECUTE prep_stmt_166 using DESCRIPTOR bind_ptr ;
      break ;
    case 167 :
      EXEC SQL EXECUTE prep_stmt_167 using DESCRIPTOR bind_ptr ;
      break ;
    case 168 :
      EXEC SQL EXECUTE prep_stmt_168 using DESCRIPTOR bind_ptr ;
      break ;
    case 169 :
      EXEC SQL EXECUTE prep_stmt_169 using DESCRIPTOR bind_ptr ;
      break ;
    case 170 :
      EXEC SQL EXECUTE prep_stmt_170 using DESCRIPTOR bind_ptr ;
      break ;
    case 171 :
      EXEC SQL EXECUTE prep_stmt_171 using DESCRIPTOR bind_ptr ;
      break ;
    case 172 :
      EXEC SQL EXECUTE prep_stmt_172 using DESCRIPTOR bind_ptr ;
      break ;
    case 173 :
      EXEC SQL EXECUTE prep_stmt_173 using DESCRIPTOR bind_ptr ;
      break ;
    case 174 :
      EXEC SQL EXECUTE prep_stmt_174 using DESCRIPTOR bind_ptr ;
      break ;
    case 175 :
      EXEC SQL EXECUTE prep_stmt_175 using DESCRIPTOR bind_ptr ;
      break ;
    case 176 :
      EXEC SQL EXECUTE prep_stmt_176 using DESCRIPTOR bind_ptr ;
      break ;
    case 177 :
      EXEC SQL EXECUTE prep_stmt_177 using DESCRIPTOR bind_ptr ;
      break ;
    case 178 :
      EXEC SQL EXECUTE prep_stmt_178 using DESCRIPTOR bind_ptr ;
      break ;
    case 179 :
      EXEC SQL EXECUTE prep_stmt_179 using DESCRIPTOR bind_ptr ;
      break ;
    case 180 :
      EXEC SQL EXECUTE prep_stmt_180 using DESCRIPTOR bind_ptr ;
      break ;
    case 181 :
      EXEC SQL EXECUTE prep_stmt_181 using DESCRIPTOR bind_ptr ;
      break ;
    case 182 :
      EXEC SQL EXECUTE prep_stmt_182 using DESCRIPTOR bind_ptr ;
      break ;
    case 183 :
      EXEC SQL EXECUTE prep_stmt_183 using DESCRIPTOR bind_ptr ;
      break ;
    case 184 :
      EXEC SQL EXECUTE prep_stmt_184 using DESCRIPTOR bind_ptr ;
      break ;
    case 185 :
      EXEC SQL EXECUTE prep_stmt_185 using DESCRIPTOR bind_ptr ;
      break ;
    case 186 :
      EXEC SQL EXECUTE prep_stmt_186 using DESCRIPTOR bind_ptr ;
      break ;
    case 187 :
      EXEC SQL EXECUTE prep_stmt_187 using DESCRIPTOR bind_ptr ;
      break ;
    case 188 :
      EXEC SQL EXECUTE prep_stmt_188 using DESCRIPTOR bind_ptr ;
      break ;
    case 189 :
      EXEC SQL EXECUTE prep_stmt_189 using DESCRIPTOR bind_ptr ;
      break ;
    case 190 :
      EXEC SQL EXECUTE prep_stmt_190 using DESCRIPTOR bind_ptr ;
      break ;
    case 191 :
      EXEC SQL EXECUTE prep_stmt_191 using DESCRIPTOR bind_ptr ;
      break ;
    case 192 :
      EXEC SQL EXECUTE prep_stmt_192 using DESCRIPTOR bind_ptr ;
      break ;
    case 193 :
      EXEC SQL EXECUTE prep_stmt_193 using DESCRIPTOR bind_ptr ;
      break ;
    case 194 :
      EXEC SQL EXECUTE prep_stmt_194 using DESCRIPTOR bind_ptr ;
      break ;
    case 195 :
      EXEC SQL EXECUTE prep_stmt_195 using DESCRIPTOR bind_ptr ;
      break ;
    case 196 :
      EXEC SQL EXECUTE prep_stmt_196 using DESCRIPTOR bind_ptr ;
      break ;
    case 197 :
      EXEC SQL EXECUTE prep_stmt_197 using DESCRIPTOR bind_ptr ;
      break ;
    case 198 :
      EXEC SQL EXECUTE prep_stmt_198 using DESCRIPTOR bind_ptr ;
      break ;
    case 199 :
      EXEC SQL EXECUTE prep_stmt_199 using DESCRIPTOR bind_ptr ;
      break ;
    case 200 :
      EXEC SQL EXECUTE prep_stmt_200 using DESCRIPTOR bind_ptr ;
      break ;
#endif
    default :

      iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for declare cursor"), shandle, context[context_num].max_cursors);

      return GDB_ERROR ;
  }

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_commit
    - commit (and end) the transaction
    - commit may only be performed if a 'begin work' has been issued
  ======================================================================*/

long sql_commit( void )
{
  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_COMMIT);

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  EXEC SQL AT :connect_name COMMIT WORK ;

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_rollback
    - rollback (and end) the transaction
    - rollback may only be performed if a 'begin work' has been issued
 ======================================================================*/

long sql_rollback( void )
{
  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_ROLLBACK);

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  EXEC SQL AT :connect_name ROLLBACK ;

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_refresh_cursor
    - reposition the cursor pointer to the first row in the cursor

    Arguments:
    - curs_name: cursor name
    - shandle: statement handle
 ======================================================================*/

long sql_refresh_cursor(GDB_CHAR *curs_name, long shandle )
{
  context_num = gsi_current_context() ;

  if (debug & DBG1) {
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%s"), _T("SQL_REFRESH: %"), curs_name);
  }

  sql_close_cursor(curs_name, shandle, FALSE) ;
  sql_open_cursor(curs_name, shandle) ;

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_release
    - release resources allocated by 'prepare' and 'declare cursor'

    Arguments:
    - stmt_id: statement id from 'prepare' (na for Informix)
 ======================================================================*/

long sql_release(long *stmt_id)
{
  /* not applicable to Oracle see SQL_DISCONNECT
     for details */

  *stmt_id = 0 ;

  return GDB_SUCCESS ;
}


/*======================================================================
  sql_exec_stored_proc
    - execute a database stored procedure that does not return any
      arguments.

    Arguments:
    - sql_stmt: call to database stored procedure
 ======================================================================*/

long sql_exec_stored_proc(GDB_CHAR *sql_stmt)
{
  STATIC_ASSERT(sizeof(ora_sql_stmt->len) == sizeof(unsigned short), expect_varchar_len_to_be_unsigned_short);
  size_t len;
  static const GDB_CHAR prolog[] = _T("begin ");
  static const GDB_CHAR epilog[] = _T("; end;");
  const size_t prolog_len = (sizeof prolog / sizeof prolog[0]) - 1;
  const size_t epilog_len = (sizeof epilog / sizeof epilog[0]) - 1;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_EXEC_STORED_PROC);

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  len = wcslen(sql_stmt) ;
  if (sql_stmt[len-1] == ';')
    sql_stmt[len-1] = '\0' ;
  len += prolog_len + epilog_len;

  if (len >= USHRT_MAX)
  {
    iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s%d", _T("SQL statement too long, max possible length = "), USHRT_MAX - prolog_len - epilog_len - 1);
    iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINVSQL);

    return GDB_ERROR;
  }

  ora_sql_stmt = XMALLOC(sizeof(ora_sql_stmt->len) + 1 + sizeof(char)*len);
  if (NULL == ora_sql_stmt)
  {
    iomsg(DBG6|DBG9, LAYER, TRUE, FALSE, NULL, FALSE, "%s", _T("Could not alloc mem for ora_sql_stmt"));

    iomsg(DBGM, LAYER, TRUE, TRUE, NULL, TRUE, "%d", EINSMEM) ;
    return GDB_ERROR ;
  }
  /* load the sql_stmt into a PL/SQL block */
  sprintf(ora_sql_stmt->arr, "%s%s%s", prolog, sql_stmt, epilog);

  ora_sql_stmt->len = len;

  EXEC ORACLE OPTION(HOLD_CURSOR=NO) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=YES) ;

  EXEC SQL AT :connect_name EXECUTE IMMEDIATE :ora_sql_stmt;

  EXEC ORACLE OPTION(HOLD_CURSOR=YES) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=NO) ;

  XFREE (ora_sql_stmt) ;

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_exec_stored_proc_return
    - execute a fixed stored procedure that returns 1 argument (panama)

    Arguments:
    - string, string: Only have meaning to database developer
 ======================================================================*/

long sql_exec_stored_proc_return(GDB_CHAR *proc_name, GDB_CHAR *proc_args, GDB_CHAR *proc_ret_val)
{
EXEC SQL BEGIN DECLARE SECTION ;
  varchar      sRetVal[4001];  /* this size must match the size in gdb_g2_server.c */
  varchar      sProcName[64] ;
  varchar      sProcArgs[4001] ;
EXEC SQL END DECLARE SECTION ;

  long         len = 4001 ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_EXEC_STORED_PROC_RETURN);

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  /** set sp name name **/
  strncpy((char *)sProcName.arr, proc_name, 64) ;
  sProcName.len = strlen((char *)sProcName.arr) ;

  /** set sp args name **/
  strncpy((char *)sProcArgs.arr, proc_args, 4001) ;
  sProcArgs.len = strlen((char *)sProcArgs.arr) ;

  /** initialize return arg **/
  *sRetVal.arr = 0 ;
  sRetVal.len = 0 ;

  EXEC ORACLE OPTION(HOLD_CURSOR=NO) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=YES) ;

  EXEC SQL AT :connect_name EXECUTE
    BEGIN
       sp_handler (:sProcName, :sProcArgs, :sRetVal ) ;
    END ;
  END-EXEC ;

  EXEC ORACLE OPTION(HOLD_CURSOR=YES) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=NO) ;

  if (sRetVal.len <= 4000)
    len = sRetVal.len ;

  strncpy(proc_ret_val, (char *)sRetVal.arr, len) ;
  proc_ret_val[len] = 0 ;

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_ping_db
    - attempt to access the database system tables to verify db connection

    Arguments:
    - none
 ======================================================================*/

long sql_ping_db ( void )
{
  EXEC SQL BEGIN DECLARE SECTION ;
  varchar       tmp_stmt[128] ;
  EXEC SQL END DECLARE SECTION ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_PING_DB);

  /* to test for connection */
  /* GENSYMCID-1717: "select username from users_users where rownum < 0" issue with Oracle Bridge */
  strcpy((char *)tmp_stmt.arr, "SELECT SYSDATE FROM DUAL");
  tmp_stmt.len = strlen((char *)tmp_stmt.arr) ;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  EXEC ORACLE OPTION(HOLD_CURSOR=NO) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=YES) ;

  EXEC SQL AT :connect_name EXECUTE IMMEDIATE :tmp_stmt;

  EXEC ORACLE OPTION(HOLD_CURSOR=YES) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=NO) ;

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/*======================================================================
  sql_trigger

    Arguments:
    - trigger-name: name of trigger or pipe to listen on
    - trigger-timeout: seconds to wait for message
 ======================================================================*/

long sql_trigger(GDB_CHAR *trig_name, long trig_timeout, GDB_CHAR *trig_ret_msg, gsi_int context_num)
{
  int     pipe_empty = 0 ;
  int     len, j ;

  EXEC SQL BEGIN DECLARE SECTION ;
    varchar   pipe_name[257] ;
    char      retval[4000] ;
    int       pipe_timeout;
    int       status = 0 ;
  EXEC SQL END DECLARE SECTION ;

  /* CAUTION: context_num is passed from L1 as we are outside of
     run-loop during check (i.e. not within a context). Therefore
     you MUST NOT call any other function that utilizes a context
     number derived from gsi_current_context() */

  len = wcslen(trig_name) ;
  if (len > MAX_TRIGGER_NAME_LEN) 
  {
    return GDB_ERROR ;
  }
  wcscpy(pipe_name.arr, trig_name);
  pipe_name.len = len ;

  pipe_timeout = trig_timeout;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  /* read the pipe */
  EXEC SQL AT :connect_name EXECUTE
    DECLARE
      stat  INTEGER ;
      msg   VARCHAR(4000) ;
    BEGIN
      msg := '' ;
      stat := dbms_pipe.receive_message(:pipe_name, :pipe_timeout) ;
      if stat = 0 then
        dbms_pipe.unpack_message(msg) ;
      end if ;
      :status := stat;
      :retval := msg ;
    END ;
  END-EXEC ;

  if (status == 0) 
  {
    /* status may be success but DB connection may be broken as indicated
       by sqlcode. Therefore, null the return msg and return error to
       prevent perpetual loop in GDB */
    if (sqlca.sqlcode != 0) 
    {
      *trig_ret_msg = '\0' ;
      if (context[context_num].console_output)
      {
        if (context[context_num].name != NULL)
          wprintf(_T("G2-%s: %s: %s: %s\n"), DB_TYPE, context[context_num].name,
                  ERROR_SYM, sqlca.sqlerrm.sqlerrmc) ;
        else
          wprintf(_T("G2-%s: %d: %s: %s\n"), DB_TYPE, context_num, ERROR_SYM, sqlca.sqlerrm.sqlerrmc) ;
      }
      return GDB_EXT_ERROR ;
    }

    /*
    ** Determine how many chars are in the retval array
    ** Disregard trailing spaces
    */
    len = 0 ;
    for (j=strlen(retval)-1; j>=0; j--) 
    {
      if (retval[j] == ' ')
        continue ;
      else 
      {
        len = ++j ;
        break ;
      }
    }

    if (len > MAX_TRIGGER_MSG_LEN-1)
      len = MAX_TRIGGER_MSG_LEN-1 ;

    strncpy(trig_ret_msg, retval, len) ;
    trig_ret_msg[len] = '\0' ;
    return GDB_SUCCESS ;
  }
  else 
  {
    *trig_ret_msg = '\0' ;
    if (sqlca.sqlcode != 0 && sqlca.sqlcode != DB_EMPTY_PIPE) 
    {
      if (context[context_num].console_output)
      {
        if (context[context_num].name != NULL)
          printf("G2-%s: %s: %s: %s", DB_TYPE, context[context_num].name,
                  ERROR_SYM, sqlca.sqlerrm.sqlerrmc) ;
        else
          printf("G2-%s: %d: %s: %s", DB_TYPE, context_num, ERROR_SYM, sqlca.sqlerrm.sqlerrmc) ;
      }
      return GDB_EXT_ERROR ;
    }
    return GDB_SUCCESS ;
  }

}



/*======================================================================
  sql_exec_sql_obj
    - executes an SQL statement and uses an object as the source of
      data for the bind variables

    Arguments:
    - shandle: statement handle
    - array_size: the number of elements in the bind variable(s)
    - stmt_id: NA for Oracle
 ======================================================================*/

long sql_exec_sql_obj( shandle, array_size, stmt_id )
    long   shandle ;
    long   array_size ;
    long   stmt_id ;
{
  SQLDA            *bind_ptr ;

  context_num = gsi_current_context() ;

  if (debug & DBG1)
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, "%s", F_SQL_EXEC_SQL_OBJ) ;

  if (shandle == 0) return GDB_ERROR ;

  bind_ptr = sqlda_ptrs[context_num][shandle].bptr ;

  if (debug & DBG10)
    dump_descriptor(bind_ptr, array_size) ;

  switch (shandle) 
  {
    case   1 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_1 using DESCRIPTOR bind_ptr ;
      break ;
    case   2 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_2 using DESCRIPTOR bind_ptr ;
      break ;
    case   3 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_3 using DESCRIPTOR bind_ptr ;
      break ;
    case   4 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_4 using DESCRIPTOR bind_ptr ;
      break ;
    case   5 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_5 using DESCRIPTOR bind_ptr ;
      break ;
    case   6 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_6 using DESCRIPTOR bind_ptr ;
      break ;
    case   7 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_7 using DESCRIPTOR bind_ptr ;
      break ;
    case   8 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_8 using DESCRIPTOR bind_ptr ;
      break ;
    case   9 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_9 using DESCRIPTOR bind_ptr ;
      break ;
    case  10 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_10 using DESCRIPTOR bind_ptr ;
      break ;
    case  11 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_11 using DESCRIPTOR bind_ptr ;
      break ;
    case  12 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_12 using DESCRIPTOR bind_ptr ;
      break ;
    case  13 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_13 using DESCRIPTOR bind_ptr ;
      break ;
    case  14 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_14 using DESCRIPTOR bind_ptr ;
      break ;
    case  15 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_15 using DESCRIPTOR bind_ptr ;
      break ;
    case  16 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_16 using DESCRIPTOR bind_ptr ;
      break ;
    case  17 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_17 using DESCRIPTOR bind_ptr ;
      break ;
    case  18 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_18 using DESCRIPTOR bind_ptr ;
      break ;
    case  19 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_19 using DESCRIPTOR bind_ptr ;
      break ;
    case  20 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_20 using DESCRIPTOR bind_ptr ;
      break ;
    case  21 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_21 using DESCRIPTOR bind_ptr ;
      break ;
    case  22 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_22 using DESCRIPTOR bind_ptr ;
      break ;
    case  23 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_23 using DESCRIPTOR bind_ptr ;
      break ;
    case  24 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_24 using DESCRIPTOR bind_ptr ;
      break ;
    case  25 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_25 using DESCRIPTOR bind_ptr ;
      break ;
    case  26 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_26 using DESCRIPTOR bind_ptr ;
      break ;
    case  27 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_27 using DESCRIPTOR bind_ptr ;
      break ;
    case  28 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_28 using DESCRIPTOR bind_ptr ;
      break ;
    case  29 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_29 using DESCRIPTOR bind_ptr ;
      break ;
    case  30 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_30 using DESCRIPTOR bind_ptr ;
      break ;
    case  31 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_31 using DESCRIPTOR bind_ptr ;
      break ;
    case  32 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_32 using DESCRIPTOR bind_ptr ;
      break ;
    case  33 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_33 using DESCRIPTOR bind_ptr ;
      break ;
    case  34 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_34 using DESCRIPTOR bind_ptr ;
      break ;
    case  35 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_35 using DESCRIPTOR bind_ptr ;
      break ;
    case  36 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_36 using DESCRIPTOR bind_ptr ;
      break ;
    case  37 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_37 using DESCRIPTOR bind_ptr ;
      break ;
    case  38 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_38 using DESCRIPTOR bind_ptr ;
      break ;
    case  39 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_39 using DESCRIPTOR bind_ptr ;
      break ;
    case  40 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_40 using DESCRIPTOR bind_ptr ;
      break ;
    case  41 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_41 using DESCRIPTOR bind_ptr ;
      break ;
    case  42 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_42 using DESCRIPTOR bind_ptr ;
      break ;
    case  43 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_43 using DESCRIPTOR bind_ptr ;
      break ;
    case  44 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_44 using DESCRIPTOR bind_ptr ;
      break ;
    case  45 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_45 using DESCRIPTOR bind_ptr ;
      break ;
    case  46 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_46 using DESCRIPTOR bind_ptr ;
      break ;
    case  47 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_47 using DESCRIPTOR bind_ptr ;
      break ;
    case  48 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_48 using DESCRIPTOR bind_ptr ;
      break ;
    case  49 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_49 using DESCRIPTOR bind_ptr ;
      break ;
    case  50 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_50 using DESCRIPTOR bind_ptr ;
      break ;
    case  51 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_51 using DESCRIPTOR bind_ptr ;
      break ;
    case  52 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_52 using DESCRIPTOR bind_ptr ;
      break ;
    case  53 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_53 using DESCRIPTOR bind_ptr ;
      break ;
    case  54 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_54 using DESCRIPTOR bind_ptr ;
      break ;
    case  55 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_55 using DESCRIPTOR bind_ptr ;
      break ;
    case  56 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_56 using DESCRIPTOR bind_ptr ;
      break ;
    case  57 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_57 using DESCRIPTOR bind_ptr ;
      break ;
    case  58 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_58 using DESCRIPTOR bind_ptr ;
      break ;
    case  59 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_59 using DESCRIPTOR bind_ptr ;
      break ;
    case  60 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_60 using DESCRIPTOR bind_ptr ;
      break ;
    case  61 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_61 using DESCRIPTOR bind_ptr ;
      break ;
    case  62 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_62 using DESCRIPTOR bind_ptr ;
      break ;
    case  63 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_63 using DESCRIPTOR bind_ptr ;
      break ;
    case  64 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_64 using DESCRIPTOR bind_ptr ;
      break ;
    case  65 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_65 using DESCRIPTOR bind_ptr ;
      break ;
    case  66 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_66 using DESCRIPTOR bind_ptr ;
      break ;
    case  67 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_67 using DESCRIPTOR bind_ptr ;
      break ;
    case  68 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_68 using DESCRIPTOR bind_ptr ;
      break ;
    case  69 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_69 using DESCRIPTOR bind_ptr ;
      break ;
    case  70 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_70 using DESCRIPTOR bind_ptr ;
      break ;
    case  71 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_71 using DESCRIPTOR bind_ptr ;
      break ;
    case  72 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_72 using DESCRIPTOR bind_ptr ;
      break ;
    case  73 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_73 using DESCRIPTOR bind_ptr ;
      break ;
    case  74 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_74 using DESCRIPTOR bind_ptr ;
      break ;
    case  75 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_75 using DESCRIPTOR bind_ptr ;
      break ;
    case  76 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_76 using DESCRIPTOR bind_ptr ;
      break ;
    case  77 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_77 using DESCRIPTOR bind_ptr ;
      break ;
    case  78 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_78 using DESCRIPTOR bind_ptr ;
      break ;
    case  79 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_79 using DESCRIPTOR bind_ptr ;
      break ;
    case  80 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_80 using DESCRIPTOR bind_ptr ;
      break ;
    case  81 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_81 using DESCRIPTOR bind_ptr ;
      break ;
    case  82 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_82 using DESCRIPTOR bind_ptr ;
      break ;
    case  83 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_83 using DESCRIPTOR bind_ptr ;
      break ;
    case  84 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_84 using DESCRIPTOR bind_ptr ;
      break ;
    case  85 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_85 using DESCRIPTOR bind_ptr ;
      break ;
    case  86 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_86 using DESCRIPTOR bind_ptr ;
      break ;
    case  87 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_87 using DESCRIPTOR bind_ptr ;
      break ;
    case  88 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_88 using DESCRIPTOR bind_ptr ;
      break ;
    case  89 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_89 using DESCRIPTOR bind_ptr ;
      break ;
    case  90 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_90 using DESCRIPTOR bind_ptr ;
      break ;
    case  91 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_91 using DESCRIPTOR bind_ptr ;
      break ;
    case  92 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_92 using DESCRIPTOR bind_ptr ;
      break ;
    case  93 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_93 using DESCRIPTOR bind_ptr ;
      break ;
    case  94 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_94 using DESCRIPTOR bind_ptr ;
      break ;
    case  95 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_95 using DESCRIPTOR bind_ptr ;
      break ;
    case  96 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_96 using DESCRIPTOR bind_ptr ;
      break ;
    case  97 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_97 using DESCRIPTOR bind_ptr ;
      break ;
    case  98 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_98 using DESCRIPTOR bind_ptr ;
      break ;
    case  99 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_99 using DESCRIPTOR bind_ptr ;
      break ;
    case 100 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_100 using DESCRIPTOR bind_ptr ;
      break ;
#ifndef SMSW
    case 101 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_101 using DESCRIPTOR bind_ptr ;
      break ;
    case 102 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_102 using DESCRIPTOR bind_ptr ;
      break ;
    case 103 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_103 using DESCRIPTOR bind_ptr ;
      break ;
    case 104 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_104 using DESCRIPTOR bind_ptr ;
      break ;
    case 105 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_105 using DESCRIPTOR bind_ptr ;
      break ;
    case 106 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_106 using DESCRIPTOR bind_ptr ;
      break ;
    case 107 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_107 using DESCRIPTOR bind_ptr ;
      break ;
    case 108 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_108 using DESCRIPTOR bind_ptr ;
      break ;
    case 109 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_109 using DESCRIPTOR bind_ptr ;
      break ;
    case 110 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_110 using DESCRIPTOR bind_ptr ;
      break ;
    case 111 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_111 using DESCRIPTOR bind_ptr ;
      break ;
    case 112 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_112 using DESCRIPTOR bind_ptr ;
      break ;
    case 113 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_113 using DESCRIPTOR bind_ptr ;
      break ;
    case 114 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_114 using DESCRIPTOR bind_ptr ;
      break ;
    case 115 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_115 using DESCRIPTOR bind_ptr ;
      break ;
    case 116 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_116 using DESCRIPTOR bind_ptr ;
      break ;
    case 117 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_117 using DESCRIPTOR bind_ptr ;
      break ;
    case 118 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_118 using DESCRIPTOR bind_ptr ;
      break ;
    case 119 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_119 using DESCRIPTOR bind_ptr ;
      break ;
    case 120 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_120 using DESCRIPTOR bind_ptr ;
      break ;
    case 121 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_121 using DESCRIPTOR bind_ptr ;
      break ;
    case 122 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_122 using DESCRIPTOR bind_ptr ;
      break ;
    case 123 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_123 using DESCRIPTOR bind_ptr ;
      break ;
    case 124 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_124 using DESCRIPTOR bind_ptr ;
      break ;
    case 125 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_125 using DESCRIPTOR bind_ptr ;
      break ;
    case 126 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_126 using DESCRIPTOR bind_ptr ;
      break ;
    case 127 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_127 using DESCRIPTOR bind_ptr ;
      break ;
    case 128 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_128 using DESCRIPTOR bind_ptr ;
      break ;
    case 129 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_129 using DESCRIPTOR bind_ptr ;
      break ;
    case 130 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_130 using DESCRIPTOR bind_ptr ;
      break ;
    case 131 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_131 using DESCRIPTOR bind_ptr ;
      break ;
    case 132 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_132 using DESCRIPTOR bind_ptr ;
      break ;
    case 133 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_133 using DESCRIPTOR bind_ptr ;
      break ;
    case 134 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_134 using DESCRIPTOR bind_ptr ;
      break ;
    case 135 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_135 using DESCRIPTOR bind_ptr ;
      break ;
    case 136 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_136 using DESCRIPTOR bind_ptr ;
      break ;
    case 137 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_137 using DESCRIPTOR bind_ptr ;
      break ;
    case 138 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_138 using DESCRIPTOR bind_ptr ;
      break ;
    case 139 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_139 using DESCRIPTOR bind_ptr ;
      break ;
    case 140 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_140 using DESCRIPTOR bind_ptr ;
      break ;
    case 141 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_141 using DESCRIPTOR bind_ptr ;
      break ;
    case 142 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_142 using DESCRIPTOR bind_ptr ;
      break ;
    case 143 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_143 using DESCRIPTOR bind_ptr ;
      break ;
    case 144 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_144 using DESCRIPTOR bind_ptr ;
      break ;
    case 145 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_145 using DESCRIPTOR bind_ptr ;
      break ;
    case 146 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_146 using DESCRIPTOR bind_ptr ;
      break ;
    case 147 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_147 using DESCRIPTOR bind_ptr ;
      break ;
    case 148 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_148 using DESCRIPTOR bind_ptr ;
      break ;
    case 149 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_149 using DESCRIPTOR bind_ptr ;
      break ;
    case 150 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_150 using DESCRIPTOR bind_ptr ;
      break ;
    case 151 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_151 using DESCRIPTOR bind_ptr ;
      break ;
    case 152 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_152 using DESCRIPTOR bind_ptr ;
      break ;
    case 153 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_153 using DESCRIPTOR bind_ptr ;
      break ;
    case 154 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_154 using DESCRIPTOR bind_ptr ;
      break ;
    case 155 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_155 using DESCRIPTOR bind_ptr ;
      break ;
    case 156 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_156 using DESCRIPTOR bind_ptr ;
      break ;
    case 157 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_157 using DESCRIPTOR bind_ptr ;
      break ;
    case 158 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_158 using DESCRIPTOR bind_ptr ;
      break ;
    case 159 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_159 using DESCRIPTOR bind_ptr ;
      break ;
    case 160 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_160 using DESCRIPTOR bind_ptr ;
      break ;
    case 161 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_161 using DESCRIPTOR bind_ptr ;
      break ;
    case 162 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_162 using DESCRIPTOR bind_ptr ;
      break ;
    case 163 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_163 using DESCRIPTOR bind_ptr ;
      break ;
    case 164 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_164 using DESCRIPTOR bind_ptr ;
      break ;
    case 165 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_165 using DESCRIPTOR bind_ptr ;
      break ;
    case 166 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_166 using DESCRIPTOR bind_ptr ;
      break ;
    case 167 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_167 using DESCRIPTOR bind_ptr ;
      break ;
    case 168 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_168 using DESCRIPTOR bind_ptr ;
      break ;
    case 169 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_169 using DESCRIPTOR bind_ptr ;
      break ;
    case 170 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_170 using DESCRIPTOR bind_ptr ;
      break ;
    case 171 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_171 using DESCRIPTOR bind_ptr ;
      break ;
    case 172 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_172 using DESCRIPTOR bind_ptr ;
      break ;
    case 173 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_173 using DESCRIPTOR bind_ptr ;
      break ;
    case 174 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_174 using DESCRIPTOR bind_ptr ;
      break ;
    case 175 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_175 using DESCRIPTOR bind_ptr ;
      break ;
    case 176 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_176 using DESCRIPTOR bind_ptr ;
      break ;
    case 177 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_177 using DESCRIPTOR bind_ptr ;
      break ;
    case 178 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_178 using DESCRIPTOR bind_ptr ;
      break ;
    case 179 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_179 using DESCRIPTOR bind_ptr ;
      break ;
    case 180 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_180 using DESCRIPTOR bind_ptr ;
      break ;
    case 181 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_181 using DESCRIPTOR bind_ptr ;
      break ;
    case 182 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_182 using DESCRIPTOR bind_ptr ;
      break ;
    case 183 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_183 using DESCRIPTOR bind_ptr ;
      break ;
    case 184 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_184 using DESCRIPTOR bind_ptr ;
      break ;
    case 185 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_185 using DESCRIPTOR bind_ptr ;
      break ;
    case 186 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_186 using DESCRIPTOR bind_ptr ;
      break ;
    case 187 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_187 using DESCRIPTOR bind_ptr ;
      break ;
    case 188 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_188 using DESCRIPTOR bind_ptr ;
      break ;
    case 189 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_189 using DESCRIPTOR bind_ptr ;
      break ;
    case 190 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_190 using DESCRIPTOR bind_ptr ;
      break ;
    case 191 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_191 using DESCRIPTOR bind_ptr ;
      break ;
    case 192 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_192 using DESCRIPTOR bind_ptr ;
      break ;
    case 193 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_193 using DESCRIPTOR bind_ptr ;
      break ;
    case 194 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_194 using DESCRIPTOR bind_ptr ;
      break ;
    case 195 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_195 using DESCRIPTOR bind_ptr ;
      break ;
    case 196 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_196 using DESCRIPTOR bind_ptr ;
      break ;
    case 197 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_197 using DESCRIPTOR bind_ptr ;
      break ;
    case 198 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_198 using DESCRIPTOR bind_ptr ;
      break ;
    case 199 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_199 using DESCRIPTOR bind_ptr ;
      break ;
    case 200 :
      EXEC SQL FOR :array_size
      EXECUTE prep_stmt_200 using DESCRIPTOR bind_ptr ;
      break ;
#endif
    default :

      iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d%d"), _T("Supplied handle % exceeds MAX_CURSORS % for declare cursor"), shandle, context[context_num].max_cursors);

      return GDB_ERROR ;
  }

  return (sqlca.sqlcode < 0 ? GDB_EXT_ERROR : GDB_SUCCESS) ;
}


/* ========================================================================== */
/*                                                                            */
/*                     The Oracle Bridge does not use DSNs                    */
/*                                                                            */
/* ========================================================================== */
long    sql_uses_DSNs()
{
    return 0 ;
}


/* ========================================================================== */
/*                                                                            */
/*                           sql_configure_DSN                                */
/*                          ** NOT SUPPORTED **                               */
/*                                                                            */
/* ========================================================================== */
long    sql_configure_DSN(gsi_int action, gsi_char* DrvrName, gsi_item* pKVStruct, gsi_int *piCode, gsi_char** pDSNName )
{
    return ENODSNS ;
}


/*======================================================================
   sql_close_cursor_release  (10a)
    - This function will mark the cursor within the Oracle cursor cache
      for immediate release. This is necessary when deleting a cursor-
      object in G2.

    Arguments:
    - curs_name: cursor name
    - shandle: statement handle
 ======================================================================*/

long sql_close_cursor_release(GDB_CHAR *curs_name, long shandle)
{
  context_num = gsi_current_context() ;

  if (debug & DBG1) {
    iomsg(DBG1, -LAYER, TRUE, FALSE, NULL, FALSE, _T("%s%d"), _T("SQL_CLOSE_CURSOR_RELEASE: C%"), shandle);
  }

  if (shandle == 0) return GDB_ERROR ;

  /** set context connection name **/
  sprintf(connect_name.arr, "DB%d", context_num);
  connect_name.len = strlen(connect_name.arr);

  /** immediately remove cursor from cache **/
  EXEC ORACLE OPTION(HOLD_CURSOR=NO) ;
  EXEC ORACLE OPTION(RELEASE_CURSOR=YES) ;

  switch (shandle) 
  {
    case   1 :
      EXEC SQL CLOSE C1 ;
      break ;
    case   2 :
      EXEC SQL CLOSE C2 ;
      break ;
    case   3 :
      EXEC SQL CLOSE C3 ;
      break ;
    case   4 :
      EXEC SQL CLOSE C4 ;
      break ;
    case   5 :
      EXEC SQL CLOSE C5 ;
      break ;
    case   6 :
      EXEC SQL CLOSE C6 ;
      break ;
    case   7 :
      EXEC SQL CLOSE C7 ;
      break ;
    case   8 :
      EXEC SQL CLOSE C8 ;
      break ;
    case   9 :
      EXEC SQL CLOSE C9 ;
      break ;
    case  10 :
      EXEC SQL CLOSE C10 ;
      break ;
    case  11 :
      EXEC SQL CLOSE C11 ;
      break ;
    case  12 :
      EXEC SQL CLOSE C12 ;
      break ;
    case  13 :
      EXEC SQL CLOSE C13 ;
      break ;
    case  14 :
      EXEC SQL CLOSE C14 ;
      break ;
    case  15 :
      EXEC SQL CLOSE C15 ;
      break ;
    case  16 :
      EXEC SQL CLOSE C16 ;
      break ;
    case  17 :
      EXEC SQL CLOSE C17 ;
      break ;
    case  18 :
      EXEC SQL CLOSE C18 ;
      break ;
    case  19 :
      EXEC SQL CLOSE C19 ;
      break ;
    case  20 :
      EXEC SQL CLOSE C20 ;
      break ;
    case  21 :
      EXEC SQL CLOSE C21 ;
      break ;
    case  22 :
      EXEC SQL CLOSE C22 ;
      break ;
    case  23 :
      EXEC SQL CLOSE C23 ;
      break ;
    case  24 :
      EXEC SQL CLOSE C24 ;
      break ;
    case  25 :
      EXEC SQL CLOSE C25 ;
      break ;
    case  26 :
      EXEC SQL CLOSE C26 ;
      break ;
    case  27 :
      EXEC SQL CLOSE C27 ;
      break ;
    case  28 :
      EXEC SQL CLOSE C28 ;
      break ;
    case  29 :
      EXEC SQL CLOSE C29 ;
      break ;
    case  30 :
      EXEC SQL CLOSE C30 ;
      break ;
    case  31 :
      EXEC SQL CLOSE C31 ;
      break ;
    case  32 :
      EXEC SQL CLOSE C32 ;
      break ;
    case  33 :
      EXEC SQL CLOSE C33 ;
      break ;
    case  34 :
      EXEC SQL CLOSE C34 ;
      break ;
    case  35 :
      EXEC SQL CLOSE C35 ;
      break ;
    case  36 :
      EXEC SQL CLOSE C36 ;
      break ;
    case  37 :
      EXEC SQL CLOSE C37 ;
      break ;
    case  38 :
      EXEC SQL CLOSE C38 ;
      break ;
    case  39 :
      EXEC SQL CLOSE C39 ;
      break ;
    case  40 :
      EXEC SQL CLOSE C40 ;
      break ;
    case  41 :
      EXEC SQL CLOSE C41 ;
      break ;
    case  42 :
      EXEC SQL CLOSE C42 ;
      break ;
    case  43 :
      EXEC SQL CLOSE C43 ;
      break ;
    case  44 :
      EXEC SQL CLOSE C44 ;
      break ;
    case  45 :
      EXEC SQL CLOSE C45 ;
      break ;
    case  46 :
      EXEC SQL CLOSE C46 ;
      break ;
    case  47 :
      EXEC SQL CLOSE C47 ;
      break ;
    case  48 :
      EXEC SQL CLOSE C48 ;
      break ;
    case  49 :
      EXEC SQL CLOSE C49 ;
      break ;
    case  50 :
      EXEC SQL CLOSE C50 ;
      break ;
    case  51 :
      EXEC SQL CLOSE C51 ;
      break ;
    case  52 :
      EXEC SQL CLOSE C52 ;
      break ;
    case  53 :
      EXEC SQL CLOSE C53 ;
      break ;
    case  54 :
      EXEC SQL CLOSE C54 ;
      break ;
    case  55 :
      EXEC SQL CLOSE C55 ;
      break ;
    case  56 :
      EXEC SQL CLOSE C56 ;
      break ;
    case  57 :
      EXEC SQL CLOSE C57 ;
      break ;
    case  58 :
      EXEC SQL CLOSE C58 ;
      break ;
    case  59 :
      EXEC SQL CLOSE C59 ;
      break ;
    case  60 :
      EXEC SQL CLOSE C60 ;
      break ;
    case  61 :
      EXEC SQL CLOSE C61 ;
      break ;
    case  62 :
      EXEC SQL CLOSE C62 ;
      break ;
    case  63 :
      EXEC SQL CLOSE C63 ;
      break ;
    case  64 :
      EXEC SQL CLOSE C64 ;
      break ;
    case  65 :
      EXEC SQL CLOSE C65 ;
      break ;
    case  66 :
      EXEC SQL CLOSE C66 ;
      break ;
    case  67 :
      EXEC SQL CLOSE C67 ;
      break ;
    case  68 :
      EXEC SQL CLOSE C68 ;
      break ;
    case  69 :
      EXEC SQL CLOSE C69 ;
      break ;
    case  70 :
      EXEC SQL CLOSE C70 ;
      break ;
    case  71 :
      EXEC SQL CLOSE C71 ;
      break ;
    case  72 :
      EXEC SQL CLOSE C72 ;
      break ;
    case  73 :
      EXEC SQL CLOSE C73 ;
      break ;
    case  74 :
      EXEC SQL CLOSE C74 ;
      break ;
    case  75 :
      EXEC SQL CLOSE C75 ;
      break ;
    case  76 :
      EXEC SQL CLOSE C76 ;
      break ;
    case  77 :
      EXEC SQL CLOSE C77 ;
      break ;
    case  78 :
      EXEC SQL CLOSE C78 ;
      break ;
    case  79 :
      EXEC SQL CLOSE C79 ;
      break ;
    case  80 :
      EXEC SQL CLOSE C80 ;
      break ;
    case  81 :
      EXEC SQL CLOSE C81 ;
      break ;
    case  82 :
      EXEC SQL CLOSE C82 ;
      break ;
    case  83 :
      EXEC SQL CLOSE C83 ;
      break ;
    case  84 :
      EXEC SQL CLOSE C84 ;
      break ;
    case  85 :
      EXEC SQL CLOSE C85 ;
      break ;
    case  86 :
      EXEC SQL CLOSE C86 ;
      break ;
    case  87 :
      EXEC SQL CLOSE C87 ;
      break ;
    case  88 :
      EXEC SQL CLOSE C88 ;
      break ;
    case  89 :
      EXEC SQL CLOSE C89 ;
      break ;
    case  90 :
      EXEC SQL CLOSE C90 ;
      break ;
    case  91 :
      EXEC SQL CLOSE C91 ;
      break ;
    case  92 :
      EXEC SQL CLOSE C92 ;
      break ;
    case  93 :
      EXEC SQL CLOSE C93 ;
      break ;
    case  94 :
      EXEC SQL CLOSE C94 ;
      break ;
    case  95 :
      EXEC SQL CLOSE C95 ;
      break ;
    case  96 :
      EXEC SQL CLOSE C96 ;
      break ;
    case  97 :
      EXEC SQL CLOSE C97 ;
      break ;
    case  98 :
      EXEC SQL CLOSE C98 ;
      break ;
    case  99 :
      EXEC SQL CLOSE C99 ;
      break ;
    case 100 :
      EXEC SQL CLOSE C100 ;
      break ;
#ifndef SMSW
    case 101 :
      EXEC SQL CLOSE C101 ;
      break ;
    case 102 :
      EXEC SQL CLOSE C102 ;
      break ;
    case 103 :
      EXEC SQL CLOSE C103 ;
      break ;
    case 104 :
      EXEC SQL CLOSE C104 ;
      break ;
    case 105 :
      EXEC SQL CLOSE C105 ;
      break ;
    case 106 :
      EXEC SQL CLOSE C106 ;
      break ;
    case 107 :
      EXEC SQL CLOSE C107 ;
      break ;
    case 108 :
      EXEC SQL CLOSE C108 ;
      break ;
    case 109 :
      EXEC SQL CLOSE C109 ;
      break ;
    case 110 :
      EXEC SQL CLOSE C110 ;
      break ;
    case 111 :
      EXEC SQL CLOSE C111 ;
      break ;
    case 112 :
      EXEC SQL CLOSE C112 ;
      break ;
    case 113 :
      EXEC SQL CLOSE C113 ;
      break ;
    case 114 :
      EXEC SQL CLOSE C114 ;
      break ;
    case 115 :
      EXEC SQL CLOSE C115 ;
      break ;
    case 116 :
      EXEC SQL CLOSE C116 ;
      break ;
    case 117 :
      EXEC SQL CLOSE C117 ;
      break ;
    case 118 :
      EXEC SQL CLOSE C118 ;
      break ;
    case 119 :
      EXEC SQL CLOSE C119 ;
      break ;
    case 120 :
      EXEC SQL CLOSE C120 ;
      break ;
    case 121 :
      EXEC SQL CLOSE C121 ;
      break ;
    case 122 :
      EXEC SQL CLOSE C122 ;
      break ;
    case 123 :
      EXEC SQL CLOSE C123 ;
      break ;
    case 124 :
      EXEC SQL CLOSE C124 ;
      break ;
    case 125 :
      EXEC SQL CLOSE C125 ;
      break ;
    case 126 :
      EXEC SQL CLOSE C126 ;
      break ;
    case 127 :
      EXEC SQL CLOSE C127 ;
      break ;
    case 128 :
      EXEC SQL CLOSE C128 ;
      break ;
    case 129 :
      EXEC SQL CLOSE C129 ;
      break ;
    case 130 :
      EXEC SQL CLOSE C130 ;
      break ;
    case 131 :
      EXEC SQL CLOSE C131 ;
      break ;
    case 132 :
      EXEC SQL CLOSE C132 ;
      break ;
    case 133 :
      EXEC SQL CLOSE C133 ;
      break ;
    case 134 :
      EXEC SQL CLOSE C134 ;
      break ;
    case 135 :
      EXEC SQL CLOSE C135 ;
      break ;
    case 136 :
      EXEC SQL CLOSE C136 ;
      break ;
    case 137 :
      EXEC SQL CLOSE C137 ;
      break ;
    case 138 :
      EXEC SQL CLOSE C138 ;
      break ;
    case 139 :
      EXEC SQL CLOSE C139 ;
      break ;
    case 140 :
      EXEC SQL CLOSE C140 ;
      break ;
    case 141 :
      EXEC SQL CLOSE C141 ;
      break ;
    case 142 :
      EXEC SQL CLOSE C142 ;
      break ;
    case 143 :
      EXEC SQL CLOSE C143 ;
      break ;
    case 144 :
      EXEC SQL CLOSE C144 ;
      break ;
    case 145 :
      EXEC SQL CLOSE C145 ;
      break ;
    case 146 :
      EXEC SQL CLOSE C146 ;
      break ;
    case 147 :
      EXEC SQL CLOSE C147 ;
      break ;
    case 148 :
      EXEC SQL CLOSE C148 ;
      break ;
    case 149 :
      EXEC SQL CLOSE C149 ;
      break ;
    case 150 :
      EXEC SQL CLOSE C150 ;
      break ;
    case 151 :
      EXEC SQL CLOSE C151 ;
      break ;
    case 152 :
      EXEC SQL CLOSE C152 ;
      break ;
    case 153 :
      EXEC SQL CLOSE C153 ;
      break ;
    case 154 :
      EXEC SQL CLOSE C154 ;
      break ;
    case 155 :
      EXEC SQL CLOSE C155 ;
      break ;
    case 156 :
      EXEC SQL CLOSE C156 ;
      break ;
    case 157 :
      EXEC SQL CLOSE C157 ;
      break ;
    case 158 :
      EXEC SQL CLOSE C158 ;
      break ;
    case 159 :
      EXEC SQL CLOSE C159 ;
      break ;
    case 160 :
      EXEC SQL CLOSE C160 ;
      break ;
    case 161 :
      EXEC SQL CLOSE C161 ;
      break ;
    case 162 :
      EXEC SQL CLOSE C162 ;
      break ;
    case 163 :
      EXEC SQL CLOSE C163 ;
      break ;
    case 164 :
      EXEC SQL CLOSE C164 ;
      break ;
    case 165 :
      EXEC SQL CLOSE C165 ;
      break ;
    case 166 :
      EXEC SQL CLOSE C166 ;
      break ;
    case 167 :
      EXEC SQL CLOSE C167 ;
      break ;
    case 168 :
      EXEC SQL CLOSE C168 ;
      break ;
    case 169 :
      EXEC SQL CLOSE C169 ;
      break ;
    case 170 :
      EXEC SQL CLOSE C170 ;
      break ;
    case 171 :
      EXEC SQL CLOSE C171 ;
      break ;
    case 172 :
      EXEC SQL CLOSE C172 ;
      break ;
    case 173 :
      EXEC SQL CLOSE C173 ;
      break ;
    case 174 :
      EXEC SQL CLOSE C174 ;
      break ;
    case 175 :
      EXEC SQL CLOSE C175 ;
      break ;
    case 176 :
      EXEC SQL CLOSE C176 ;
      break ;
    case 177 :
      EXEC SQL CLOSE C177 ;
      break ;
    case 178 :
      EXEC SQL CLOSE C178 ;
      break ;
    case 179 :
      EXEC SQL CLOSE C179 ;
      break ;
    case 180 :
      EXEC SQL CLOSE C180 ;
      break ;
    case 181 :
      EXEC SQL CLOSE C181 ;
      break ;
    case 182 :
      EXEC SQL CLOSE C182 ;
      break ;
    case 183 :
      EXEC SQL CLOSE C183 ;
      break ;
    case 184 :
      EXEC SQL CLOSE C184 ;
      break ;
    case 185 :
      EXEC SQL CLOSE C185 ;
      break ;
    case 186 :
      EXEC SQL CLOSE C186 ;
      break ;
    case 187 :
      EXEC SQL CLOSE C187 ;
      break ;
    case 188 :
      EXEC SQL CLOSE C188 ;
      break ;
    case 189 :
      EXEC SQL CLOSE C189 ;
      break ;
    case 190 :
      EXEC SQL CLOSE C190 ;
      break ;
    case 191 :
      EXEC SQL CLOSE C191 ;
      break ;
    case 192 :
      EXEC SQL CLOSE C192 ;
      break ;
    case 193 :
      EXEC SQL CLOSE C193 ;
      break ;
    case 194 :
      EXEC SQL CLOSE C194 ;
      break ;
    case 195 :
      EXEC SQL CLOSE C195 ;
      break ;
    case 196 :
      EXEC SQL CLOSE C196 ;
      break ;
    case 197 :
      EXEC SQL CLOSE C197 ;
      break ;
    case 198 :
      EXEC SQL CLOSE C198 ;
      break ;
    case 199 :
      EXEC SQL CLOSE C199 ;
      break ;
    case 200 :
      EXEC SQL CLOSE C200 ;
      break ;
#endif  
    default :
      iomsg(DBG3, LAYER, TRUE, FALSE, NULL, FALSE, "%s%d%d", _T("Supplied handle % exceeds MAX_CURSORS % for 'close cursor'"), shandle, context[context_num].max_cursors);

      return GDB_ERROR ;
  }

    EXEC ORACLE OPTION(HOLD_CURSOR=YES) ;
    EXEC ORACLE OPTION(RELEASE_CURSOR=NO) ;

    sqlda_ptrs[context_num][shandle].fCursorOpen = FALSE ;
    return GDB_SUCCESS ;
}
