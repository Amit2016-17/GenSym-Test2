#!/bin/csh
# jh, 5/3/93.  Shell script to macroexpand a C macro in one of our environments.
# jh, 5/5/93.  I believe this will work on all UNIX platforms now.
#   (Solaris was the only platform that necessitated changes).

# Still under development as of this date, but the sooner more people are able to
# expand C macros, the better.

# first argument is one of runtime, ext, or translate
#  runtime:   use Chestnut runtime macros
#  ext:       use Gensym macros in ext directory (not yet implemented)
#  trans:     use Chestnut macros in translated files

# second argument is the macro expression

# third argument (optional) is translated G2 module name 
# (because translated modules have .h files too)

# examples (pretty printing added):
#
#   cmacroexpand trans "SVREF(array, index)"
#     (( struct {SI_Primitive_vector v;  Object contents[ 1 ?  1 : 1];} *)array)-> 
#     contents[ ((SI_Long)( index) >> 2)]
#
#   cmacroexpand trans "Q_SYSTEM_KB_TYPE" f134
#     ((Object)(((Object *)&Ab_symtab[ 190]) + 1))

# associated files:
#  cmacroexpand.awk  awk command file to filter out actual macroexpansion
#                    from all the #include text
#  cmacroexpand.com  VMD DCL command file to ape this shell script

# environmental assumptions:
#   needs     what        who sets it up
#   cshell    shell       first line in this file
#   SRCBOX    setenv var  shell script /bt/ab/util/use-sandbox, called by user
#   machine   shell var   /home/ab/.cshrc, sourced by this process

# not yet done as of 5/5/93:
#  add -D defines
#  add error checking, better diagnositic messages
#  add ext and runtime modes
#  make 3rd arg a &rest which allows arbitrary additional include files
#  add ability to extract include files from the file in which the macro call appears
#  hook into Gnu Emacs

# Platform notes

# Aviion (li) -E option is present
# HP 300 (ce) -E option is present
# HP 800 (usa) -E option is present
# MIPS (th) -E option is present
# NeXT (next) -E option is present
# RS 6000 (lu) -E option is present
# SGI (india) -E option is present
# Solaris (zaire) -E option is present in gcc, C file must end in .c, known to work now
# sun3 (ca) -E option available
# sun4 (and) -E option available, known to work
# Vax (BOLTON) com file cmacroexpand.com written, known to work, slow
# Alpha (SABRE) "should" work with Vax com file cmacroexpand.com

# script begins

# step 1: set up C compiler environment
# step 2: create temporary C file containing the macro 
# step 3: preprocess the temporary C file and strip away all the includes
# step 4: clean up

# step 1 of 4
# set up C compiler environment
# jh, 9/28/93.  Not sure if includefiles for runtime is complete.
switch ($1)
  case runtime: 
    set includefiles = ( runtime.h svargs.h )
    set includedirs = "-I/bt/ab/rtl/c/"
    breaksw
  case ext:     
    echo "Ext C macroexpand not yet implemented"
    exit 1
  case trans:
    set includefiles = ( kernel.h uconfig.h )
    set includedirs = "-I/bt/ab/g2/c/ -I/bt/ab/rtl/c/"
    breaksw
  default:      
    echo "Unknown C macroexpand environment $1"
    exit 1
endsw

if ($machine == "sparcsol") then
 set cc = "gcc"
else
 set cc = "cc"
endif

# step 2 of 4
# create temporary C file containing the macro 
set cfilename = deletable-cmacroexpand.c

echo "/* temporary file generated by cmacroexpand command */" > $cfilename
echo "" >> $cfilename

foreach includefile ( $includefiles )
    echo "#include "'"'"$includefile"'"' >> $cfilename
end

if ($3 != "") then
 echo "#include "'"'"$3.h"'"' >> $cfilename
endif

echo "" >> $cfilename

echo $2 >> $cfilename

# step 3 of 4
# preprocess the temporary C file and strip away all the includes
$cc $includedirs -E $cfilename | awk -f $TOOLSDIR/scripts/cmacroexpand.awk

# step 4 of 4
# clean up
rm $cfilename

# adhere to tradition
exit 0
