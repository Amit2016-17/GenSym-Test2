/* -*- Mode: C++ -*-
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +
 + Filename:      instance.cpp
 +
 + Gensym module: activex/control/src
 +
 + File Summmary: Implementation of CTwAxInstance and DLL registration.
 +
 + Copyright (C) 1986-2017 Gensym Corporation.
 +            All Rights Reserved.
 +
 + Author(s):    jv
 +
 + Description:  This file contains functions for controlling instantiation of
 +               the control
 +               
 + 
 + Key:
 +
 + File Organization:
 +   Section:      INCLUDE FILES 
 +   Section:      DEFINES
 +   Section:      GLOBALS
 +   Section:      FUNCTION GROUP
 +      
 + External Interface:
 +
 + Dependencies:
 +
 + Notes:          This code was mostly generated by the Visual C++ Wizard
 +
 + Modifications:
 +
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 % Section:      INCLUDE FILES
 %
 % Description:  All required include files are referenced here.
 %
 % Notes:
 %
 % Modifications:
 %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
#include "classes-twax.hxx"

#ifdef L_USE_COMCAT
#  include <comcat.h>
#endif // L_USE_COMCAT

#include <objsafe.h>

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 % Section:      DEFINES
 %
 % Description:  Module specific macros defined in this section. 
 %
 % Notes:
 %
 % Modifications:
 %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 % Section:      GLOBALS
 %
 % Description:  Module specific typedefs, variables, & externs defined here
 %
 % Notes:
 %
 % Modifications:
 %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
CTwAxInstance NEAR theApp;

const GUID CDECL BASED_CODE _tlid =
                { 0xf0f0cc75, 0x38f6, 0x443a, { 0x83, 0x9e, 0xfd, 0x43, 0x28, 0x3c, 0x2b, 0x4b } };
const WORD _wVerMajor = TW_AX_CONTROL_MAJOR_VERSION;
const WORD _wVerMinor = TW_AX_CONTROL_MINOR_VERSION;


extern void close_global_streams ();

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 % Section:      FUNCTION GROUP - Logging utilities
 %
 % Description:
 %   These functions provide some rudimentary way to communicate with the user.
 %   
 % Notes:
 %
 % Modifications:
 %   usage: Modifications in this header should be restricted to mentioning
 %      the addition or deletion of functions within this section. Actual
 %      function changes should be commented in the specific function's
 %      header.
 %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
#ifdef L_USE_COMCAT
// Helper function to create a component category and associated description
HRESULT CreateComponentCategory(CATID catid, WCHAR* catDescription)
{
    dprintf(DUMP, "instance CreateComponentCategory method call");
    ICatRegister* pcr = NULL ;
    HRESULT hr = S_OK ;

    hr = CoCreateInstance(CLSID_StdComponentCategoriesMgr, 
			NULL, CLSCTX_INPROC_SERVER, IID_ICatRegister, (void**)&pcr);
	if (FAILED(hr))
		return hr;

    // Make sure the HKCR\Component Categories\{..catid...}
    // key is registered
    CATEGORYINFO catinfo;
    catinfo.catid = catid;
    catinfo.lcid = 0x0409 ; // english

	// Make sure the provided description is not too long.
	// Only copy the first 127 characters if it is
	int len = wcslen(catDescription);
	if (len>127)
		len = 127;
    wcsncpy(catinfo.szDescription, catDescription, len);
	// Make sure the description is null terminated
	catinfo.szDescription[len] = '\0';

    hr = pcr->RegisterCategories(1, &catinfo);
	pcr->Release();

	return hr;
}

// Helper function to register a CLSID as belonging to a component category
HRESULT RegisterCLSIDInCategory(REFCLSID clsid, CATID catid)
{
    dprintf(DUMP, "instance RegisterCLSIDInCategory method call");
// Register your component categories information.
    ICatRegister* pcr = NULL ;
    HRESULT hr = S_OK ;
    hr = CoCreateInstance(CLSID_StdComponentCategoriesMgr, 
			NULL, CLSCTX_INPROC_SERVER, IID_ICatRegister, (void**)&pcr);
    if (SUCCEEDED(hr))
    {
       // Register this category as being "implemented" by
       // the class.
       CATID rgcatid[1] ;
       rgcatid[0] = catid;
       hr = pcr->RegisterClassImplCategories(clsid, 1, rgcatid);
    }

    if (pcr != NULL)
        pcr->Release();
  
	return hr;
}

// Helper function to unregister a CLSID as belonging to a component category
HRESULT UnRegisterCLSIDInCategory(REFCLSID clsid, CATID catid)
{
    dprintf(DUMP, "instance UnRegisterCLSIDInCategory method call");
    ICatRegister* pcr = NULL ;
    HRESULT hr = S_OK ;
    hr = CoCreateInstance(CLSID_StdComponentCategoriesMgr, 
			NULL, CLSCTX_INPROC_SERVER, IID_ICatRegister, (void**)&pcr);
    if (SUCCEEDED(hr))
    {
       // Unregister this category as being "implemented" by
       // the class.
       CATID rgcatid[1] ;
       rgcatid[0] = catid;
       hr = pcr->UnRegisterClassImplCategories(clsid, 1, rgcatid);
    }

    if (pcr != NULL)
        pcr->Release();
  
	return hr;
}
#endif // L_USE_COMCAT


////////////////////////////////////////////////////////////////////////////
// CTwAxInstance::InitInstance - DLL initialization

BOOL CTwAxInstance::InitInstance ()
{
  BOOL bInit = COleControlModule::InitInstance();

  if (bInit) {
    // TODO: Add more of your own module initialization code here.
    dprintf(DUMP, "instance InitInstance method call");
  }

  return bInit;
}


////////////////////////////////////////////////////////////////////////////
// CTwAxInstance::ExitInstance - DLL termination

int CTwAxInstance::ExitInstance ()
{
  dprintf(DUMP, "instance ExitInstance method call");
  // TODO: Add more of your own module termination code here.
  close_global_streams();
  return COleControlModule::ExitInstance();
}


/////////////////////////////////////////////////////////////////////////////
// DllRegisterServer - Adds entries to the system registry

STDAPI DllRegisterServer (void)
{
  HRESULT hr = NOERROR;
  AFX_MANAGE_STATE(_afxModuleAddrThis);

  dprintf(DUMP, "instance DllRegisterServer method call");
  if (!AfxOleRegisterTypeLib(AfxGetInstanceHandle(), _tlid))
    return ResultFromScode(SELFREG_E_TYPELIB);

  if (!COleObjectFactoryEx::UpdateRegistryAll(TRUE))
    return ResultFromScode(SELFREG_E_CLASS);

  hr = CreateComponentCategory(CATID_SafeForScripting,
                               L"Controls that are safely scriptable");
  if (FAILED(hr)) {
    OutputDebugString(TEXT("Failed to create component category (scriptable)!\n"));
  }

  hr = CreateComponentCategory(CATID_SafeForInitializing,
                               L"Controls safely initializable from persistent data");
  if (FAILED (hr)) {
    OutputDebugString(TEXT("Failed to create component category (persistence)!\n"));
  }

  hr = RegisterCLSIDInCategory(CTelewindowsCtrl::guid, CATID_SafeForScripting);
  if (FAILED(hr)) {
    OutputDebugString(TEXT("Failed to register control as safe for scripting!\n"));
  }

  hr = RegisterCLSIDInCategory(CTelewindowsCtrl::guid, CATID_SafeForInitializing);
  if (FAILED(hr)) {
    OutputDebugString(TEXT("Failed to register control as safe for initializing!\n"));
  }

  return hr;
}


/////////////////////////////////////////////////////////////////////////////
// DllUnregisterServer - Removes entries from the system registry

STDAPI DllUnregisterServer (void)
{
  AFX_MANAGE_STATE(_afxModuleAddrThis);

  dprintf(DUMP, "instance DllUnregisterServer method call");
  if (!AfxOleUnregisterTypeLib(_tlid, _wVerMajor, _wVerMinor))
    return ResultFromScode(SELFREG_E_TYPELIB);

  if (!COleObjectFactoryEx::UpdateRegistryAll(FALSE))
    return ResultFromScode(SELFREG_E_CLASS);

  // This removes the Implemented Categories from the control's registration.
  // Only need to unregister them if registered above.
  // WARNING: Unregister the control before removing the L_USE_COMCAT definition.
  HRESULT hr = NOERROR;
  hr = UnRegisterCLSIDInCategory(CTelewindowsCtrl::guid, CATID_SafeForScripting);
  hr = UnRegisterCLSIDInCategory(CTelewindowsCtrl::guid, CATID_SafeForInitializing);

  if (hr == 0x80070002) {
    // This is a file not found error.  I'm not sure what file it's looking for.
    // In any case, the unregister seems to go fine, so I want it to say it
    // succeeded; therefore, return NOERROR.
    return NOERROR;
  }

  return hr;
}

/* This is an available place to make note of the settings to use to debug TWAX.
   I got sick and tired of typing these values.  Maybe now I can just cut and
   paste if I need to enter them again.

     C:\Program Files\Microsoft Visual Studio\VB98\VB6.EXE
     C:\cygwin\bt\jv\src\activex\control\examples
     /runexit twproj

     C:\cygwin\bt\jv\src\activex\G2Com\demos\VBDemo
     /runexit WorkspaceViewDemo
     /runexit GensymAxDemo

     C:\Program Files\Microsoft Visual Studio\Common\Tools\TSTCON32.EXE
     C:\cygwin\bt\jv\src\activex\control\examples
     tw.tcs
 */
