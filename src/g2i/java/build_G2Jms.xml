<?xml version="1.0"?>

<!-- Build file for the project G2jms -->
<project name="G2jms" default="all" basedir=".">
	
	<!-- Property file to read various properties -->
	
	<property file="${basedir}/res/build_G2Jms.properties"/>
	<property file="${basedir}/res/threshold_G2Jms.properties"/>
     <property name="debug" value="on"/> 
	
	<path id="compile.classpath">
		<pathelement location="${basedir}/lib/j2ee.jar" />
	</path>

	<path id="testcompile.classpath">
		<pathelement location="${basedir}/lib/junit.jar" />
		<pathelement location="${classes}" /> 
	</path>

	<path id="classes.classpath">
		<pathelement location="${classes}" />
	</path>

	<path id="test.classes.classpath">
		<pathelement location="${test_classes}" />
	</path>

	<path id="emma.lib">
		<pathelement location="${emma.dir}/emma.jar"/>
		<pathelement location="${emma.dir}/emma_ant.jar"/>
	</path> 

  <!-- Set the test classpath -->
	<path id="test.classpath">
		<path refid="compile.classpath"/>
		<path refid="emma.lib"/>
        <path refid="testcompile.classpath"/>
		<pathelement location="${classes}"/>
	</path>

	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />
		
	<target name="all" depends="clean,compile"/>

	<!-- target to clean the build directories -->
	<target name="clean">
		<delete dir="${checkstyle.report.dir}" /> 
		<delete dir="${findbugs.out.dir}" />
		<delete dir="${coverage.dir}/classes"/>
		<delete dir="${basedir}/build"/>
	 </target>
	<!-- target to compile the G2jms source code -->
	<target name="compile">
		<delete dir="${classes}"/>
		<mkdir dir="${classes}"/>
		<javac srcdir="${java.src.dir}" destdir="${classes}" classpathref="compile.classpath" includes="**/*.java" debug="${debug}"/>
	</target>

	<!-- target to compile the G2jms Test source code -->
	<target name="testcompile" depends="compile">
		<delete dir="${test_classes}"/> 
		<mkdir dir="${test_classes}"/>
		<javac srcdir="${java.testsrc.dir}" destdir="${test_classes}" classpathref="testcompile.classpath" includes="**/*.java" />
	</target>

	<!-- jar classes, except convenience classes -->
	<target name="jarclasses"  depends="compile,testcompile">
		<delete dir="${bin}"/>
		<mkdir dir="${bin}"/>
		<jar jarfile="${bin}/jms.jar" basedir="${classes}"  includes="**/*.java"/>
		<jar jarfile="${bin}/testjms.jar" basedir="${test_classes}"  includes="**/*.java"/>
	</target>

	<!-- target to run checkstyle and fails if there is any error  -->
	<target name="check-style" description="Prepare the Checkstyle report">
		<taskdef resource="checkstyletask.properties"> 
			<classpath>
				<path location="${lib.dir}/checkstyle-all-4.2.jar"/>
			</classpath>
		</taskdef> 	   
		<mkdir dir="${checkstyle.report.dir}" description="Be sure that Check style report folder exists"/>
		<checkstyle maxerrors="${checkstyle.error.threshold}"
		            failOnViolation="true"
                    failureProperty="checkstyle.fail"
                    config="${checkstyle.config}"
                   description="Run the Checkstyle">
			<fileset dir="${java.src.dir}" includes="**/*.java" /> 
			<formatter type="xml" toFile="${checkstyle.report.dir}/checkstyle.xml"/>
		</checkstyle>
		<style basedir="${checkstyle.report.dir}"
               destdir="${checkstyle.report.dir}"
               includes="checkstyle.xml"
               style="${checkstyle.report.xsl}">
            <param name="output.dir" expression="${checkstyle.report.dir}"/>
		</style>
	</target>

	<!--  target to initialize findbugs -->
	<target name="findbugs-init" >
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"> 
			<classpath>
               <path location ="${basedir}/lib/findbugs/lib/findbugs.jar"/>
               <path location ="${basedir}/lib/findbugs/lib/findbugs-ant.jar"/>
               <path location ="${basedir}/lib/findbugs/lib/bcel.jar"/>
            </classpath> 
		</taskdef>
	</target>

	<!--  target to run findbugs -->
	<target name="check-findbugs" depends="findbugs-init,jarclasses" > 
		<mkdir dir="${findbugs.out.dir}" />
		<findbugs home="${findbugs.home}" output="xml"
              		outputFile="${findbugs.out.dir}/bcel-fb.xml" jvmargs="-Xmx1024M" >
             		<class location="${bin}/jms.jar" />  
      	</findbugs>
	</target>  

	<!-- Emma target -->
	<target name="emma">
		<echo message="Enabling emma"/>
		<property name="emma.enabled" value="true" />
	</target>

	<!--target to test emma coverage --> 
   	<target name="test" depends="compile">
		<mkdir dir="${coverage.dir}/classes"/>
		<emma enabled="${emma.enabled}" >
			<instr destdir="${instr.classes.dir}" metadatafile="${coverage.dir}/metadata.emma" merge="false">
				<instrpath>
					<pathelement location="${classes}"/>
				</instrpath>
			</instr>
		</emma>
		<junit printsummary="yes" fork="yes" maxmemory="512000000">
			<classpath>
				<pathelement location="${instr.classes.dir}"/>
				<path refid="test.classpath"/>
				<pathelement location="${test_classes}"/>
			</classpath>
			<formatter usefile="yes" type="plain"/>
			<test name="com.gensym.testjms.SampleTestCase" outfile="test_results">
				<formatter usefile="yes" type="plain"/>
			</test>
			<jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma"/>
			<jvmarg value="-Demma.coverage.out.merge=true"/>
			<jvmarg value="-Dorg.xml.sax.driver=org.apache.xerces.parsers.SAXParser"/>
		</junit>
		<emma enabled="${emma.enabled}" >
			<report sourcepath="${java.src.dir}" >
	            <fileset dir="${coverage.dir}" >
	   	        	<include name="*.emma" />
	       	    </fileset>
	           	<html outfile="${coverage.dir}/coverage.html" />
				<xml outfile="${coverage.dir}/coverage.xml" />
		    </report>
		</emma>
	</target>

	<!-- target to check the coverage -->
	<target name="check-coverage"  depends="compile,testcompile,emma,test" description="Run the Test Cases, generate the Emma Report and 
		Check-in the source if it is modified"> 
        <path id="bmplugin.classpath">
 			<pathelement location="${lib.dir}/bm_plugin.jar"/> 
		</path>		
        <taskdef name="ecct" classname="com.trilogy.buildmgmt.emma.EmmaCheckCoverageTask" classpathref="bmplugin.classpath"/>	
		<ecct emmaReportXmlFile="${coverage.dir}/coverage.xml" failOnError="true" moduleName="G2jms">
			<checkcoverage  ctClass="${CLASS_THRESHOLD}" ctMethod="${METHOD_THRESHOLD}" ctBlock="${BLOCK_THRESHOLD}" ctLine="${LINE_THRESHOLD}" ignoreBlock="false" thresholdFile="${basedir}/res/threshold.properties"/>
		</ecct> 
	</target>
  
</project>