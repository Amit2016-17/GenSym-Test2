//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WebScorDSL {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSLSession : DataSet {
        
        private TSessionsDataTable tableTSessions;
        
        public DSLSession() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSLSession(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TSessions"] != null)) {
                    this.Tables.Add(new TSessionsDataTable(ds.Tables["TSessions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TSessionsDataTable TSessions {
            get {
                return this.tableTSessions;
            }
        }
        
        public override DataSet Clone() {
            DSLSession cln = ((DSLSession)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TSessions"] != null)) {
                this.Tables.Add(new TSessionsDataTable(ds.Tables["TSessions"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTSessions = ((TSessionsDataTable)(this.Tables["TSessions"]));
            if ((this.tableTSessions != null)) {
                this.tableTSessions.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSLSession";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSLSession.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTSessions = new TSessionsDataTable();
            this.Tables.Add(this.tableTSessions);
        }
        
        private bool ShouldSerializeTSessions() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TSessionsRowChangeEventHandler(object sender, TSessionsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSessionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuserId;
            
            private DataColumn columnsessionGuid;
            
            private DataColumn columnloginDate;
            
            private DataColumn columnserverId;
            
            private DataColumn columnserverPortNo;
            
            internal TSessionsDataTable() : 
                    base("TSessions") {
                this.InitClass();
            }
            
            internal TSessionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn userIdColumn {
                get {
                    return this.columnuserId;
                }
            }
            
            internal DataColumn sessionGuidColumn {
                get {
                    return this.columnsessionGuid;
                }
            }
            
            internal DataColumn loginDateColumn {
                get {
                    return this.columnloginDate;
                }
            }
            
            internal DataColumn serverIdColumn {
                get {
                    return this.columnserverId;
                }
            }
            
            internal DataColumn serverPortNoColumn {
                get {
                    return this.columnserverPortNo;
                }
            }
            
            public TSessionsRow this[int index] {
                get {
                    return ((TSessionsRow)(this.Rows[index]));
                }
            }
            
            public event TSessionsRowChangeEventHandler TSessionsRowChanged;
            
            public event TSessionsRowChangeEventHandler TSessionsRowChanging;
            
            public event TSessionsRowChangeEventHandler TSessionsRowDeleted;
            
            public event TSessionsRowChangeEventHandler TSessionsRowDeleting;
            
            public void AddTSessionsRow(TSessionsRow row) {
                this.Rows.Add(row);
            }
            
            public TSessionsRow AddTSessionsRow(int userId, System.Guid sessionGuid, System.DateTime loginDate, int serverId, int serverPortNo) {
                TSessionsRow rowTSessionsRow = ((TSessionsRow)(this.NewRow()));
                rowTSessionsRow.ItemArray = new object[] {
                        userId,
                        sessionGuid,
                        loginDate,
                        serverId,
                        serverPortNo};
                this.Rows.Add(rowTSessionsRow);
                return rowTSessionsRow;
            }
            
            public TSessionsRow FindByuserId(int userId) {
                return ((TSessionsRow)(this.Rows.Find(new object[] {
                            userId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TSessionsDataTable cln = ((TSessionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TSessionsDataTable();
            }
            
            internal void InitVars() {
                this.columnuserId = this.Columns["userId"];
                this.columnsessionGuid = this.Columns["sessionGuid"];
                this.columnloginDate = this.Columns["loginDate"];
                this.columnserverId = this.Columns["serverId"];
                this.columnserverPortNo = this.Columns["serverPortNo"];
            }
            
            private void InitClass() {
                this.columnuserId = new DataColumn("userId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuserId);
                this.columnsessionGuid = new DataColumn("sessionGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsessionGuid);
                this.columnloginDate = new DataColumn("loginDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnloginDate);
                this.columnserverId = new DataColumn("serverId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnserverId);
                this.columnserverPortNo = new DataColumn("serverPortNo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnserverPortNo);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnuserId}, true));
                this.columnuserId.AllowDBNull = false;
                this.columnuserId.Unique = true;
                this.columnsessionGuid.AllowDBNull = false;
                this.columnloginDate.AllowDBNull = false;
            }
            
            public TSessionsRow NewTSessionsRow() {
                return ((TSessionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TSessionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TSessionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TSessionsRowChanged != null)) {
                    this.TSessionsRowChanged(this, new TSessionsRowChangeEvent(((TSessionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TSessionsRowChanging != null)) {
                    this.TSessionsRowChanging(this, new TSessionsRowChangeEvent(((TSessionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TSessionsRowDeleted != null)) {
                    this.TSessionsRowDeleted(this, new TSessionsRowChangeEvent(((TSessionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TSessionsRowDeleting != null)) {
                    this.TSessionsRowDeleting(this, new TSessionsRowChangeEvent(((TSessionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTSessionsRow(TSessionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSessionsRow : DataRow {
            
            private TSessionsDataTable tableTSessions;
            
            internal TSessionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTSessions = ((TSessionsDataTable)(this.Table));
            }
            
            public int userId {
                get {
                    return ((int)(this[this.tableTSessions.userIdColumn]));
                }
                set {
                    this[this.tableTSessions.userIdColumn] = value;
                }
            }
            
            public System.Guid sessionGuid {
                get {
                    return ((System.Guid)(this[this.tableTSessions.sessionGuidColumn]));
                }
                set {
                    this[this.tableTSessions.sessionGuidColumn] = value;
                }
            }
            
            public System.DateTime loginDate {
                get {
                    return ((System.DateTime)(this[this.tableTSessions.loginDateColumn]));
                }
                set {
                    this[this.tableTSessions.loginDateColumn] = value;
                }
            }
            
            public int serverId {
                get {
                    try {
                        return ((int)(this[this.tableTSessions.serverIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTSessions.serverIdColumn] = value;
                }
            }
            
            public int serverPortNo {
                get {
                    try {
                        return ((int)(this[this.tableTSessions.serverPortNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTSessions.serverPortNoColumn] = value;
                }
            }
            
            public bool IsserverIdNull() {
                return this.IsNull(this.tableTSessions.serverIdColumn);
            }
            
            public void SetserverIdNull() {
                this[this.tableTSessions.serverIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsserverPortNoNull() {
                return this.IsNull(this.tableTSessions.serverPortNoColumn);
            }
            
            public void SetserverPortNoNull() {
                this[this.tableTSessions.serverPortNoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TSessionsRowChangeEvent : EventArgs {
            
            private TSessionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TSessionsRowChangeEvent(TSessionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TSessionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
