//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WebScorDSL {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSLCompany : DataSet {
        
        private TCompaniesDataTable tableTCompanies;
        
        public DSLCompany() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSLCompany(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TCompanies"] != null)) {
                    this.Tables.Add(new TCompaniesDataTable(ds.Tables["TCompanies"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCompaniesDataTable TCompanies {
            get {
                return this.tableTCompanies;
            }
        }
        
        public override DataSet Clone() {
            DSLCompany cln = ((DSLCompany)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TCompanies"] != null)) {
                this.Tables.Add(new TCompaniesDataTable(ds.Tables["TCompanies"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTCompanies = ((TCompaniesDataTable)(this.Tables["TCompanies"]));
            if ((this.tableTCompanies != null)) {
                this.tableTCompanies.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSLCompany";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSLCompany.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTCompanies = new TCompaniesDataTable();
            this.Tables.Add(this.tableTCompanies);
        }
        
        private bool ShouldSerializeTCompanies() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TCompaniesRowChangeEventHandler(object sender, TCompaniesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TCompaniesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncoId;
            
            private DataColumn columncoName;
            
            private DataColumn columncoStreet;
            
            private DataColumn columncoStreet2;
            
            private DataColumn columncoCity;
            
            private DataColumn columncoState;
            
            private DataColumn columncoZip;
            
            private DataColumn columnnumLicenses;
            
            private DataColumn columnnumConcurrentSessions;
            
            private DataColumn columnnumCollaborators;
            
            private DataColumn columninactive;
            
            private DataColumn columnrootDirName;
            
            private DataColumn columnlogFileName;
            
            private DataColumn columnokFileName;
            
            internal TCompaniesDataTable() : 
                    base("TCompanies") {
                this.InitClass();
            }
            
            internal TCompaniesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn coIdColumn {
                get {
                    return this.columncoId;
                }
            }
            
            internal DataColumn coNameColumn {
                get {
                    return this.columncoName;
                }
            }
            
            internal DataColumn coStreetColumn {
                get {
                    return this.columncoStreet;
                }
            }
            
            internal DataColumn coStreet2Column {
                get {
                    return this.columncoStreet2;
                }
            }
            
            internal DataColumn coCityColumn {
                get {
                    return this.columncoCity;
                }
            }
            
            internal DataColumn coStateColumn {
                get {
                    return this.columncoState;
                }
            }
            
            internal DataColumn coZipColumn {
                get {
                    return this.columncoZip;
                }
            }
            
            internal DataColumn numLicensesColumn {
                get {
                    return this.columnnumLicenses;
                }
            }
            
            internal DataColumn numConcurrentSessionsColumn {
                get {
                    return this.columnnumConcurrentSessions;
                }
            }
            
            internal DataColumn numCollaboratorsColumn {
                get {
                    return this.columnnumCollaborators;
                }
            }
            
            internal DataColumn inactiveColumn {
                get {
                    return this.columninactive;
                }
            }
            
            internal DataColumn rootDirNameColumn {
                get {
                    return this.columnrootDirName;
                }
            }
            
            internal DataColumn logFileNameColumn {
                get {
                    return this.columnlogFileName;
                }
            }
            
            internal DataColumn okFileNameColumn {
                get {
                    return this.columnokFileName;
                }
            }
            
            public TCompaniesRow this[int index] {
                get {
                    return ((TCompaniesRow)(this.Rows[index]));
                }
            }
            
            public event TCompaniesRowChangeEventHandler TCompaniesRowChanged;
            
            public event TCompaniesRowChangeEventHandler TCompaniesRowChanging;
            
            public event TCompaniesRowChangeEventHandler TCompaniesRowDeleted;
            
            public event TCompaniesRowChangeEventHandler TCompaniesRowDeleting;
            
            public void AddTCompaniesRow(TCompaniesRow row) {
                this.Rows.Add(row);
            }
            
            public TCompaniesRow AddTCompaniesRow(string coName, string coStreet, string coStreet2, string coCity, string coState, string coZip, short numLicenses, short numConcurrentSessions, short numCollaborators, bool inactive, string rootDirName, string logFileName, string okFileName) {
                TCompaniesRow rowTCompaniesRow = ((TCompaniesRow)(this.NewRow()));
                rowTCompaniesRow.ItemArray = new object[] {
                        null,
                        coName,
                        coStreet,
                        coStreet2,
                        coCity,
                        coState,
                        coZip,
                        numLicenses,
                        numConcurrentSessions,
                        numCollaborators,
                        inactive,
                        rootDirName,
                        logFileName,
                        okFileName};
                this.Rows.Add(rowTCompaniesRow);
                return rowTCompaniesRow;
            }
            
            public TCompaniesRow FindBycoId(int coId) {
                return ((TCompaniesRow)(this.Rows.Find(new object[] {
                            coId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TCompaniesDataTable cln = ((TCompaniesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TCompaniesDataTable();
            }
            
            internal void InitVars() {
                this.columncoId = this.Columns["coId"];
                this.columncoName = this.Columns["coName"];
                this.columncoStreet = this.Columns["coStreet"];
                this.columncoStreet2 = this.Columns["coStreet2"];
                this.columncoCity = this.Columns["coCity"];
                this.columncoState = this.Columns["coState"];
                this.columncoZip = this.Columns["coZip"];
                this.columnnumLicenses = this.Columns["numLicenses"];
                this.columnnumConcurrentSessions = this.Columns["numConcurrentSessions"];
                this.columnnumCollaborators = this.Columns["numCollaborators"];
                this.columninactive = this.Columns["inactive"];
                this.columnrootDirName = this.Columns["rootDirName"];
                this.columnlogFileName = this.Columns["logFileName"];
                this.columnokFileName = this.Columns["okFileName"];
            }
            
            private void InitClass() {
                this.columncoId = new DataColumn("coId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoId);
                this.columncoName = new DataColumn("coName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoName);
                this.columncoStreet = new DataColumn("coStreet", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoStreet);
                this.columncoStreet2 = new DataColumn("coStreet2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoStreet2);
                this.columncoCity = new DataColumn("coCity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoCity);
                this.columncoState = new DataColumn("coState", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoState);
                this.columncoZip = new DataColumn("coZip", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoZip);
                this.columnnumLicenses = new DataColumn("numLicenses", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumLicenses);
                this.columnnumConcurrentSessions = new DataColumn("numConcurrentSessions", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumConcurrentSessions);
                this.columnnumCollaborators = new DataColumn("numCollaborators", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumCollaborators);
                this.columninactive = new DataColumn("inactive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninactive);
                this.columnrootDirName = new DataColumn("rootDirName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrootDirName);
                this.columnlogFileName = new DataColumn("logFileName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlogFileName);
                this.columnokFileName = new DataColumn("okFileName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnokFileName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columncoId}, true));
                this.columncoId.AutoIncrement = true;
                this.columncoId.AllowDBNull = false;
                this.columncoId.ReadOnly = true;
                this.columncoId.Unique = true;
                this.columncoName.AllowDBNull = false;
                this.columnnumLicenses.AllowDBNull = false;
                this.columnnumConcurrentSessions.AllowDBNull = false;
                this.columnnumCollaborators.AllowDBNull = false;
                this.columninactive.AllowDBNull = false;
                this.columnrootDirName.AllowDBNull = false;
                this.columnlogFileName.AllowDBNull = false;
                this.columnokFileName.AllowDBNull = false;
            }
            
            public TCompaniesRow NewTCompaniesRow() {
                return ((TCompaniesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TCompaniesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TCompaniesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCompaniesRowChanged != null)) {
                    this.TCompaniesRowChanged(this, new TCompaniesRowChangeEvent(((TCompaniesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCompaniesRowChanging != null)) {
                    this.TCompaniesRowChanging(this, new TCompaniesRowChangeEvent(((TCompaniesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCompaniesRowDeleted != null)) {
                    this.TCompaniesRowDeleted(this, new TCompaniesRowChangeEvent(((TCompaniesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCompaniesRowDeleting != null)) {
                    this.TCompaniesRowDeleting(this, new TCompaniesRowChangeEvent(((TCompaniesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTCompaniesRow(TCompaniesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TCompaniesRow : DataRow {
            
            private TCompaniesDataTable tableTCompanies;
            
            internal TCompaniesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCompanies = ((TCompaniesDataTable)(this.Table));
            }
            
            public int coId {
                get {
                    return ((int)(this[this.tableTCompanies.coIdColumn]));
                }
                set {
                    this[this.tableTCompanies.coIdColumn] = value;
                }
            }
            
            public string coName {
                get {
                    return ((string)(this[this.tableTCompanies.coNameColumn]));
                }
                set {
                    this[this.tableTCompanies.coNameColumn] = value;
                }
            }
            
            public string coStreet {
                get {
                    try {
                        return ((string)(this[this.tableTCompanies.coStreetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCompanies.coStreetColumn] = value;
                }
            }
            
            public string coStreet2 {
                get {
                    try {
                        return ((string)(this[this.tableTCompanies.coStreet2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCompanies.coStreet2Column] = value;
                }
            }
            
            public string coCity {
                get {
                    try {
                        return ((string)(this[this.tableTCompanies.coCityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCompanies.coCityColumn] = value;
                }
            }
            
            public string coState {
                get {
                    try {
                        return ((string)(this[this.tableTCompanies.coStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCompanies.coStateColumn] = value;
                }
            }
            
            public string coZip {
                get {
                    try {
                        return ((string)(this[this.tableTCompanies.coZipColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCompanies.coZipColumn] = value;
                }
            }
            
            public short numLicenses {
                get {
                    return ((short)(this[this.tableTCompanies.numLicensesColumn]));
                }
                set {
                    this[this.tableTCompanies.numLicensesColumn] = value;
                }
            }
            
            public short numConcurrentSessions {
                get {
                    return ((short)(this[this.tableTCompanies.numConcurrentSessionsColumn]));
                }
                set {
                    this[this.tableTCompanies.numConcurrentSessionsColumn] = value;
                }
            }
            
            public short numCollaborators {
                get {
                    return ((short)(this[this.tableTCompanies.numCollaboratorsColumn]));
                }
                set {
                    this[this.tableTCompanies.numCollaboratorsColumn] = value;
                }
            }
            
            public bool inactive {
                get {
                    return ((bool)(this[this.tableTCompanies.inactiveColumn]));
                }
                set {
                    this[this.tableTCompanies.inactiveColumn] = value;
                }
            }
            
            public string rootDirName {
                get {
                    return ((string)(this[this.tableTCompanies.rootDirNameColumn]));
                }
                set {
                    this[this.tableTCompanies.rootDirNameColumn] = value;
                }
            }
            
            public string logFileName {
                get {
                    return ((string)(this[this.tableTCompanies.logFileNameColumn]));
                }
                set {
                    this[this.tableTCompanies.logFileNameColumn] = value;
                }
            }
            
            public string okFileName {
                get {
                    return ((string)(this[this.tableTCompanies.okFileNameColumn]));
                }
                set {
                    this[this.tableTCompanies.okFileNameColumn] = value;
                }
            }
            
            public bool IscoStreetNull() {
                return this.IsNull(this.tableTCompanies.coStreetColumn);
            }
            
            public void SetcoStreetNull() {
                this[this.tableTCompanies.coStreetColumn] = System.Convert.DBNull;
            }
            
            public bool IscoStreet2Null() {
                return this.IsNull(this.tableTCompanies.coStreet2Column);
            }
            
            public void SetcoStreet2Null() {
                this[this.tableTCompanies.coStreet2Column] = System.Convert.DBNull;
            }
            
            public bool IscoCityNull() {
                return this.IsNull(this.tableTCompanies.coCityColumn);
            }
            
            public void SetcoCityNull() {
                this[this.tableTCompanies.coCityColumn] = System.Convert.DBNull;
            }
            
            public bool IscoStateNull() {
                return this.IsNull(this.tableTCompanies.coStateColumn);
            }
            
            public void SetcoStateNull() {
                this[this.tableTCompanies.coStateColumn] = System.Convert.DBNull;
            }
            
            public bool IscoZipNull() {
                return this.IsNull(this.tableTCompanies.coZipColumn);
            }
            
            public void SetcoZipNull() {
                this[this.tableTCompanies.coZipColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TCompaniesRowChangeEvent : EventArgs {
            
            private TCompaniesRow eventRow;
            
            private DataRowAction eventAction;
            
            public TCompaniesRowChangeEvent(TCompaniesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TCompaniesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
