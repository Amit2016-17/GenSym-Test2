//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WebScorDSL {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSLCompanyServer : DataSet {
        
        private TCompanyServersDataTable tableTCompanyServers;
        
        public DSLCompanyServer() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSLCompanyServer(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TCompanyServers"] != null)) {
                    this.Tables.Add(new TCompanyServersDataTable(ds.Tables["TCompanyServers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCompanyServersDataTable TCompanyServers {
            get {
                return this.tableTCompanyServers;
            }
        }
        
        public override DataSet Clone() {
            DSLCompanyServer cln = ((DSLCompanyServer)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TCompanyServers"] != null)) {
                this.Tables.Add(new TCompanyServersDataTable(ds.Tables["TCompanyServers"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTCompanyServers = ((TCompanyServersDataTable)(this.Tables["TCompanyServers"]));
            if ((this.tableTCompanyServers != null)) {
                this.tableTCompanyServers.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSLCompanyServer";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSLCompanyServer.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTCompanyServers = new TCompanyServersDataTable();
            this.Tables.Add(this.tableTCompanyServers);
        }
        
        private bool ShouldSerializeTCompanyServers() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TCompanyServersRowChangeEventHandler(object sender, TCompanyServersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TCompanyServersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnserverId;
            
            private DataColumn columnserverName;
            
            private DataColumn columnipAddress;
            
            private DataColumn columnminPort;
            
            private DataColumn columnmaxPort;
            
            private DataColumn columninactive;
            
            private DataColumn columncoServerId;
            
            private DataColumn columncoId;
            
            private DataColumn columnportNo;
            
            private DataColumn columninUse;
            
            private DataColumn columnisRunning;
            
            internal TCompanyServersDataTable() : 
                    base("TCompanyServers") {
                this.InitClass();
            }
            
            internal TCompanyServersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn serverIdColumn {
                get {
                    return this.columnserverId;
                }
            }
            
            internal DataColumn serverNameColumn {
                get {
                    return this.columnserverName;
                }
            }
            
            internal DataColumn ipAddressColumn {
                get {
                    return this.columnipAddress;
                }
            }
            
            internal DataColumn minPortColumn {
                get {
                    return this.columnminPort;
                }
            }
            
            internal DataColumn maxPortColumn {
                get {
                    return this.columnmaxPort;
                }
            }
            
            internal DataColumn inactiveColumn {
                get {
                    return this.columninactive;
                }
            }
            
            internal DataColumn coServerIdColumn {
                get {
                    return this.columncoServerId;
                }
            }
            
            internal DataColumn coIdColumn {
                get {
                    return this.columncoId;
                }
            }
            
            internal DataColumn portNoColumn {
                get {
                    return this.columnportNo;
                }
            }
            
            internal DataColumn inUseColumn {
                get {
                    return this.columninUse;
                }
            }
            
            internal DataColumn isRunningColumn {
                get {
                    return this.columnisRunning;
                }
            }
            
            public TCompanyServersRow this[int index] {
                get {
                    return ((TCompanyServersRow)(this.Rows[index]));
                }
            }
            
            public event TCompanyServersRowChangeEventHandler TCompanyServersRowChanged;
            
            public event TCompanyServersRowChangeEventHandler TCompanyServersRowChanging;
            
            public event TCompanyServersRowChangeEventHandler TCompanyServersRowDeleted;
            
            public event TCompanyServersRowChangeEventHandler TCompanyServersRowDeleting;
            
            public void AddTCompanyServersRow(TCompanyServersRow row) {
                this.Rows.Add(row);
            }
            
            public TCompanyServersRow AddTCompanyServersRow(int serverId, string serverName, string ipAddress, int minPort, int maxPort, bool inactive, int coId, int portNo, bool inUse, bool isRunning) {
                TCompanyServersRow rowTCompanyServersRow = ((TCompanyServersRow)(this.NewRow()));
                rowTCompanyServersRow.ItemArray = new object[] {
                        serverId,
                        serverName,
                        ipAddress,
                        minPort,
                        maxPort,
                        inactive,
                        null,
                        coId,
                        portNo,
                        inUse,
                        isRunning};
                this.Rows.Add(rowTCompanyServersRow);
                return rowTCompanyServersRow;
            }
            
            public TCompanyServersRow FindBycoServerId(int coServerId) {
                return ((TCompanyServersRow)(this.Rows.Find(new object[] {
                            coServerId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TCompanyServersDataTable cln = ((TCompanyServersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TCompanyServersDataTable();
            }
            
            internal void InitVars() {
                this.columnserverId = this.Columns["serverId"];
                this.columnserverName = this.Columns["serverName"];
                this.columnipAddress = this.Columns["ipAddress"];
                this.columnminPort = this.Columns["minPort"];
                this.columnmaxPort = this.Columns["maxPort"];
                this.columninactive = this.Columns["inactive"];
                this.columncoServerId = this.Columns["coServerId"];
                this.columncoId = this.Columns["coId"];
                this.columnportNo = this.Columns["portNo"];
                this.columninUse = this.Columns["inUse"];
                this.columnisRunning = this.Columns["isRunning"];
            }
            
            private void InitClass() {
                this.columnserverId = new DataColumn("serverId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnserverId);
                this.columnserverName = new DataColumn("serverName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnserverName);
                this.columnipAddress = new DataColumn("ipAddress", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnipAddress);
                this.columnminPort = new DataColumn("minPort", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnminPort);
                this.columnmaxPort = new DataColumn("maxPort", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaxPort);
                this.columninactive = new DataColumn("inactive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninactive);
                this.columncoServerId = new DataColumn("coServerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoServerId);
                this.columncoId = new DataColumn("coId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoId);
                this.columnportNo = new DataColumn("portNo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnportNo);
                this.columninUse = new DataColumn("inUse", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninUse);
                this.columnisRunning = new DataColumn("isRunning", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisRunning);
                this.Constraints.Add(new UniqueConstraint("DSLCompanyServerKey1", new DataColumn[] {
                                this.columncoServerId}, true));
                this.Constraints.Add(new UniqueConstraint("DSLCompanyServerKey2", new DataColumn[] {
                                this.columncoId,
                                this.columnserverId,
                                this.columnportNo}, false));
                this.columnserverId.AllowDBNull = false;
                this.columnipAddress.AllowDBNull = false;
                this.columnminPort.AllowDBNull = false;
                this.columnmaxPort.AllowDBNull = false;
                this.columninactive.AllowDBNull = false;
                this.columncoServerId.AutoIncrement = true;
                this.columncoServerId.AllowDBNull = false;
                this.columncoServerId.ReadOnly = true;
                this.columncoServerId.Unique = true;
                this.columncoId.AllowDBNull = false;
                this.columnportNo.AllowDBNull = false;
                this.columninUse.AllowDBNull = false;
                this.columninUse.DefaultValue = false;
                this.columnisRunning.AllowDBNull = false;
                this.columnisRunning.DefaultValue = false;
            }
            
            public TCompanyServersRow NewTCompanyServersRow() {
                return ((TCompanyServersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TCompanyServersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TCompanyServersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCompanyServersRowChanged != null)) {
                    this.TCompanyServersRowChanged(this, new TCompanyServersRowChangeEvent(((TCompanyServersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCompanyServersRowChanging != null)) {
                    this.TCompanyServersRowChanging(this, new TCompanyServersRowChangeEvent(((TCompanyServersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCompanyServersRowDeleted != null)) {
                    this.TCompanyServersRowDeleted(this, new TCompanyServersRowChangeEvent(((TCompanyServersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCompanyServersRowDeleting != null)) {
                    this.TCompanyServersRowDeleting(this, new TCompanyServersRowChangeEvent(((TCompanyServersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTCompanyServersRow(TCompanyServersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TCompanyServersRow : DataRow {
            
            private TCompanyServersDataTable tableTCompanyServers;
            
            internal TCompanyServersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCompanyServers = ((TCompanyServersDataTable)(this.Table));
            }
            
            public int serverId {
                get {
                    return ((int)(this[this.tableTCompanyServers.serverIdColumn]));
                }
                set {
                    this[this.tableTCompanyServers.serverIdColumn] = value;
                }
            }
            
            public string serverName {
                get {
                    try {
                        return ((string)(this[this.tableTCompanyServers.serverNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCompanyServers.serverNameColumn] = value;
                }
            }
            
            public string ipAddress {
                get {
                    return ((string)(this[this.tableTCompanyServers.ipAddressColumn]));
                }
                set {
                    this[this.tableTCompanyServers.ipAddressColumn] = value;
                }
            }
            
            public int minPort {
                get {
                    return ((int)(this[this.tableTCompanyServers.minPortColumn]));
                }
                set {
                    this[this.tableTCompanyServers.minPortColumn] = value;
                }
            }
            
            public int maxPort {
                get {
                    return ((int)(this[this.tableTCompanyServers.maxPortColumn]));
                }
                set {
                    this[this.tableTCompanyServers.maxPortColumn] = value;
                }
            }
            
            public bool inactive {
                get {
                    return ((bool)(this[this.tableTCompanyServers.inactiveColumn]));
                }
                set {
                    this[this.tableTCompanyServers.inactiveColumn] = value;
                }
            }
            
            public int coServerId {
                get {
                    return ((int)(this[this.tableTCompanyServers.coServerIdColumn]));
                }
                set {
                    this[this.tableTCompanyServers.coServerIdColumn] = value;
                }
            }
            
            public int coId {
                get {
                    return ((int)(this[this.tableTCompanyServers.coIdColumn]));
                }
                set {
                    this[this.tableTCompanyServers.coIdColumn] = value;
                }
            }
            
            public int portNo {
                get {
                    return ((int)(this[this.tableTCompanyServers.portNoColumn]));
                }
                set {
                    this[this.tableTCompanyServers.portNoColumn] = value;
                }
            }
            
            public bool inUse {
                get {
                    return ((bool)(this[this.tableTCompanyServers.inUseColumn]));
                }
                set {
                    this[this.tableTCompanyServers.inUseColumn] = value;
                }
            }
            
            public bool isRunning {
                get {
                    return ((bool)(this[this.tableTCompanyServers.isRunningColumn]));
                }
                set {
                    this[this.tableTCompanyServers.isRunningColumn] = value;
                }
            }
            
            public bool IsserverNameNull() {
                return this.IsNull(this.tableTCompanyServers.serverNameColumn);
            }
            
            public void SetserverNameNull() {
                this[this.tableTCompanyServers.serverNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TCompanyServersRowChangeEvent : EventArgs {
            
            private TCompanyServersRow eventRow;
            
            private DataRowAction eventAction;
            
            public TCompanyServersRowChangeEvent(TCompanyServersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TCompanyServersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
