//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WebScorBSL {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSResponse : DataSet {
        
        private G2MgrResponseDataTable tableG2MgrResponse;
        
        public DSResponse() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSResponse(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["G2MgrResponse"] != null)) {
                    this.Tables.Add(new G2MgrResponseDataTable(ds.Tables["G2MgrResponse"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public G2MgrResponseDataTable G2MgrResponse {
            get {
                return this.tableG2MgrResponse;
            }
        }
        
        public override DataSet Clone() {
            DSResponse cln = ((DSResponse)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["G2MgrResponse"] != null)) {
                this.Tables.Add(new G2MgrResponseDataTable(ds.Tables["G2MgrResponse"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableG2MgrResponse = ((G2MgrResponseDataTable)(this.Tables["G2MgrResponse"]));
            if ((this.tableG2MgrResponse != null)) {
                this.tableG2MgrResponse.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSResponse";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSResponse.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableG2MgrResponse = new G2MgrResponseDataTable();
            this.Tables.Add(this.tableG2MgrResponse);
        }
        
        private bool ShouldSerializeG2MgrResponse() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void G2MgrResponseRowChangeEventHandler(object sender, G2MgrResponseRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class G2MgrResponseDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnresults;
            
            private DataColumn columnerrorText;
            
            private DataColumn columnerrorCode;
            
            internal G2MgrResponseDataTable() : 
                    base("G2MgrResponse") {
                this.InitClass();
            }
            
            internal G2MgrResponseDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn resultsColumn {
                get {
                    return this.columnresults;
                }
            }
            
            internal DataColumn errorTextColumn {
                get {
                    return this.columnerrorText;
                }
            }
            
            internal DataColumn errorCodeColumn {
                get {
                    return this.columnerrorCode;
                }
            }
            
            public G2MgrResponseRow this[int index] {
                get {
                    return ((G2MgrResponseRow)(this.Rows[index]));
                }
            }
            
            public event G2MgrResponseRowChangeEventHandler G2MgrResponseRowChanged;
            
            public event G2MgrResponseRowChangeEventHandler G2MgrResponseRowChanging;
            
            public event G2MgrResponseRowChangeEventHandler G2MgrResponseRowDeleted;
            
            public event G2MgrResponseRowChangeEventHandler G2MgrResponseRowDeleting;
            
            public void AddG2MgrResponseRow(G2MgrResponseRow row) {
                this.Rows.Add(row);
            }
            
            public G2MgrResponseRow AddG2MgrResponseRow(string results, string errorText, int errorCode) {
                G2MgrResponseRow rowG2MgrResponseRow = ((G2MgrResponseRow)(this.NewRow()));
                rowG2MgrResponseRow.ItemArray = new object[] {
                        results,
                        errorText,
                        errorCode};
                this.Rows.Add(rowG2MgrResponseRow);
                return rowG2MgrResponseRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                G2MgrResponseDataTable cln = ((G2MgrResponseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new G2MgrResponseDataTable();
            }
            
            internal void InitVars() {
                this.columnresults = this.Columns["results"];
                this.columnerrorText = this.Columns["errorText"];
                this.columnerrorCode = this.Columns["errorCode"];
            }
            
            private void InitClass() {
                this.columnresults = new DataColumn("results", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnresults);
                this.columnerrorText = new DataColumn("errorText", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnerrorText);
                this.columnerrorCode = new DataColumn("errorCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnerrorCode);
                this.columnerrorCode.DefaultValue = 0;
            }
            
            public G2MgrResponseRow NewG2MgrResponseRow() {
                return ((G2MgrResponseRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new G2MgrResponseRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(G2MgrResponseRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.G2MgrResponseRowChanged != null)) {
                    this.G2MgrResponseRowChanged(this, new G2MgrResponseRowChangeEvent(((G2MgrResponseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.G2MgrResponseRowChanging != null)) {
                    this.G2MgrResponseRowChanging(this, new G2MgrResponseRowChangeEvent(((G2MgrResponseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.G2MgrResponseRowDeleted != null)) {
                    this.G2MgrResponseRowDeleted(this, new G2MgrResponseRowChangeEvent(((G2MgrResponseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.G2MgrResponseRowDeleting != null)) {
                    this.G2MgrResponseRowDeleting(this, new G2MgrResponseRowChangeEvent(((G2MgrResponseRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveG2MgrResponseRow(G2MgrResponseRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class G2MgrResponseRow : DataRow {
            
            private G2MgrResponseDataTable tableG2MgrResponse;
            
            internal G2MgrResponseRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableG2MgrResponse = ((G2MgrResponseDataTable)(this.Table));
            }
            
            public string results {
                get {
                    try {
                        return ((string)(this[this.tableG2MgrResponse.resultsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableG2MgrResponse.resultsColumn] = value;
                }
            }
            
            public string errorText {
                get {
                    try {
                        return ((string)(this[this.tableG2MgrResponse.errorTextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableG2MgrResponse.errorTextColumn] = value;
                }
            }
            
            public int errorCode {
                get {
                    try {
                        return ((int)(this[this.tableG2MgrResponse.errorCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableG2MgrResponse.errorCodeColumn] = value;
                }
            }
            
            public bool IsresultsNull() {
                return this.IsNull(this.tableG2MgrResponse.resultsColumn);
            }
            
            public void SetresultsNull() {
                this[this.tableG2MgrResponse.resultsColumn] = System.Convert.DBNull;
            }
            
            public bool IserrorTextNull() {
                return this.IsNull(this.tableG2MgrResponse.errorTextColumn);
            }
            
            public void SeterrorTextNull() {
                this[this.tableG2MgrResponse.errorTextColumn] = System.Convert.DBNull;
            }
            
            public bool IserrorCodeNull() {
                return this.IsNull(this.tableG2MgrResponse.errorCodeColumn);
            }
            
            public void SeterrorCodeNull() {
                this[this.tableG2MgrResponse.errorCodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class G2MgrResponseRowChangeEvent : EventArgs {
            
            private G2MgrResponseRow eventRow;
            
            private DataRowAction eventAction;
            
            public G2MgrResponseRowChangeEvent(G2MgrResponseRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public G2MgrResponseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
