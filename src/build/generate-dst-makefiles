#!/bin/sh
#   This script runs the gcc C preprocessor on make-template.c to
#   generate product makefiles for the active build machines. 
#   It allows an optional argument [machine], which if present
#   restricts generation to makefiles for the specified machine.
#   Currently [machine] MUST BE a unix machine.  This can be
#   changed if a reasonable need for it arises. 
#     Because makefiles are needed for both the C and translated
#   versions of gsi, gsi40 is used to designate the translated
#   version.  Makefiles are stored in the promote/{c,lsp}gsi directories.

if [ "$1" = "" ]; then
	echo "usage: generate-dst-makefiles <gsi | gspan | gsi40 | exts | fgn> [machine]"
	exit 1
fi

VERSION=""   # Used to distinguish the translated and C versions of GSI

if [ $1 = gsi -o $1 = gspan -o $1 = gsi40 -o $1 = exts -o $1 = fgn ]; then
    if [ $1 = exts ]; then
        PRODUCT="gsi gspan fgn"    # create ext makefiles for gsi, gspan, and fgn
    elif [ $1 = gsi40 ]; then
        PRODUCT="gsi"
        VERSION="gsi40"
    else
        PRODUCT=$1                     # create makefile for gsi, gspan, or fgn alone
    fi

    if [ "$2" != "" ]; then
        unix_build_machines=$2
        vms_build_machines=""          # i.e., no non-unix machines
        nt_build_machines=""
    else

          # Invoke the build-machines script to generate a list of active unix,
          # vms, and nt build machines (by awking the bt-machines.dat file)
        unix_build_machines="`$SRCBOX/build/build-machines -active`"
        vms_build_machines="`$SRCBOX/build/build-machines -active -vmstypes`"
        nt_build_machines="`$SRCBOX/build/build-machines -active -nttypes`"
    fi
else
    echo "Error: $0: illegal argument $1: gsi, gspan, gsi40, exts, or fgn  expected"
    exit 1
fi

  # All files are created and manipulated in the product promotion directory.
if [ "$VERSION" = "gsi40" ]; then
    echo "cd $SRCBOX/promote/lspgsi"        # echo command before doing it
    cd $SRCBOX/promote/lspgsi
else
    echo "cd $SRCBOX/promote/cgsi"          # echo command before doing it
    cd $SRCBOX/promote/cgsi
fi

# The following loops generate the makefiles for each
# product and machine.  Makefiles are generated by using the
# C preprocessor, stripping empty lines and renaming the files
# appropriately, and adding the .mms suffix to vms files.

for p in $PRODUCT; do
    for b in $unix_build_machines $vms_build_machines $nt_build_machines; do

          # We check for product gsi or gspan then pass GSI_DEF or GSPAN_DEF
          # (uppercase) as defined symbols to cpp.  We do this to avoid
          # macro-expansion of GSI and GSPAN (which are likely to appear in
          # the template).
        if [ $p = gsi ]; then
            P=GSI_DEF 
        elif [ $p = gspan ]; then
            P=GSPAN_DEF
        elif [ $p = fgn ]; then
            P=FGN_DEF
        else
            echo "internal error in $0: inconsistent product $p"
        fi

          # To distinguish the translated gsi from the ext version, the
          # explicit flag GSI40_DEF is passed for the translated version.
        if [ "$VERSION" = "gsi40" ]; then
            transflag=GSI40_DEF
        else
            transflag=NEVERUSED
        fi

          # Create the makefile with the C preprocessor and the relevant flags.
          # The -traditional flag is needed to prevent spaces from being
          # emitted after macro expansions and \\<newline> from being altered.
        gcc -E -traditional -D${P} -D${b} -D${transflag} $SRCBOX/build/make-template.c > make-template.i

          # Use grep to strip empty lines and lines that begin with
          # a #<space><digit> (that gcc emits).  Use sed to transform trailing
          # \\ to a single \ .  The \\ transformation is needed because
          # gcc eliminates all Backslash-Newline occurrences.
        cmd="egrep -v '^# [0-9]|^$' make-template.i | sed 's/\\\\$/\\/' > make${p}-${b}"
        echo "$cmd"         # Echo it first.
        egrep -v '^# [0-9]|^$' make-template.i | sed 's/\\\\$/\\/' > make${p}-${b} # Now do it.

        echo "rm make-template.i" | sh -v
    done

    if [ "vms_build_machines" != "" ]; then
	    # add .mms suffix for vms machines
	    for b in $vms_build_machines ; do
		echo "mv make${p}-${b} make${p}-${b}.mms" | sh -v
            done
    fi
done

